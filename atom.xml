<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Khalid博客</title>
  <icon>https://www.gravatar.com/avatar/544c52cded72214c4cec7eb3c53b65fa</icon>
  <subtitle>Whatever you go, go with all your heart</subtitle>
  <link href="https://www.khalidlife.com/atom.xml" rel="self"/>
  
  <link href="https://www.khalidlife.com/"/>
  <updated>2022-11-29T07:05:54.979Z</updated>
  <id>https://www.khalidlife.com/</id>
  
  <author>
    <name>Khalid</name>
    <email>732060461@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NVM与Node环境安装</title>
    <link href="https://www.khalidlife.com/posts/zfidhe.html"/>
    <id>https://www.khalidlife.com/posts/zfidhe.html</id>
    <published>2022-05-15T07:33:00.000Z</published>
    <updated>2022-11-29T07:05:54.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-NVM"><a href="#安装-NVM" class="headerlink" title="安装 NVM"></a>安装 NVM</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p>nvm-noinstall.zip： 这个是绿色免安装版本，但是使用之前需要配置<br>nvm-setup.zip：这是一个安装包，下载之后点击安装，无需配置就可以使用，方便。<br>Source code(zip)：zip 压缩的源码<br>Sourc code(tar.gz)：tar.gz 的源码，一般用于*nix 系统<br>使用为 nvm-setup.zip 安装执行下一步直到 finish<br>安装完成后命令行输入 nvm，如果出现 nvm 版本号和一系列帮助指令，则说明 nvm 安装成功</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm ls   // 查看目前已经安装的版本</span><br><span class="line">nvm install 10.5.0  // 安装指定的版本的nodejs</span><br><span class="line">nvm use 10.5.0  // 使用指定版本的nodejs</span><br></pre></td></tr></table></figure><h1 id="node-npm-设置淘宝镜像"><a href="#node-npm-设置淘宝镜像" class="headerlink" title="node-npm 设置淘宝镜像"></a>node-npm 设置淘宝镜像</h1><ol><li>安装 cnpm 淘宝镜像：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ol start="2"><li>将 npm 设置为淘宝镜像：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ol start="3"><li>通过 npm 查看 cnpm 镜像设置：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><ol start="4"><li>通过 cnpm 查看 cnpm 镜像设置：(相当于使用 cnpm)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm config get registry</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">NVM与Node环境安装</summary>
    
    
    
    <category term="工具" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="开发环境" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    <category term="node" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/node/"/>
    
    
    <category term="nvm" scheme="https://www.khalidlife.com/tags/nvm/"/>
    
    <category term="node" scheme="https://www.khalidlife.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程</title>
    <link href="https://www.khalidlife.com/posts/krc62u.html"/>
    <id>https://www.khalidlife.com/posts/krc62u.html</id>
    <published>2022-02-24T00:30:50.000Z</published>
    <updated>2022-11-29T07:05:55.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、思维导图整体介绍"><a href="#一、思维导图整体介绍" class="headerlink" title="一、思维导图整体介绍"></a>一、思维导图整体介绍</h2><p><img src="http://assets.processon.com/chart_image/6216dbf9e401fd06e2e24a56.png#crop=0&crop=0&crop=1&crop=1&id=QGPUi&originHeight=193&originWidth=350&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&status=done&style=none&title="><br>[</p><p>](<a href="http://assets.processon.com/chart_image/6216dbf9e401fd06e2e24a56.png">http://assets.processon.com/chart_image/6216dbf9e401fd06e2e24a56.png</a>)</p>]]></content>
    
    
    <summary type="html">介绍Java的并发编程知识点</summary>
    
    
    
    <category term="Java" scheme="https://www.khalidlife.com/categories/Java/"/>
    
    <category term="并发编程" scheme="https://www.khalidlife.com/categories/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://www.khalidlife.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Centos免密登录</title>
    <link href="https://www.khalidlife.com/posts/umrbri.html"/>
    <id>https://www.khalidlife.com/posts/umrbri.html</id>
    <published>2021-07-22T05:08:00.000Z</published>
    <updated>2022-11-29T07:05:55.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主机设置"><a href="#主机设置" class="headerlink" title="主机设置"></a>主机设置</h1><h2 id="主机设置-1"><a href="#主机设置-1" class="headerlink" title="主机设置"></a>主机设置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa  -f ~/.ssh/id_rsa_dev</span><br><span class="line">touch authorized_keys</span><br><span class="line">chmod 600 authorized_keys</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa_dev.pub -p xxx root@xxx</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Centos免密登录</summary>
    
    
    
    <category term="教程" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    <category term="Centos" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/Linux/Centos/"/>
    
    
    <category term="Centos" scheme="https://www.khalidlife.com/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>OpenVPN安装与配置</title>
    <link href="https://www.khalidlife.com/posts/pgw7at.html"/>
    <id>https://www.khalidlife.com/posts/pgw7at.html</id>
    <published>2021-07-11T07:44:01.000Z</published>
    <updated>2022-11-29T07:05:55.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、OpenVPN-证书制作"><a href="#一、OpenVPN-证书制作" class="headerlink" title="一、OpenVPN 证书制作"></a>一、OpenVPN 证书制作</h1><h2 id="1-1、解压-easy-rsa-data-zip-文件"><a href="#1-1、解压-easy-rsa-data-zip-文件" class="headerlink" title="1.1、解压 easy-rsa-data.zip 文件"></a>1.1、解压 easy-rsa-data.zip 文件</h2><ol><li>进入<code>/opt/khalidfile/openvpn</code>目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/khalidfile/openvpn</span><br></pre></td></tr></table></figure><ol start="2"><li>解压 easy-rsa-data.zip 文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip easy-rsa-data.zip</span><br></pre></td></tr></table></figure><ol start="3"><li>进入目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd easy-rsa-data/2.2</span><br></pre></td></tr></table></figure><ol start="4"><li>修改权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 *</span><br></pre></td></tr></table></figure><h2 id="1-2、配置-vars"><a href="#1-2、配置-vars" class="headerlink" title="1.2、配置 vars"></a>1.2、配置 vars</h2><ol><li>配置 vars<blockquote><p>其中 xxx 变更为实际含义内容</p></blockquote></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> These are the default values <span class="keyword">for</span> fields</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">which</span> will be placed <span class="keyword">in</span> the certificate.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Don<span class="string">&#x27;t leave any of these fields blank.</span></span></span><br><span class="line">export KEY_COUNTRY=&quot;cn&quot;</span><br><span class="line">export KEY_PROVINCE=&quot;zhejiang&quot;</span><br><span class="line">export KEY_CITY=&quot;hangzhou&quot;</span><br><span class="line">export KEY_ORG=&quot;xxx&quot;</span><br><span class="line">export KEY_EMAIL=&quot;xxx@163.com&quot;</span><br><span class="line">export KEY_OU=&quot;DevelopmentDepartment&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> X509 Subject Field</span></span></span><br><span class="line">export KEY_NAME=&quot;xxx&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> PKCS11 Smart Card</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> export PKCS11_MODULE_PATH=&quot;/usr/lib/changeme.so&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> export PKCS11_PIN=1234</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> If you&#x27;</span>d like to sign all keys with the same Common Name, uncomment the KEY_CN <span class="built_in">export</span> below</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You will also need to make sure your OpenVPN server config has the duplicate-cn option <span class="built_in">set</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">export</span> KEY_CN=<span class="string">&quot;CommonName&quot;</span></span></span><br><span class="line">export KEY_CN=&quot;xxx&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>让 vars 生效</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ./vars</span><br></pre></td></tr></table></figure><ol start="3"><li>清空原证书</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clean-all</span><br></pre></td></tr></table></figure><h2 id="1-3、生成根证书和密钥"><a href="#1-3、生成根证书和密钥" class="headerlink" title="1.3、生成根证书和密钥"></a>1.3、生成根证书和密钥</h2><ol><li>命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build-ca</span><br></pre></td></tr></table></figure><ol start="2"><li>证书文件： ca.crt ca.key</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls keys/</span><br><span class="line"><span class="meta">#</span><span class="bash"> ca.crt  ca.key  index.txt  serial</span></span><br></pre></td></tr></table></figure><h2 id="1-4、生成服务端证书和密钥"><a href="#1-4、生成服务端证书和密钥" class="headerlink" title="1.4、生成服务端证书和密钥"></a>1.4、生成服务端证书和密钥</h2><ol><li>命令<blockquote><p>Sign the certificate? [y/n]:y<br>1 out of 1 certificate requests certified, commit? [y/n]y</p></blockquote></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build-key-server khalidlife-server</span><br></pre></td></tr></table></figure><ol start="2"><li>证书文件： khalidlife-server.crt khalidlife-server.key</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls keys/</span><br><span class="line">01.pem  ca.crt  ca.key  index.txt  index.txt.attr  index.txt.old  khalidlife-server.crt  khalidlife-server.csr  khalidlife-server.key  serial  serial.old</span><br></pre></td></tr></table></figure><h2 id="1-5、生成客户端证书和密钥"><a href="#1-5、生成客户端证书和密钥" class="headerlink" title="1.5、生成客户端证书和密钥"></a>1.5、生成客户端证书和密钥</h2><ol><li>命令<blockquote><p>Sign the certificate? [y/n]:y<br>1 out of 1 certificate requests certified, commit? [y/n]y</p></blockquote></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build-key khalidlife-client</span><br></pre></td></tr></table></figure><ol start="2"><li>证书文件： khalidlife-client.crt khalidlife-client.key</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls keys/</span><br><span class="line">01.pem  ca.crt  index.txt       index.txt.attr.old  khalidlife-client.crt  khalidlife-client.key  khalidlife-server.csr  serial</span><br><span class="line">02.pem  ca.key  index.txt.attr  index.txt.old       khalidlife-client.csr  khalidlife-server.crt  khalidlife-server.key  serial.old</span><br></pre></td></tr></table></figure><h2 id="1-6、生成证书密钥交换文件"><a href="#1-6、生成证书密钥交换文件" class="headerlink" title="1.6、生成证书密钥交换文件"></a>1.6、生成证书密钥交换文件</h2><ol><li>命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build-dh</span><br></pre></td></tr></table></figure><ol start="2"><li>证书密钥交换文件： dh2048.pem</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">01.pem  ca.crt  dh2048.pem  index.txt.attr      index.txt.old          khalidlife-client.csr  khalidlife-server.crt  khalidlife-server.key  serial.old</span><br><span class="line">02.pem  ca.key  index.txt   index.txt.attr.old  khalidlife-client.crt  khalidlife-client.key  khalidlife-server.csr  serial</span><br></pre></td></tr></table></figure><h1 id="二、安装与配置-OpenVPN-服务端"><a href="#二、安装与配置-OpenVPN-服务端" class="headerlink" title="二、安装与配置 OpenVPN 服务端"></a>二、安装与配置 OpenVPN 服务端</h1><h2 id="2-1、安装-OpenVPN-服务端"><a href="#2-1、安装-OpenVPN-服务端" class="headerlink" title="2.1、安装 OpenVPN 服务端"></a>2.1、安装 OpenVPN 服务端</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openvpn</span><br></pre></td></tr></table></figure><h2 id="2-2、配置-OpenVPN-服务端"><a href="#2-2、配置-OpenVPN-服务端" class="headerlink" title="2.2、配置 OpenVPN 服务端"></a>2.2、配置 OpenVPN 服务端</h2><ol><li>创建 OpenVPN 配置目录下证书文件夹</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/openvpn/keys</span><br></pre></td></tr></table></figure><ol start="2"><li>进入 EasyRSA 下证书文件夹</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd keys</span><br></pre></td></tr></table></figure><ol start="3"><li>拷贝证书文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &#123;ca.crt,khalidlife-server.crt,khalidlife-server.key,dh2048.pem&#125; /etc/openvpn/keys/</span><br></pre></td></tr></table></figure><ol start="4"><li>进入 OpenVPN 配置目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/openvpn</span><br></pre></td></tr></table></figure><ol start="5"><li>拷贝服务端配置模板文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/doc/openvpn-2.4.11/sample/sample-config-files/server.conf ./</span><br></pre></td></tr></table></figure><ol start="6"><li>编辑 <code>server.conf</code>文件<ol><li>命令</li></ol></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim server.conf</span><br></pre></td></tr></table></figure><ol start="2"><li> 证书位置名称修改</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ca keys/ca.crt</span><br><span class="line">cert keys/khalidlife-server.crt</span><br><span class="line">key keys/khalidlife-server.key  # This file should be kept secret</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Diffie hellman parameters.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate your own with:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   openssl dhparam -out dh2048.pem 2048</span></span><br><span class="line">dh keys/dh2048.pem</span><br></pre></td></tr></table></figure><ol start="3"><li> 修改 vpn 的 ip 地址</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">server 10.8.0.0 255.255.255.0</span></span><br><span class="line">server 10.1.0.0 255.255.255.0</span><br></pre></td></tr></table></figure><ol start="4"><li> 定义路由转发</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push &quot;route 10.1.0.0 255.255.255.0&quot;</span><br><span class="line">push &quot;route 10.10.0.0 255.255.240.0&quot;</span><br></pre></td></tr></table></figure><ol start="5"><li> 修改拒绝服务攻击证书文件路径</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tls-auth keys/ta.key 0</span><br></pre></td></tr></table></figure><ol start="6"><li> 修改加密方式</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">cipher AES-256-CBC</span></span><br><span class="line">cipher AES-256-GCM</span><br></pre></td></tr></table></figure><h2 id="2-3、启用路由转发功能"><a href="#2-3、启用路由转发功能" class="headerlink" title="2.3、启用路由转发功能"></a>2.3、启用路由转发功能</h2><ol><li>修改<code>/etc/sysctl.conf</code>文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><ol start="2"><li>让修改生效</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h2 id="2-4、建立ta-key文件（拒绝服务攻击证书文件）"><a href="#2-4、建立ta-key文件（拒绝服务攻击证书文件）" class="headerlink" title="2.4、建立ta.key文件（拒绝服务攻击证书文件）"></a>2.4、建立<code>ta.key</code>文件（拒绝服务攻击证书文件）</h2><ol><li>进入 OpenVPN 配置目录下的证书文件目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/openvpn/keys</span><br></pre></td></tr></table></figure><ol start="2"><li>生成 <code>ta.key</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openvpn --genkey --secret ta.key</span><br></pre></td></tr></table></figure><h2 id="2-5、启动-OpenVPN-服务"><a href="#2-5、启动-OpenVPN-服务" class="headerlink" title="2.5、启动 OpenVPN 服务"></a>2.5、启动 OpenVPN 服务</h2><ol><li>命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openvpn --daemon --config /etc/openvpn/server.conf</span><br></pre></td></tr></table></figure><ol start="2"><li>查看效果</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lntup | grep 1194</span><br></pre></td></tr></table></figure><h2 id="2-6、添加地址转换"><a href="#2-6、添加地址转换" class="headerlink" title="2.6、添加地址转换"></a>2.6、添加地址转换</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 10.1.0.0/24 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -L</span><br></pre></td></tr></table></figure><h1 id="三、安装与配置-OpenVPN-客户端"><a href="#三、安装与配置-OpenVPN-客户端" class="headerlink" title="三、安装与配置 OpenVPN 客户端"></a>三、安装与配置 OpenVPN 客户端</h1><h2 id="3-1、配置-OpenVPN-客户端"><a href="#3-1、配置-OpenVPN-客户端" class="headerlink" title="3.1、配置 OpenVPN 客户端"></a>3.1、配置 OpenVPN 客户端</h2><ol><li>建立 client 文件夹</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/client</span><br></pre></td></tr></table></figure><ol start="2"><li>进入 client 目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/client</span><br></pre></td></tr></table></figure><ol start="3"><li>拷贝客户端配置模板文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/doc/openvpn-2.4.11/sample/sample-config-files/client.conf ~/client</span><br></pre></td></tr></table></figure><ol start="4"><li>编辑客户端配置模板文件<ol><li>命令</li></ol></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim client.conf</span><br></pre></td></tr></table></figure><ol start="2"><li> 修改证书名称</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cert khalidlife-client.crt</span><br><span class="line">key khalidlife-client.key</span><br></pre></td></tr></table></figure><ol start="3"><li> 修改加密方式</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">cipher AES-256-CBC</span></span><br><span class="line">cipher AES-256-GCM</span><br></pre></td></tr></table></figure><ol start="4"><li> 修改接口地址</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote 192.168.243.81 1194</span><br></pre></td></tr></table></figure><ol start="5"><li>拷贝证书</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/khalidfile/openvpn/easy-rsa-data/2.2/keys/khalidlife-client.key /root/client/</span><br><span class="line">cp /opt/khalidfile/openvpn/easy-rsa-data/2.2/keys/khalidlife-client.crt /root/client/</span><br><span class="line">cp /opt/khalidfile/openvpn/easy-rsa-data/2.2/keys/ca.crt /root/client/</span><br><span class="line">cp /etc/openvpn/keys/ta.key /root/client/</span><br></pre></td></tr></table></figure><ol start="6"><li>检查证书文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">ca.crt  client.conf  khalidlife-client.crt  khalidlife-client.key  ta.key</span><br></pre></td></tr></table></figure><ol start="7"><li>重命名配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv client.conf khalidlife.opvn</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">mv client khalidlife</span><br></pre></td></tr></table></figure><ol start="8"><li>打包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r khalidlife.zip khalidlife</span><br></pre></td></tr></table></figure><ol start="9"><li>x</li></ol><p>参考：<a href="https://www.bilibili.com/video/BV1mK411T7eg">https://www.bilibili.com/video/BV1mK411T7eg</a></p>]]></content>
    
    
    <summary type="html">OpenVPN安装与配置</summary>
    
    
    
    <category term="教程" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    <category term="OpenVPN" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/Linux/OpenVPN/"/>
    
    
    <category term="OpenVPN" scheme="https://www.khalidlife.com/tags/OpenVPN/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件系列-EasyYapi</title>
    <link href="https://www.khalidlife.com/posts/lxe2lp.html"/>
    <id>https://www.khalidlife.com/posts/lxe2lp.html</id>
    <published>2021-02-26T04:49:00.000Z</published>
    <updated>2022-11-29T07:05:55.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h1><ul><li><a href="https://easyyapi.com/documents/index.html">使用手册</a></li><li><a href="https://github.com/tangcent/easy-yapi">源码地址</a></li></ul><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.khalidlife.com/posts/gbiwpt.html#3-2-16%E3%80%81Yapi-%E6%8E%A5%E5%8F%A3%E5%AF%BC%E5%85%A5%E6%8F%92%E4%BB%B6%EF%BC%9AEasyYapi">安装方式</a></p><blockquote><p>请使用这个版本 <code>easy-yapi.2.1.3.183.0.jar</code>  ：<a href="https://github.com/tangcent/easy-yapi/releases/download/v2.1.3/easy-yapi.2.1.3.183.0.jar">https://github.com/tangcent/easy-yapi/releases/download/v2.1.3/easy-yapi.2.1.3.183.0.jar</a></p></blockquote><h2 id="rpc-接口导入支持以下使用方法"><a href="#rpc-接口导入支持以下使用方法" class="headerlink" title="rpc 接口导入支持以下使用方法"></a>rpc 接口导入<strong>支持以下使用方法</strong></h2><ol><li>打开项目中的包含 rpc 的文件或者在 IDEA 的左边项目文件区域选择文件或者文件夹 使用快捷键<code>alt shift E(windows)/ctrl E(mac)</code> 然后选择要导出的 API,选择导出渠道<code>Yapi/Markdown</code> 点击[✔]按钮或者按回车键完成导出</li><li>打开项目中的包含 rpc 的文件 右键文件内容选择<code>Generate...</code>或者用<code>[Alt + Insert]/[Ctrl+Enter]</code>(快捷键可能不一样)” 然后选择<code>ExportYapi/ExportMarkdown</code></li><li>在 IDEA 的左边项目文件区域选择文件或者文件夹 鼠标点击最上方 Code &gt; ExportYapi/ExportMarkdown</li></ol><hr><p><strong>rpc 相关规则</strong></p><table><thead><tr><th>规则的 key</th><th>规则目标(上下文)</th><th>版本</th><th>规则描述</th></tr></thead><tbody><tr><td>☆<a href="https://easyyapi.com/setting/rules/mdoc_class_filter.html">mdoc.class.filter</a></td><td>class</td><td>v0.9.5+</td><td>选择哪些类可以导出方法文档(rpc)</td></tr><tr><td>mdoc.method.filter</td><td>method</td><td>v0.9.5+</td><td>选择哪些方法可以导出方法文档(rpc)</td></tr><tr><td>☆<a href="https://easyyapi.com/setting/rules/mdoc_method_path.html">mdoc.method.path</a></td><td>method</td><td>v0.9.5+</td><td>设置方法文档(rpc)的路径</td></tr><tr><td>mdoc.method.http.method</td><td>method</td><td>v0.9.5+</td><td>设置方法文档(rpc)HTTP 请求方式</td></tr></tbody></table><p>点击<a href="https://easyyapi.com/setting/config-rule.html">规则配置</a>查看更多.</p><hr><ul><li><code>**导出rpc方法的功能默认是关闭的 , 开启需要勾选:Preferences(Settings) &gt; Other Settings &gt; EasyApi &gt; Support &gt; methodDoc**</code>  , 参见:<a href="https://easyyapi.com/setting/ide-setting.html">IDEA 配置</a></li><li>rpc 文档支持导出到<code>yapi</code>/<code>markdown</code></li></ul><h2 id="rest-接口导入"><a href="#rest-接口导入" class="headerlink" title="rest 接口导入"></a>rest 接口导入</h2><p><strong>支持以下使用方法</strong></p><ol><li>打开项目中的包含 api/rpc 的文件或者在 IDEA 的左边项目文件区域选择文件或者文件夹 使用快捷键<code>alt shift E(windows)/ctrl E(mac)</code> 然后选择要导出的 API,选择导出渠道<code>Yapi</code> 点击[✔]按钮或者按回车键完成导出</li><li>打开项目中的包含 api/rpc 的文件 右键文件内容选择<code>Generate...</code>或者用<code>[Alt + Insert]/[Ctrl+Enter]</code>(快捷键可能不一样)” 然后选择<code>ExportYapi</code></li><li>在 IDEA 的左边项目文件区域选择文件或者文件夹 鼠标点击最上方 Code &gt; ExportYapi</li><li>鼠标点击最上方 Code &gt; YapiDashBoard  然后就可以用鼠标将左边的 API 拖动到右边 yapi 目录中，完成 API 导出到 Yapi</li></ol><hr><ul><li>初次使用可能会以弹窗的方式要求输入必要的信息,参见:<a href="https://easyyapi.com/setting/yapi.html">yapi 配置</a></li><li>熟悉后可以尝试:<a href="https://easyyapi.com/setting/yapi-mock.html">yapi mock</a></li></ul><h2 id="项目中使用"><a href="#项目中使用" class="headerlink" title="项目中使用"></a>项目中使用</h2><p>在项目根路径加入 <code>.easy.api.config</code>  文件</p><h3 id="代码注释配置"><a href="#代码注释配置" class="headerlink" title="代码注释配置"></a>代码注释配置</h3><h4 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前置网关配置中心方案设计</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Khalid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-03-02 09:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfigCenterController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取业务通用配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> interchangeableConfigQueryParam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@folder</span> 自助终端配置中心方案设计</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/gateway/configcenter/getInterchangeableConfig&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;InterchangeableConfigVO&gt;&gt; getInterchangeableConfig(</span><br><span class="line">    <span class="meta">@RequestBody</span> InterchangeableConfigQueryParam interchangeableConfigQueryParam) &#123;</span><br><span class="line">    <span class="keyword">return</span> Results.success(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字段注释"><a href="#字段注释" class="headerlink" title="字段注释"></a>字段注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.khalidlife.demo.schemedesign.controller.param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.FieldDefaults;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用配置入参</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Khalid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-03-02 10:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FieldDefaults(level = AccessLevel.PRIVATE)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterchangeableConfigQueryParam</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 医院ID(虚拟结算长编号)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;医院ID不能为空&quot;)</span></span><br><span class="line">    String corpCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 渠道ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long channelId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分组id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long groupId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * config key列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;String&gt; configKeys;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="easy-api-config-文件配置"><a href="#easy-api-config-文件配置" class="headerlink" title="easy.api.config 文件配置"></a>easy.api.config 文件配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"># Yapi mock规则：通过字段名及类型等特征来配置mock规则</span><br><span class="line">## 增加自定义mock规则</span><br><span class="line">#mockjs官方示例: http://mockjs.com/examples.html</span><br><span class="line">#定义一些基础的规则</span><br><span class="line">#中国手机号</span><br><span class="line">phone=1@pick([&quot;34&quot;,&quot;35&quot;,&quot;36&quot;,&quot;37&quot;,&quot;38&quot;,&quot;39&quot;,&quot;50&quot;,&quot;5&quot;,&quot;52&quot;,&quot;58&quot;,&quot;59&quot;,&quot;57&quot;,&quot;82&quot;,&quot;87&quot;,&quot;88&quot;,&quot;70&quot;,&quot;47&quot;,&quot;30&quot;,&quot;3&quot;,&quot;32&quot;,&quot;55&quot;,&quot;56&quot;,&quot;85&quot;,&quot;86&quot;,&quot;33&quot;,&quot;53&quot;,&quot;80&quot;,&quot;89&quot;])@string(&quot;number&quot;, 8)</span><br><span class="line">#毫秒时间戳</span><br><span class="line">mtimestamp=@now(&#x27;T&#x27;)</span><br><span class="line">#0-9</span><br><span class="line">digit=@natural(0,9)</span><br><span class="line">#小于1000的自然数</span><br><span class="line">natural_lt_1000=@natural(0,1000)</span><br><span class="line">#小数点后两位</span><br><span class="line">float_with_two=@natural(0,10000).@natural(0,100)</span><br><span class="line">#http url</span><br><span class="line">http_url=@pick([&quot;http&quot;,&quot;https&quot;])://www.@domain()/@string(&#x27;lower&#x27;,1,8)?@string(&#x27;lower&#x27;,2,4)=@string(&#x27;number&#x27;,1,2)</span><br><span class="line">#objectId 只是字符和位数，不满足具体协议</span><br><span class="line">objectId=@string(&quot;0123456789abcdef&quot;,24,24)</span><br><span class="line"></span><br><span class="line"># module</span><br><span class="line">#用于API分组</span><br><span class="line">#当无配置生效时, 默认使用当前模块/项目名</span><br><span class="line">#导出postman时,将为每个module创建一个文件夹</span><br><span class="line">#导出yapi时,每个module对应yapi中的一个项目</span><br><span class="line">#module=方案设计接口描述</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ignore</span><br><span class="line">#用于忽略class/method，不进行解析</span><br><span class="line">#注释在class上时,整个类将被忽略</span><br><span class="line">#注释在method上时,当前方法将被忽略</span><br><span class="line">ignore=#ignore</span><br><span class="line"></span><br><span class="line"># json.rule.field.name</span><br><span class="line">#用于设置输出/输入的字段名(用于json中字段名与类中字段名不一致)</span><br><span class="line">#Support for Jackson annotations</span><br><span class="line">json.rule.field.name=@com.fasterxml.jackson.annotation.JsonProperty#value</span><br><span class="line">#Support for Gson annotations</span><br><span class="line">#json.rule.field.name=@com.google.gson.annotations.SerializedName#value</span><br><span class="line"></span><br><span class="line"># json.rule.field.ignore</span><br><span class="line">#忽略字段(设置某些字段不出现在json中,或不需要请求时给出)</span><br><span class="line">#deprcated, see field.ignore</span><br><span class="line">#Support for Jackson annotations</span><br><span class="line">json.rule.field.ignore=@com.fasterxml.jackson.annotation.JsonIgnore#value</span><br><span class="line">#Support for Gson annotations</span><br><span class="line">#json.rule.field.ignore=!@com.google.gson.annotations.Expose#serialize</span><br><span class="line"></span><br><span class="line"># field.ignore</span><br><span class="line">#忽略字段(设置某些字段不出现在json中,或不需要请求时给出)</span><br><span class="line">#Support for Jackson annotations</span><br><span class="line">field.ignore=@com.fasterxml.jackson.annotation.JsonIgnore#value</span><br><span class="line">#Support for Gson annotations</span><br><span class="line">#field.ignore=!@com.google.gson.annotations.Expose#serialize</span><br><span class="line"></span><br><span class="line"># json.rule.convert</span><br><span class="line">#The ObjectId and Date are parsed as strings</span><br><span class="line">json.rule.convert[org.bson.types.ObjectId]=java.lang.String</span><br><span class="line">json.rule.convert[java.util.Date]=java.lang.String</span><br><span class="line">json.rule.convert[java.sql.Timestamp]=java.lang.String</span><br><span class="line">json.rule.convert[java.time.LocalDateTime]=java.lang.String</span><br><span class="line">json.rule.convert[java.time.LocalDate]=java.lang.String</span><br><span class="line">#resolve HttpEntity/RequestEntity/ResponseEntity</span><br><span class="line">###set resolveProperty = false</span><br><span class="line">json.rule.convert[#regex:org.springframework.http.HttpEntity]=java.lang.Object</span><br><span class="line">json.rule.convert[#regex:org.springframework.http.HttpEntity&lt;(.*?)&gt;]=$&#123;1&#125;</span><br><span class="line">json.rule.convert[#regex:org.springframework.http.RequestEntity&lt;(.*?)&gt;]=$&#123;1&#125;</span><br><span class="line">json.rule.convert[#regex:org.springframework.http.RequestEntity]=java.lang.Object</span><br><span class="line">json.rule.convert[#regex:org.springframework.http.ResponseEntity&lt;(.*?)&gt;]=$&#123;1&#125;</span><br><span class="line">json.rule.convert[#regex:org.springframework.http.ResponseEntity]=java.lang.Object</span><br><span class="line">###set resolveProperty = true</span><br><span class="line"></span><br><span class="line"># field.doc(doc.field)</span><br><span class="line">#字段的额外注释</span><br><span class="line">#deprecated info(java)</span><br><span class="line">field.doc[#deprecated]=groovy:&quot;\n「已废弃」&quot; + it.doc(&quot;deprecated&quot;)</span><br><span class="line">field.doc[@java.lang.Deprecated]=「已废弃」</span><br><span class="line">#deprecated info(kotlin)</span><br><span class="line">field.doc[@kotlin.Deprecated]=groovy:&quot;\n「已废弃」&quot; + it.ann(&quot;kotlin.Deprecated&quot;,&quot;message&quot;)</span><br><span class="line"></span><br><span class="line"># method.doc(doc.method)</span><br><span class="line">#方法(API)的额外注释</span><br><span class="line">#deprecated info(java)</span><br><span class="line">method.doc[#deprecated]=groovy:&quot;\n「已废弃」&quot; + it.doc(&quot;deprecated&quot;)</span><br><span class="line">method.doc[@java.lang.Deprecated]=「已废弃」</span><br><span class="line">method.doc[groovy:it.containingClass().hasDoc(&quot;deprecated&quot;)]=groovy:&quot;\n「已废弃」&quot; + it.containingClass().doc(&quot;deprecated&quot;)</span><br><span class="line">method.doc[groovy:it.containingClass().hasAnn(&quot;java.lang.Deprecated&quot;)]=「已废弃」</span><br><span class="line">#deprecated info(kotlin)</span><br><span class="line">#method.doc[@kotlin.Deprecated]=groovy:&quot;\n「已废弃」&quot; + it.ann(&quot;kotlin.Deprecated&quot;,&quot;message&quot;)</span><br><span class="line">#method.doc[groovy:it.containingClass().hasAnn(&quot;kotlin.Deprecated&quot;)]=groovy:&quot;\n「已废弃」 &quot; + it.containingClass().ann(&quot;kotlin.Deprecated&quot;,&quot;message&quot;)</span><br><span class="line"></span><br><span class="line"># param.doc(doc.param)</span><br><span class="line">#参数的额外注释</span><br><span class="line">param.doc=groovy:&quot;类型:&quot;+tool.uncapitalize(it.type().name().replace(&quot;java.lang.&quot;,&quot;&quot;))</span><br><span class="line"></span><br><span class="line"># param.required</span><br><span class="line">#用于标记API参数是否为必须(即不可为空)</span><br><span class="line">#Support for javax.validation annotations</span><br><span class="line">param.required=@javax.validation.constraints.NotBlank</span><br><span class="line">param.required=@&quot;javax.validation.constraints.NotNull</span><br><span class="line">param.required=@javax.validation.constraints.NotEmpty</span><br><span class="line"></span><br><span class="line"># field.required</span><br><span class="line">#用于标记字段是否为必须(即不可为空)</span><br><span class="line">#Support for javax.validation annotations</span><br><span class="line">field.required=@&quot;javax.validation.constraints.NotBlank</span><br><span class="line">field.required=@javax.validation.constraints.NotNull</span><br><span class="line">field.required=@javax.validation.constraints.NotEmpty</span><br><span class="line"></span><br><span class="line"># field.mock</span><br><span class="line">#用于生成yapi相关mock信息</span><br><span class="line"># mock for javax.validation</span><br><span class="line"></span><br><span class="line">###set resolveMulti = first</span><br><span class="line"># define var</span><br><span class="line">number_min=-9999</span><br><span class="line">number_max=9999</span><br><span class="line">float_dmin=2</span><br><span class="line">java_integer_types=[&quot;java.lang.Integer&quot;,&quot;int&quot;,&quot;java.lang.Long&quot;,&quot;long&quot;,&quot;java.lang.Short&quot;,&quot;short&quot;,&quot;java.math.BigInteger&quot;]</span><br><span class="line">java_float_types=[&quot;java.lang.Float&quot;,&quot;float&quot;,&quot;java.lang.Double&quot;,&quot;double&quot;,&quot;java.math.BigDecimal&quot;]</span><br><span class="line"># mock_integer_or_float=$&#123;java_integer_types&#125;.contains(it.type().name())?&quot;@integer&quot;:&quot;@float&quot;</span><br><span class="line"></span><br><span class="line"># AssertTrue|AssertFalse|Email</span><br><span class="line">field.mock[@javax.validation.constraints.AssertTrue]=true</span><br><span class="line">field.mock[@javax.validation.constraints.AssertFalse]=false</span><br><span class="line">field.mock[@javax.validation.constraints.Email]=groovy:&quot;@email&quot;</span><br><span class="line">#</span><br><span class="line">## Positive&amp;PositiveOrZero</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Positive&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(1,$&#123;number_max&#125;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.PositiveOrZero&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(0,$&#123;number_max&#125;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Positive&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(0.01,$&#123;number_max&#125;,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.PositiveOrZero&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(0,$&#123;number_max&#125;,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#</span><br><span class="line">## Negative&amp;NegativeOrZero</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Negative&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer($&#123;number_min&#125;,-1)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.NegativeOrZero&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer($&#123;number_min&#125;,0)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Negative&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float($&#123;number_min&#125;,0.01,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.NegativeOrZero&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float($&#123;number_min&#125;,0,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#</span><br><span class="line">## Max+Min</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Max&quot;)&amp;⁢.hasAnn(&quot;javax.validation.constraints.Min&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(&quot;+it.ann(&quot;javax.validation.constraints.Min&quot;)+&quot;,&quot;+it.ann(&quot;javax.validation.constraints.Max&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Max&quot;)&amp;⁢.hasAnn(&quot;javax.validation.constraints.Min&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(&quot;+it.ann(&quot;javax.validation.constraints.Min&quot;)+&quot;,&quot;+it.ann(&quot;javax.validation.constraints.Max&quot;)+&quot;,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#</span><br><span class="line">## Max|Min</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Max&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(0,&quot;+it.ann(&quot;javax.validation.constraints.Max&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Min&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(&quot;+it.ann(&quot;javax.validation.constraints.Min&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Max&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(0,&quot;+it.ann(&quot;javax.validation.constraints.Max&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Min&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(&quot;+it.ann(&quot;javax.validation.constraints.Min&quot;)+&quot;)&quot;</span><br><span class="line">#</span><br><span class="line">## DecimalMax+DecimalMin</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.DecimalMax&quot;)&amp;⁢.hasAnn(&quot;javax.validation.constraints.DecimalMin&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(&quot;+it.ann(&quot;javax.validation.constraints.DecimalMin&quot;)+&quot;,&quot;+it.ann(&quot;javax.validation.constraints.DecimalMax&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.DecimalMax&quot;)&amp;⁢.hasAnn(&quot;javax.validation.constraints.DecimalMin&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(&quot;+it.ann(&quot;javax.validation.constraints.DecimalMin&quot;)+&quot;,&quot;+it.ann(&quot;javax.validation.constraints.DecimalMax&quot;)+&quot;,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#</span><br><span class="line">## DecimalMax|DecimalMin</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.DecimalMax&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(0,&quot;+it.ann(&quot;javax.validation.constraints.DecimalMax&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.DecimalMin&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(&quot;+it.ann(&quot;javax.validation.constraints.DecimalMin&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.DecimalMax&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(0,&quot;+it.ann(&quot;javax.validation.constraints.DecimalMax&quot;)+&quot;,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.DecimalMin&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(&quot;+it.ann(&quot;javax.validation.constraints.DecimalMin&quot;)+&quot;,$&#123;float_dmin&#125;)&quot;</span><br><span class="line"></span><br><span class="line">###set resolveMulti = error</span><br><span class="line"></span><br><span class="line"># field.default.value(v1.7.1+)</span><br><span class="line">#用于设置字段的默认值</span><br><span class="line">field.default.value=#default</span><br><span class="line"></span><br><span class="line"># api.open</span><br><span class="line">#标记接口是否公开</span><br><span class="line">api.open=#open</span><br><span class="line"></span><br><span class="line"># api.status</span><br><span class="line">#标记接口status</span><br><span class="line">#yapi status</span><br><span class="line">api.status[#undone]=undone</span><br><span class="line">api.status[#todo]=undone</span><br><span class="line"></span><br><span class="line"># mdoc.class.filter</span><br><span class="line">#用于选择哪些类可以导出方法(rpc)文档, 根据当前项目情况</span><br><span class="line">#如果所有的RPC接口类都以Client结尾, 则可配置:</span><br><span class="line">mdoc.class.filter=groovy:it.name().endsWith(&quot;Client&quot;)</span><br><span class="line">#如果所有的RPC接口类包都在a.b.c.client, 则可配置:</span><br><span class="line">mdoc.class.filter=groovy:it.name().startsWith(&quot;a.b.c.client&quot;)</span><br><span class="line"></span><br><span class="line"># constant.field.ignore</span><br><span class="line">#忽略常量字段</span><br><span class="line">#ignore serialVersionUID</span><br><span class="line">constant.field.ignore=groovy:it.name()==&quot;serialVersionUID&quot;</span><br><span class="line"></span><br><span class="line"># method.return.main</span><br><span class="line">#此配置仅设置返回值的核心主体，使得@return的注释落在主体属性上,不影响返回类型及字段.</span><br><span class="line">method.return.main[groovy:it.returnType().isExtend(&quot;com.khalidlife.demo.schemedesign.common.domain.Result&quot;)]=data</span><br><span class="line"></span><br><span class="line"># method.return</span><br><span class="line">#为了方便书写，我们可以尝试使用&#123;@link&#125;来设置实际响应类型，利用helper.resolveLink来解析</span><br><span class="line">method.return[#real_return]=groovy: helper.resolveLink(it.doc(&quot;real_return&quot;))</span><br><span class="line">#/**</span><br><span class="line"># * @real_return &#123;@link Result&lt;UserInfo&gt;&#125;</span><br><span class="line"># */</span><br><span class="line">#更进一步的，如果所有的响应都由com.itangcent.common.dto.Result包装</span><br><span class="line">#method.return[#real_return]=groovy: &quot;com.khalidlife.demo.schemedesign.common.domain.Result&lt;&quot; +  helper.resolveLink(it.doc(&quot;real_return&quot;)) +&quot;&gt;&quot;</span><br><span class="line">#/**</span><br><span class="line"># * @real_return &#123;@link UserInfo&#125;</span><br><span class="line"># */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># folder.name</span><br><span class="line"># 用于设置API所属文件夹的名称</span><br><span class="line"># 缺省情况下，默认使用api所在类作为所属文件夹</span><br><span class="line"># read folder name from tag `folder`</span><br><span class="line">folder.name=#folder</span><br><span class="line">#使用方法：方法上加注释</span><br><span class="line">#/**</span><br><span class="line"># * @folder Mock字符串</span><br><span class="line"># */</span><br></pre></td></tr></table></figure><h2 id="RPC-项目配置"><a href="#RPC-项目配置" class="headerlink" title="RPC 项目配置"></a>RPC 项目配置</h2><h3 id="工具配置页"><a href="#工具配置页" class="headerlink" title="工具配置页"></a>工具配置页</h3><p>待补充…<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1082206/1654148809806-6a504b04-af7d-4fcb-81ef-dc99de740af6.png#clientId=u77aa3862-a61a-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=2002&id=u88239593&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2002&originWidth=2864&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=373212&status=done&style=none&taskId=udafbec67-2f08-4bc7-869f-7075e017a8e&title=&width=2864" alt="image.png"></p><h3 id="easy-api-config-文件配置-1"><a href="#easy-api-config-文件配置-1" class="headerlink" title="easy.api.config 文件配置"></a>easy.api.config 文件配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">module=cloud-medical-service-client</span><br><span class="line"></span><br><span class="line"># mdoc.class.filter</span><br><span class="line">#用于选择哪些类可以导出方法(rpc)文档, 根据当前项目情况</span><br><span class="line">#如果所有的RPC接口类都以Client结尾, 则可配置:</span><br><span class="line">#mdoc.class.filter=groovy:it.name().endsWith(&quot;Service&quot;)</span><br><span class="line">#如果所有的RPC接口类包都在a.b.c.client, 则可配置:</span><br><span class="line">mdoc.class.filter=groovy:it.name().startsWith(&quot;com.yuantu.cloud.hospital.cm.service.client.service&quot;)</span><br><span class="line"></span><br><span class="line"># constant.field.ignore</span><br><span class="line">#忽略常量字段</span><br><span class="line">#ignore serialVersionUID</span><br><span class="line">constant.field.ignore=groovy:it.name()==&quot;serialVersionUID&quot;</span><br><span class="line"></span><br><span class="line"># method.return.main</span><br><span class="line">#此配置仅设置返回值的核心主体，使得@return的注释落在主体属性上,不影响返回类型及字段.</span><br><span class="line">method.return.main[groovy:it.returnType().isExtend(&quot;com.yuantu.lego.module.api.convention.data.domain.Result&quot;)]=data</span><br><span class="line"></span><br><span class="line"># folder.name</span><br><span class="line"># 用于设置API所属文件夹的名称</span><br><span class="line"># 缺省情况下，默认使用api所在类作为所属文件夹</span><br><span class="line"># read folder name from tag `folder`</span><br><span class="line">folder.name=#folder</span><br><span class="line">#使用方法：方法上加注释</span><br><span class="line">#/**</span><br><span class="line"># * @folder Mock字符串</span><br><span class="line"># */</span><br><span class="line"></span><br><span class="line"># mock规则</span><br><span class="line"># Yapi mock规则：通过字段名及类型等特征来配置mock规则</span><br><span class="line">## 增加自定义mock规则</span><br><span class="line">#mockjs官方示例: http://mockjs.com/examples.html</span><br><span class="line">#定义一些基础的规则</span><br><span class="line">#中国手机号</span><br><span class="line">phone=1@pick([&quot;34&quot;,&quot;35&quot;,&quot;36&quot;,&quot;37&quot;,&quot;38&quot;,&quot;39&quot;,&quot;50&quot;,&quot;5&quot;,&quot;52&quot;,&quot;58&quot;,&quot;59&quot;,&quot;57&quot;,&quot;82&quot;,&quot;87&quot;,&quot;88&quot;,&quot;70&quot;,&quot;47&quot;,&quot;30&quot;,&quot;3&quot;,&quot;32&quot;,&quot;55&quot;,&quot;56&quot;,&quot;85&quot;,&quot;86&quot;,&quot;33&quot;,&quot;53&quot;,&quot;80&quot;,&quot;89&quot;])@string(&quot;number&quot;, 8)</span><br><span class="line">#毫秒时间戳</span><br><span class="line">mtimestamp=@now(&#x27;T&#x27;)</span><br><span class="line">#0-9</span><br><span class="line">digit=@natural(0,9)</span><br><span class="line">#小于1000的自然数</span><br><span class="line">natural_lt_1000=@natural(0,1000)</span><br><span class="line">#小数点后两位</span><br><span class="line">float_with_two=@natural(0,10000).@natural(0,100)</span><br><span class="line">#http url</span><br><span class="line">http_url=@pick([&quot;http&quot;,&quot;https&quot;])://www.@domain()/@string(&#x27;lower&#x27;,1,8)?@string(&#x27;lower&#x27;,2,4)=@string(&#x27;number&#x27;,1,2)</span><br><span class="line">#objectId 只是字符和位数，不满足具体协议</span><br><span class="line">objectId=@string(&quot;0123456789abcdef&quot;,24,24)</span><br><span class="line"></span><br><span class="line"># ignore</span><br><span class="line">#用于忽略class/method，不进行解析</span><br><span class="line">#注释在class上时,整个类将被忽略</span><br><span class="line">#注释在method上时,当前方法将被忽略</span><br><span class="line">ignore=#ignore</span><br><span class="line"></span><br><span class="line"># method.doc(doc.method)</span><br><span class="line">#方法(API)的额外注释</span><br><span class="line">#deprecated info(java)</span><br><span class="line">method.doc[#deprecated]=groovy:&quot;\n「已废弃」&quot; + it.doc(&quot;deprecated&quot;)</span><br><span class="line">method.doc[@java.lang.Deprecated]=「已废弃」</span><br><span class="line">method.doc[groovy:it.containingClass().hasDoc(&quot;deprecated&quot;)]=groovy:&quot;\n「已废弃」&quot; + it.containingClass().doc(&quot;deprecated&quot;)</span><br><span class="line">method.doc[groovy:it.containingClass().hasAnn(&quot;java.lang.Deprecated&quot;)]=「已废弃」</span><br><span class="line"></span><br><span class="line">###set resolveMulti = first</span><br><span class="line"># define var</span><br><span class="line">number_min=-9999</span><br><span class="line">number_max=9999</span><br><span class="line">float_dmin=2</span><br><span class="line">java_integer_types=[&quot;java.lang.Integer&quot;,&quot;int&quot;,&quot;java.lang.Long&quot;,&quot;long&quot;,&quot;java.lang.Short&quot;,&quot;short&quot;,&quot;java.math.BigInteger&quot;]</span><br><span class="line">java_float_types=[&quot;java.lang.Float&quot;,&quot;float&quot;,&quot;java.lang.Double&quot;,&quot;double&quot;,&quot;java.math.BigDecimal&quot;]</span><br><span class="line"># mock_integer_or_float=$&#123;java_integer_types&#125;.contains(it.type().name())?&quot;@integer&quot;:&quot;@float&quot;</span><br><span class="line"></span><br><span class="line"># AssertTrue|AssertFalse|Email</span><br><span class="line">field.mock[@javax.validation.constraints.AssertTrue]=true</span><br><span class="line">field.mock[@javax.validation.constraints.AssertFalse]=false</span><br><span class="line">field.mock[@javax.validation.constraints.Email]=groovy:&quot;@email&quot;</span><br><span class="line">#</span><br><span class="line">## Positive&amp;PositiveOrZero</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Positive&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(1,$&#123;number_max&#125;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.PositiveOrZero&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(0,$&#123;number_max&#125;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Positive&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(0.01,$&#123;number_max&#125;,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.PositiveOrZero&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(0,$&#123;number_max&#125;,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#</span><br><span class="line">## Negative&amp;NegativeOrZero</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Negative&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer($&#123;number_min&#125;,-1)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.NegativeOrZero&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer($&#123;number_min&#125;,0)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Negative&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float($&#123;number_min&#125;,0.01,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.NegativeOrZero&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float($&#123;number_min&#125;,0,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#</span><br><span class="line">## Max+Min</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Max&quot;)&amp;⁢.hasAnn(&quot;javax.validation.constraints.Min&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(&quot;+it.ann(&quot;javax.validation.constraints.Min&quot;)+&quot;,&quot;+it.ann(&quot;javax.validation.constraints.Max&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Max&quot;)&amp;⁢.hasAnn(&quot;javax.validation.constraints.Min&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(&quot;+it.ann(&quot;javax.validation.constraints.Min&quot;)+&quot;,&quot;+it.ann(&quot;javax.validation.constraints.Max&quot;)+&quot;,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#</span><br><span class="line">## Max|Min</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Max&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(0,&quot;+it.ann(&quot;javax.validation.constraints.Max&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Min&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(&quot;+it.ann(&quot;javax.validation.constraints.Min&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Max&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(0,&quot;+it.ann(&quot;javax.validation.constraints.Max&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.Min&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(&quot;+it.ann(&quot;javax.validation.constraints.Min&quot;)+&quot;)&quot;</span><br><span class="line">#</span><br><span class="line">## DecimalMax+DecimalMin</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.DecimalMax&quot;)&amp;⁢.hasAnn(&quot;javax.validation.constraints.DecimalMin&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(&quot;+it.ann(&quot;javax.validation.constraints.DecimalMin&quot;)+&quot;,&quot;+it.ann(&quot;javax.validation.constraints.DecimalMax&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.DecimalMax&quot;)&amp;⁢.hasAnn(&quot;javax.validation.constraints.DecimalMin&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(&quot;+it.ann(&quot;javax.validation.constraints.DecimalMin&quot;)+&quot;,&quot;+it.ann(&quot;javax.validation.constraints.DecimalMax&quot;)+&quot;,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#</span><br><span class="line">## DecimalMax|DecimalMin</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.DecimalMax&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(0,&quot;+it.ann(&quot;javax.validation.constraints.DecimalMax&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.DecimalMin&quot;)&amp;&amp;$&#123;java_integer_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@integer(&quot;+it.ann(&quot;javax.validation.constraints.DecimalMin&quot;)+&quot;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.DecimalMax&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(0,&quot;+it.ann(&quot;javax.validation.constraints.DecimalMax&quot;)+&quot;,$&#123;float_dmin&#125;)&quot;</span><br><span class="line">#field.mock[groovy:it.hasAnn(&quot;javax.validation.constraints.DecimalMin&quot;)&amp;&amp;$&#123;java_float_types&#125;.contains(it.jsonType().name())]=groovy:&quot;@float(&quot;+it.ann(&quot;javax.validation.constraints.DecimalMin&quot;)+&quot;,$&#123;float_dmin&#125;)&quot;</span><br><span class="line"></span><br><span class="line">###set resolveMulti = error</span><br><span class="line"></span><br><span class="line"># field.default.value(v1.7.1+)</span><br><span class="line">#用于设置字段的默认值</span><br><span class="line">field.default.value=#default</span><br><span class="line"></span><br><span class="line"># api.open</span><br><span class="line">#标记接口是否公开</span><br><span class="line">api.open=#open</span><br><span class="line"></span><br><span class="line"># api.status</span><br><span class="line">#标记接口status</span><br><span class="line">#yapi status</span><br><span class="line">api.status[#undone]=undone</span><br><span class="line">api.status[#todo]=undone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置方法文档(rpc)HTTP请求方式, 默认POST</span><br><span class="line">mdoc.method.http.method=groovy:it.argCnt()==0?&quot;GET&quot;:null</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">IDEA插件系列-EasyYapi</summary>
    
    
    
    <category term="工具" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="开发环境" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    <category term="idea" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/idea/"/>
    
    <category term="插件" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/idea/%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="jetbrains" scheme="https://www.khalidlife.com/tags/jetbrains/"/>
    
    <category term="idea" scheme="https://www.khalidlife.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Windows10安装与配置</title>
    <link href="https://www.khalidlife.com/posts/gfa31l.html"/>
    <id>https://www.khalidlife.com/posts/gfa31l.html</id>
    <published>2021-02-17T07:36:00.000Z</published>
    <updated>2022-11-29T07:05:55.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h1><h2 id="1-1、安装-clover"><a href="#1-1、安装-clover" class="headerlink" title="1.1、安装 clover"></a>1.1、安装 clover</h2><h2 id="1-2、安装-chrome-浏览器"><a href="#1-2、安装-chrome-浏览器" class="headerlink" title="1.2、安装 chrome 浏览器"></a>1.2、安装 chrome 浏览器</h2><h2 id="1-3、安装搜狗输入法"><a href="#1-3、安装搜狗输入法" class="headerlink" title="1.3、安装搜狗输入法"></a>1.3、安装搜狗输入法</h2><h3 id="1-3-1、删除微软拼音"><a href="#1-3-1、删除微软拼音" class="headerlink" title="1.3.1、删除微软拼音"></a>1.3.1、删除微软拼音</h3><p>右下角点开语言首选项-&gt;点击中文(中华人民共和国)-&gt;点击选项-&gt;点击微软拼音-&gt;点击删除</p><h3 id="1-3-2、登录搜狗账号"><a href="#1-3-2、登录搜狗账号" class="headerlink" title="1.3.2、登录搜狗账号"></a>1.3.2、登录搜狗账号</h3><h2 id="1-4、安装迅雷"><a href="#1-4、安装迅雷" class="headerlink" title="1.4、安装迅雷"></a>1.4、安装迅雷</h2><h1 id="开发环境安装配置"><a href="#开发环境安装配置" class="headerlink" title="开发环境安装配置"></a>开发环境安装配置</h1><h2 id="2-1、安装-docker-环境（可选）"><a href="#2-1、安装-docker-环境（可选）" class="headerlink" title="2.1、安装 docker 环境（可选）"></a>2.1、安装 docker 环境（可选）</h2><h3 id="2-1-1、安装-docker"><a href="#2-1-1、安装-docker" class="headerlink" title="2.1.1、安装 docker"></a>2.1.1、安装 docker</h3><p><a href="https://docs.docker.com/docker-for-windows/install/">docker 官方安装文档</a></p><h4 id="2-1-1-1、设置国内源"><a href="#2-1-1-1、设置国内源" class="headerlink" title="2.1.1.1、设置国内源"></a>2.1.1.1、设置国内源</h4><ol><li>设置 daemon.json</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://ft4regk8.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;http://harbor.khalidlife.com:10102&quot;,&quot;10.10.7.161:10102&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>重启 docker</li></ol><h4 id="2-1-1-2、打开-docker-远程连接"><a href="#2-1-1-2、打开-docker-远程连接" class="headerlink" title="2.1.1.2、打开 docker 远程连接"></a>2.1.1.2、打开 docker 远程连接</h4><ol><li>查看状态</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:2375/version</span><br></pre></td></tr></table></figure><h3 id="2-1-2、安装-docker-compose"><a href="#2-1-2、安装-docker-compose" class="headerlink" title="2.1.2、安装 docker-compose"></a>2.1.2、安装 docker-compose</h3><p><a href="https://docs.docker.com/compose/install/">docker-compose 官方安装文档</a></p><ol><li><p>下载 docker-compose</p><blockquote><p>无需下载。Docker Desktop for Windows includes Compose along with other Docker apps, so most Windows users do not need to install Compose separately. For install instructions, see Install Docker Desktop on Windows.</p></blockquote></li><li><p>测试</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h2 id="2-2、安装-git"><a href="#2-2、安装-git" class="headerlink" title="2.2、安装 git"></a>2.2、安装 git</h2><h2 id="2-3、安装-jdk"><a href="#2-3、安装-jdk" class="headerlink" title="2.3、安装 jdk"></a>2.3、安装 jdk</h2><h3 id="2-3-1、设置环境变量"><a href="#2-3-1、设置环境变量" class="headerlink" title="2.3.1、设置环境变量"></a>2.3.1、设置环境变量</h3><h4 id="2-3-1-1、添加变量JAVA-HOME"><a href="#2-3-1-1、添加变量JAVA-HOME" class="headerlink" title="2.3.1.1、添加变量JAVA_HOME"></a>2.3.1.1、添加变量<code>JAVA_HOME</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1.8.0_281</span><br></pre></td></tr></table></figure><h4 id="2-3-1-2、添加变量CLASSPATH"><a href="#2-3-1-2、添加变量CLASSPATH" class="headerlink" title="2.3.1.2、添加变量CLASSPATH"></a>2.3.1.2、添加变量<code>CLASSPATH</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-3、修改变量Path"><a href="#2-3-1-3、修改变量Path" class="headerlink" title="2.3.1.3、修改变量Path"></a>2.3.1.3、修改变量<code>Path</code></h4><ol><li>jdk</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">JAVA_HOME%\bin</span></span><br></pre></td></tr></table></figure><ol start="2"><li>jre</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">JAVA_HOME%\jre\bin</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2、测试-jdk-是否安装成功"><a href="#2-3-2、测试-jdk-是否安装成功" class="headerlink" title="2.3.2、测试 jdk 是否安装成功"></a>2.3.2、测试 jdk 是否安装成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="2-4、安装-maven"><a href="#2-4、安装-maven" class="headerlink" title="2.4、安装 maven"></a>2.4、安装 maven</h2><h3 id="2-4-1、解压-maven-data-zip"><a href="#2-4-1、解压-maven-data-zip" class="headerlink" title="2.4.1、解压 maven-data.zip"></a>2.4.1、解压 maven-data.zip</h3><p>进入 <code>D:\khalidfile\maven</code> 文件夹解压 <code>maven-data.zip</code>，直接解压到当前目录即可。</p><h3 id="2-4-2、设置环境变量"><a href="#2-4-2、设置环境变量" class="headerlink" title="2.4.2、设置环境变量"></a>2.4.2、设置环境变量</h3><h4 id="2-4-2-1、添加变量-MAVEN-HOME"><a href="#2-4-2-1、添加变量-MAVEN-HOME" class="headerlink" title="2.4.2.1、添加变量**MAVEN_HOME**"></a>2.4.2.1、添加变量<code>**MAVEN_HOME**</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\khalidfile\maven\maven-data</span><br></pre></td></tr></table></figure><h4 id="2-4-2-2、修改变量-Path"><a href="#2-4-2-2、修改变量-Path" class="headerlink" title="2.4.2.2、修改变量**Path**"></a>2.4.2.2、修改变量<code>**Path**</code></h4><p>添加以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">MAVEN_HOME%\bin</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3、测试-maven-是否安装成功"><a href="#2-4-3、测试-maven-是否安装成功" class="headerlink" title="2.4.3、测试 maven 是否安装成功"></a>2.4.3、测试 maven 是否安装成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">win10安装与配置</summary>
    
    
    
    <category term="教程" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Windows" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/Windows/"/>
    
    <category term="win10" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/Windows/win10/"/>
    
    
    <category term="win10" scheme="https://www.khalidlife.com/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>IDEA最全配置与插件安装</title>
    <link href="https://www.khalidlife.com/posts/gbiwpt.html"/>
    <id>https://www.khalidlife.com/posts/gbiwpt.html</id>
    <published>2021-02-02T05:49:00.000Z</published>
    <updated>2022-11-29T07:05:56.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><h2 id="1-1、下载"><a href="#1-1、下载" class="headerlink" title="1.1、下载"></a>1.1、下载</h2><p><a href="https://www.jetbrains.com/idea/download/">官网下载地址</a></p><h2 id="1-2、安装"><a href="#1-2、安装" class="headerlink" title="1.2、安装"></a>1.2、安装</h2><p>在 IDEA 中选择：File —&gt; Settings —&gt; Plugins</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="2-1、编码配置（windows）"><a href="#2-1、编码配置（windows）" class="headerlink" title="2.1、编码配置（windows）"></a>2.1、编码配置（windows）</h2><blockquote><p>File -&gt; Settings -&gt; Editor -&gt; File Encoding</p></blockquote><ol><li>设置<code>Global Encoding</code>: <code>UTF-8</code></li><li>设置<code>Project Encoding</code>: <code>UTF-8</code></li><li>设置<code>Default encoding for properties files</code>: <code>UTF-8</code>，勾选<code>Transparent native-to-ascii conversion</code></li><li>设置<code>Create UTF-8 files</code>: <code>with NO BOM</code></li></ol><h2 id="2-2、代码风格统一设置"><a href="#2-2、代码风格统一设置" class="headerlink" title="2.2、代码风格统一设置"></a>2.2、代码风格统一设置</h2><blockquote><p>File -&gt; Manager IDE Settings -&gt; Import Settings</p></blockquote><p>导入<code>idea_khalid_settings.zip</code></p><h1 id="IDEA-插件安装"><a href="#IDEA-插件安装" class="headerlink" title="IDEA 插件安装"></a>IDEA 插件安装</h1><h2 id="3-1、安装方法"><a href="#3-1、安装方法" class="headerlink" title="3.1、安装方法"></a>3.1、安装方法</h2><p>在使用插件之前，你需要了解 IDEA 的插件安装方式，安装 IDEA 插件是非常方便的，你只要知道插件的名字就可以直接安装， IDEA 插件安装有两种方式：在线安装、离线安装。</p><h3 id="3-1-1、在线安装"><a href="#3-1-1、在线安装" class="headerlink" title="3.1.1、在线安装"></a>3.1.1、在线安装</h3><blockquote><p>在 IDEA 中选择：File -&gt; Settings -&gt; Plugins</p></blockquote><p>你可以直接在开发工具输入插件的名字搜索安装，例如安装 Lombok 插件：<br><img src="https://cdn.nlark.com/yuque/0/2021/gif/1082206/1612314087666-1f95e1ed-34ad-42f5-b419-506dd0c8beff.gif#crop=0&crop=0&crop=1&crop=1&height=452&id=amuq7&originHeight=452&originWidth=640&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=640"></p><h3 id="3-1-2、离线安装"><a href="#3-1-2、离线安装" class="headerlink" title="3.1.2、离线安装"></a>3.1.2、离线安装</h3><blockquote><p>在 IDEA 中选择：File -&gt; Settings -&gt; Plugins-&gt; ⚙ -&gt; Install Plugin from Disk</p></blockquote><h2 id="3-2、插件大全"><a href="#3-2、插件大全" class="headerlink" title="3.2、插件大全"></a>3.2、插件大全</h2><h3 id="3-2-1、idea-上-类调用时序图：SequenceDiagram-for-IntelliJ-IDEA"><a href="#3-2-1、idea-上-类调用时序图：SequenceDiagram-for-IntelliJ-IDEA" class="headerlink" title="3.2.1、idea 上 类调用时序图：SequenceDiagram for IntelliJ IDEA"></a>3.2.1、idea 上 类调用时序图：<code>SequenceDiagram for IntelliJ IDEA</code></h3><blockquote><p>推荐指数：☆☆☆ 推荐理由：在梳理别人的代码的时候， 能够很清晰的看到依赖调用时序</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1082206/1613553295052-c8695729-dce5-4afe-9c33-7b832d4086cd.png#crop=0&crop=0&crop=1&crop=1&height=753&id=oKXdu&margin=%5Bobject%20Object%5D&name=image.png&originHeight=753&originWidth=887&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=366272&status=done&style=none&title=&width=887" alt="image.png"></p><h3 id="3-2-2、彩色括号：Rainbow-Brackets"><a href="#3-2-2、彩色括号：Rainbow-Brackets" class="headerlink" title="3.2.2、彩色括号：Rainbow Brackets"></a>3.2.2、彩色括号：<code>Rainbow Brackets</code></h3><blockquote><p>推荐指数：☆☆☆☆☆ 推荐理由：方便查看代码</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1082206/1613553413948-8e52f597-cf19-4224-8bea-669cce636628.png#crop=0&crop=0&crop=1&crop=1&height=292&id=P6mki&margin=%5Bobject%20Object%5D&name=image.png&originHeight=292&originWidth=1080&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=150504&status=done&style=none&title=&width=1080" alt="image.png"></p><h3 id="3-2-3、mybatis-插件集合：MyBatis-Log-Plugin，MyBatisCodeHelperPro，Free-Mybatis-plugin"><a href="#3-2-3、mybatis-插件集合：MyBatis-Log-Plugin，MyBatisCodeHelperPro，Free-Mybatis-plugin" class="headerlink" title="3.2.3、mybatis 插件集合：MyBatis Log Plugin，MyBatisCodeHelperPro，Free Mybatis plugin"></a>3.2.3、mybatis 插件集合：<code>MyBatis Log Plugin</code>，<code>MyBatisCodeHelperPro</code>，<code>Free Mybatis plugin</code></h3><blockquote><p>推荐指数：☆☆☆☆☆ 推荐理由：在 sql 的 xml 里也能智能提示了！酷   三个插件都装上吧，相互补充</p></blockquote><h3 id="3-2-4、翻译插件：translation-plugin"><a href="#3-2-4、翻译插件：translation-plugin" class="headerlink" title="3.2.4、翻译插件：translation plugin"></a>3.2.4、翻译插件：<code>translation plugin</code></h3><blockquote><p>推荐指数：☆☆☆☆<br>推荐理由：不能翻墙的同学，请自行百度如何更换为百度翻译。在 ide 中直接翻译，不需要跳转到网页了，效率神器！</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1082206/1613553719276-9d383358-6380-4645-8436-453ef0ac926b.png#crop=0&crop=0&crop=1&crop=1&height=500&id=i70bX&margin=%5Bobject%20Object%5D&name=image.png&originHeight=500&originWidth=400&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=20769&status=done&style=none&title=&width=400" alt="image.png"></p><h3 id="3-2-5、快捷跳转-Action-方法：RestfulToolkitX"><a href="#3-2-5、快捷跳转-Action-方法：RestfulToolkitX" class="headerlink" title="3.2.5、快捷跳转 Action 方法：RestfulToolkitX"></a>3.2.5、快捷跳转 Action 方法：<code>RestfulToolkitX</code></h3><blockquote><p>推荐指数：☆☆☆☆☆<br>推荐理由：spring 的开发中经常有根据浏览器 url 找对应 action 方法的需求，这个可以快捷的根据 url 跳转，不用 findAll 查询了</p></blockquote><h3 id="3-2-6、高亮提示：HighlightBracketPair"><a href="#3-2-6、高亮提示：HighlightBracketPair" class="headerlink" title="3.2.6、高亮提示：HighlightBracketPair"></a>3.2.6、<strong>高亮提示：<code>HighlightBracketPair</code></strong></h3><blockquote><p>推荐指数：☆☆☆☆☆<br>推荐理由：括号开始结尾 高亮显示。    一眼就能看到！</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/gif/1082206/1613555860559-c532e7c4-f1a5-4ce6-b511-01ddfe3add95.gif#crop=0&crop=0&crop=1&crop=1&height=353&id=pBa0r&margin=%5Bobject%20Object%5D&name=640.gif&originHeight=353&originWidth=640&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=592746&status=done&style=none&title=&width=640" alt="640.gif"></p><h3 id="3-2-7、转换大小写：CamelCase【推荐】-或-UpperLowerCapitalize"><a href="#3-2-7、转换大小写：CamelCase【推荐】-或-UpperLowerCapitalize" class="headerlink" title="3.2.7、转换大小写：CamelCase【推荐】 或 UpperLowerCapitalize"></a>3.2.7、<strong>转换大小写：<code>CamelCase</code>【推荐】 或 <code>UpperLowerCapitalize</code></strong></h3><blockquote><p>推荐指数：☆☆☆☆☆<br>推荐理由：快捷转换格式：大小写     驼峰，下划线 中划线   等等</p></blockquote><h3 id="3-2-8、代码生成器-codehelper-generator-【推荐尝试】-或者-GenerateAllSetter"><a href="#3-2-8、代码生成器-codehelper-generator-【推荐尝试】-或者-GenerateAllSetter" class="headerlink" title="3.2.8、代码生成器 codehelper.generator 【推荐尝试】  或者 GenerateAllSetter"></a>3.2.8、代码生成器 codehelper.generator <strong>【推荐尝试】</strong>  或者 GenerateAllSetter</h3><blockquote><p>推荐指数：☆☆☆☆☆<br>推荐理由：每次对象搞 set 的时候挨个 set，有了它可以一键自动 set<br>功能介绍：生成器，可以更轻松，更高效地生成代码</p></blockquote><h4 id="3-2-8-1、GenAllSetter-功能"><a href="#3-2-8-1、GenAllSetter-功能" class="headerlink" title="3.2.8.1、GenAllSetter 功能"></a>3.2.8.1、GenAllSetter 功能</h4><ul><li>单击 GenAllSetter btn（支持快捷方式）时，将自动生成所有 Setter 方法（以 set 开头的方法）。</li><li>单击 GenAllSetter btn 两次时，将使用默认值自动生成所有 Setter 方法。</li></ul><h4 id="3-2-8-2、GenAllSetter-用法"><a href="#3-2-8-2、GenAllSetter-用法" class="headerlink" title="3.2.8.2、GenAllSetter 用法"></a>3.2.8.2、GenAllSetter 用法</h4><ul><li>单击主菜单中的工具-&gt; Codehelper-&gt; GenAllSetter 按钮以生成代码</li></ul><h4 id="3-2-8-3、GenDaoCode-功能"><a href="#3-2-8-3、GenDaoCode-功能" class="headerlink" title="3.2.8.3、GenDaoCode 功能"></a>3.2.8.3、GenDaoCode 功能</h4><ul><li>一键根据 pojo 生成 dao，service，sql 和 mybatis xml 文件。</li><li>一键更新 pojo 文件时，优雅地更新 sql，mybatis xml 文件。</li><li>提供 insert，insertList，select，update 和 delete 方法。</li><li>单击即可生成多声波。</li><li>自动识别 pojo 字段的注释，并添加为 sql 注释。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/gif/1082206/1613555916599-23fc069d-c8c4-4306-a0a7-b03f2b980b49.gif#crop=0&crop=0&crop=1&crop=1&height=240&id=xpPWJ&margin=%5Bobject%20Object%5D&name=640%20%281%29.gif&originHeight=240&originWidth=480&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=501087&status=done&style=none&title=&width=480" alt="640 (1).gif"><img src="https://cdn.nlark.com/yuque/0/2021/gif/1082206/1613555918693-729985dd-b58c-4aea-8c11-100a8f993874.gif#crop=0&crop=0&crop=1&crop=1&height=224&id=HxCK9&margin=%5Bobject%20Object%5D&name=640%20%282%29.gif&originHeight=224&originWidth=320&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=1818160&status=done&style=none&title=&width=320" alt="640 (2).gif"></p><h3 id="3-2-9、控制台日志高亮：Grep-Console"><a href="#3-2-9、控制台日志高亮：Grep-Console" class="headerlink" title="3.2.9、控制台日志高亮：Grep Console"></a>3.2.9、控制台日志高亮：<code>Grep Console</code></h3><blockquote><p>推荐指数：☆☆☆☆☆<br>推荐理由：没什么好说的， 基本是必备！</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1082206/1613554300622-c74ee77a-48dd-4bcc-99e6-ae8ee4309a1a.png#crop=0&crop=0&crop=1&crop=1&height=433&id=SIotf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=433&originWidth=899&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=678194&status=done&style=none&title=&width=899" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/gif/1082206/1613555946637-35b16ead-66aa-4fc2-b85b-f10a9afa1049.gif#crop=0&crop=0&crop=1&crop=1&height=274&id=DhI2b&margin=%5Bobject%20Object%5D&name=640%20%283%29.gif&originHeight=274&originWidth=601&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=249660&status=done&style=none&title=&width=601" alt="640 (3).gif"></p><h3 id="3-2-10、反编译插件：IntelliJad"><a href="#3-2-10、反编译插件：IntelliJad" class="headerlink" title="3.2.10、反编译插件：IntelliJad"></a><del>3.2.10、反编译插件：<code>IntelliJad</code></del></h3><blockquote><p><del>推荐指数：</del> &gt; <del>推荐理由：没什么好说的， 基本是必备！</del></p></blockquote><h3 id="3-2-11、保存自动格式化代码：Save-Actions"><a href="#3-2-11、保存自动格式化代码：Save-Actions" class="headerlink" title="3.2.11、保存自动格式化代码：Save Actions"></a>3.2.11、保存自动格式化代码：<code>Save Actions</code></h3><blockquote><p>推荐指数：☆☆☆☆☆<br>推荐理由：配合统一的代码风格配置，可以统一整个开发小组的代码风格。</p></blockquote><h3 id="3-2-12、阿里规约插件：Alibaba-Java-Coding-Guidelines"><a href="#3-2-12、阿里规约插件：Alibaba-Java-Coding-Guidelines" class="headerlink" title="3.2.12、阿里规约插件：Alibaba Java Coding Guidelines"></a>3.2.12、阿里规约插件：<code>Alibaba Java Coding Guidelines</code></h3><blockquote><p>推荐指数：☆☆☆☆☆<br>推荐理由：没什么好说的， 基本是必备！</p></blockquote><h3 id="3-2-13、代码注解插件：Lombok"><a href="#3-2-13、代码注解插件：Lombok" class="headerlink" title="3.2.13、代码注解插件：Lombok"></a>3.2.13、代码注解插件：<code>Lombok</code></h3><blockquote><p>推荐指数：☆☆☆☆☆<br>推荐理由：没什么好说的， 基本是必备！</p></blockquote><h3 id="3-2-14、Git-工具箱插件：GitToolBox"><a href="#3-2-14、Git-工具箱插件：GitToolBox" class="headerlink" title="3.2.14、Git 工具箱插件：GitToolBox"></a>3.2.14、Git 工具箱插件：<code>GitToolBox</code></h3><blockquote><p>推荐指数：☆☆☆☆☆<br>推荐理由：git 工具箱，提供各种 git 操作。</p></blockquote><p>详细配置见：<a href="https://github.com/zielu/GitToolBox/wiki/Manual">https://github.com/zielu/GitToolBox/wiki/Manual</a></p><h3 id="3-2-15、代码智能提示：Codota-AI-Autocomplete-for-Java-and-JavaScript"><a href="#3-2-15、代码智能提示：Codota-AI-Autocomplete-for-Java-and-JavaScript" class="headerlink" title="3.2.15、代码智能提示：Codota AI Autocomplete for Java and JavaScript"></a>3.2.15、代码智能提示：<code>Codota AI Autocomplete for Java and JavaScript</code></h3><blockquote><p>推荐指数：☆☆☆☆☆<br>推荐理由：Codota 这个插件用于智能代码补全，它基于数百万 Java 程序，能够根据程序上下文提示补全代码。相比于 IDEA 自带的智能提示来说，Codota 的提示更加全面一些。</p></blockquote><p>我们创建线程池现在变成下面这样：<br><img src="https://cdn.nlark.com/yuque/0/2021/gif/1082206/1613555776563-37d16189-7712-4f30-9d9f-5497786c32f1.gif#crop=0&crop=0&crop=1&crop=1&height=427&id=BATcF&margin=%5Bobject%20Object%5D&name=v2-372a334f0dc562cc53f825d034fff892_b.gif&originHeight=427&originWidth=720&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=306643&status=done&style=none&title=&width=720" alt="v2-372a334f0dc562cc53f825d034fff892_b.gif"></p><p>上面只是为了演示这个插件的强大，实际上创建线程池不推荐使用这种方式， 推荐使用 ThreadPoolExecutor 构造函数创建线程池。我下面要介绍的一个阿里巴巴的插件-<strong>Alibaba Java Code Guidelines</strong> 就检测出来了这个问题，所以，<strong>Executors</strong>下面用波浪线标记了出来。</p><p><strong>除了，在写代码的时候智能提示之外。你还可以直接选中代码然后搜索相关代码示例。</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1082206/1613555556936-4f859226-11aa-43d5-800d-8669ca2f6c40.png#crop=0&crop=0&crop=1&crop=1&height=821&id=pgEVY&margin=%5Bobject%20Object%5D&name=image.png&originHeight=821&originWidth=720&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=268291&status=done&style=none&title=&width=720" alt="image.png"><br>Codota 还有一个在线网站，在这个网站上你可以根据代码关键字搜索相关代码示例，非常不错！我在工作中经常会用到，说实话确实给我带来了很大便利。网站地址：<a href="https://www.codota.com/code"><strong>https://www.codota.com/code</strong></a> ，比如我们搜索  <code>Files.readAllLines</code>相关的代码，搜索出来的结果如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1082206/1613555610927-ce4dfa63-06a4-4764-9df6-f5ee39738a29.png#crop=0&crop=0&crop=1&crop=1&height=627&id=E5wI0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=627&originWidth=1080&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=331177&status=done&style=none&title=&width=1080" alt="image.png"><br>Codota 插件的基础功能都是免费的。你的代码也不会被泄露，这点你不用担心。</p><h3 id="3-2-16、Yapi-接口导入插件：EasyYapi"><a href="#3-2-16、Yapi-接口导入插件：EasyYapi" class="headerlink" title="3.2.16、Yapi 接口导入插件：EasyYapi"></a>3.2.16、Yapi 接口导入插件：<code>EasyYapi</code></h3><blockquote><p>推荐指数：☆☆☆☆☆<br>推荐理由：接口导入利器！</p></blockquote><p><a href="https://www.khalidlife.com/posts/lxe2lp.html">使用方法</a></p><h3 id="3-2-17、其余插件汇总"><a href="#3-2-17、其余插件汇总" class="headerlink" title="3.2.17、其余插件汇总"></a>3.2.17、其余插件汇总</h3><ol><li>快捷键提示工具：Key promoter X</li><li>领域对象转 JSON 工具：POJO to JSON</li><li>字符串工具：String Manipulation</li><li>Redis 可视化：Iedis   收费</li><li>K8s 工具：Kubernetes</li><li>ignore 插件：.ignore</li><li>Zookeeper 可视化：Zookeeper</li><li>字节码查看器：Bytecode Viewer、jclasslib</li><li>字节码编辑工具：Edit Bytecode</li><li>bug 预检查：FindBugs-IDEA</li><li>微基准测试：JMH Plugin</li><li>使用 Markdown 的方式绘制时序图：PlantUML</li><li>新 doc 插件：AsciiDoc</li><li>正则插件：any-rule</li></ol>]]></content>
    
    
    <summary type="html">idea最全配置与插件安装</summary>
    
    
    
    <category term="工具" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="开发环境" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    <category term="idea" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/idea/"/>
    
    
    <category term="jetbrains" scheme="https://www.khalidlife.com/tags/jetbrains/"/>
    
    <category term="idea" scheme="https://www.khalidlife.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Centos8安装与配置</title>
    <link href="https://www.khalidlife.com/posts/zyqwzs.html"/>
    <id>https://www.khalidlife.com/posts/zyqwzs.html</id>
    <published>2021-01-31T05:49:00.000Z</published>
    <updated>2022-11-29T07:05:56.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><h2 id="1-1、安装-net-tools"><a href="#1-1、安装-net-tools" class="headerlink" title="1.1、安装 net-tools"></a>1.1、安装 net-tools</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y net-tools</span><br></pre></td></tr></table></figure><h2 id="1-2、安装-wget"><a href="#1-2、安装-wget" class="headerlink" title="1.2、安装 wget"></a>1.2、安装 wget</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure><h2 id="1-3、安装-vim"><a href="#1-3、安装-vim" class="headerlink" title="1.3、安装 vim"></a>1.3、安装 vim</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y vim</span><br></pre></td></tr></table></figure><h2 id="1-4、安装-yum-阿里源"><a href="#1-4、安装-yum-阿里源" class="headerlink" title="1.4、安装 yum 阿里源"></a>1.4、安装 yum 阿里源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入yum源文件夹</span></span><br><span class="line">cd /etc/yum.repos.d</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">1、修改文件，注释mirrorlist与baseurl，并设置以下内容。（<span class="comment">#不要复制）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">baseurl=https://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/AppStream/<span class="variable">$basearch</span>/os/</span></span><br><span class="line">vim CentOS-Linux-AppStream.repo</span><br><span class="line"><span class="meta">#</span><span class="bash">2、修改文件，注释mirrorlist与baseurl，并设置以下内容。（<span class="comment">#不要复制）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">baseurl=https://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/BaseOS/<span class="variable">$basearch</span>/os/</span></span><br><span class="line">vim CentOS-Linux-BaseOS.repo</span><br><span class="line"><span class="meta">#</span><span class="bash">3、修改文件，注释mirrorlist与baseurl，并设置以下内容。（<span class="comment">#不要复制）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">baseurl=https://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/os/</span></span><br><span class="line">vim CentOS-Linux-Extras.repo</span><br><span class="line"></span><br><span class="line">dnf -y install epel-release</span><br><span class="line">dnf clean all</span><br><span class="line">dnf makecache</span><br><span class="line">dnf repolist</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-5、安装-git"><a href="#1-5、安装-git" class="headerlink" title="1.5、安装 git"></a>1.5、安装 git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf intsall -y git</span><br></pre></td></tr></table></figure><h1 id="安装宝塔面板（可选）"><a href="#安装宝塔面板（可选）" class="headerlink" title="安装宝塔面板（可选）"></a>安装宝塔面板（可选）</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSO http://download.bt.cn/install/install_panel.sh &amp;&amp; bash install_panel.sh</span><br></pre></td></tr></table></figure><h1 id="安装-docker-环境（可选）"><a href="#安装-docker-环境（可选）" class="headerlink" title="安装 docker 环境（可选）"></a>安装 docker 环境（可选）</h1><h2 id="3-1、安装-docker"><a href="#3-1、安装-docker" class="headerlink" title="3.1、安装 docker"></a>3.1、安装 docker</h2><p><a href="https://docs.docker.com/engine/install/centos/">docker 官方安装文档</a></p><h3 id="3-1-1、删除旧软件包"><a href="#3-1-1、删除旧软件包" class="headerlink" title="3.1.1、删除旧软件包"></a>3.1.1、删除旧软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h3 id="3-1-2、设置-repository"><a href="#3-1-2、设置-repository" class="headerlink" title="3.1.2、设置 repository"></a>3.1.2、设置 repository</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="3-1-3-安装-docker-容器"><a href="#3-1-3-安装-docker-容器" class="headerlink" title="3.1.3 安装 docker 容器"></a>3.1.3 安装 docker 容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="3-1-4、启动-docker-并加入开机自启"><a href="#3-1-4、启动-docker-并加入开机自启" class="headerlink" title="3.1.4、启动 docker 并加入开机自启"></a>3.1.4、启动 docker 并加入开机自启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">加入开机自启</span></span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="3-1-5、设置国内源"><a href="#3-1-5、设置国内源" class="headerlink" title="3.1.5、设置国内源"></a>3.1.5、设置国内源</h3><h4 id="3-1-5-1、创建文件夹"><a href="#3-1-5-1、创建文件夹" class="headerlink" title="3.1.5.1、创建文件夹"></a>3.1.5.1、创建文件夹</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br></pre></td></tr></table></figure><h4 id="3-1-5-2、设置-daemon-json"><a href="#3-1-5-2、设置-daemon-json" class="headerlink" title="3.1.5.2、设置 daemon.json"></a>3.1.5.2、设置 daemon.json</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://ft4regk8.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;http://harbor.khalidlife.com:10102&quot;,&quot;10.10.7.161:10102&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="3-1-5-3、重载-systemctl"><a href="#3-1-5-3、重载-systemctl" class="headerlink" title="3.1.5.3、重载 systemctl"></a>3.1.5.3、重载 systemctl</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="3-1-5-4、重启-docker"><a href="#3-1-5-4、重启-docker" class="headerlink" title="3.1.5.4、重启 docker"></a>3.1.5.4、重启 docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="3-1-6、打开-docker-远程连接"><a href="#3-1-6、打开-docker-远程连接" class="headerlink" title="3.1.6、打开 docker 远程连接"></a>3.1.6、打开 docker 远程连接</h3><h4 id="3-1-6-1、打开文件"><a href="#3-1-6-1、打开文件" class="headerlink" title="3.1.6.1、打开文件"></a>3.1.6.1、打开文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><h4 id="3-1-6-2、添加参数"><a href="#3-1-6-2、添加参数" class="headerlink" title="3.1.6.2、添加参数"></a>3.1.6.2、添加参数</h4><p>在/usr/lib/systemd/system/docker.service，配置远程访问。<br>主要是在[Service]这个部分，加上下面两个参数<code>-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span><br></pre></td></tr></table></figure><h4 id="3-1-6-3、查看状态"><a href="#3-1-6-3、查看状态" class="headerlink" title="3.1.6.3、查看状态"></a>3.1.6.3、查看状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:2375/version</span><br></pre></td></tr></table></figure><h2 id="3-2、安装-docker-compose"><a href="#3-2、安装-docker-compose" class="headerlink" title="3.2、安装 docker-compose"></a>3.2、安装 docker-compose</h2><p><a href="https://docs.docker.com/compose/install/">docker-compose 官方安装文档</a></p><h3 id="3-2-1、下载-docker-compose"><a href="#3-2-1、下载-docker-compose" class="headerlink" title="3.2.1、下载 docker-compose"></a>3.2.1、下载 docker-compose</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.28.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="3-2-2、设置执行权限"><a href="#3-2-2、设置执行权限" class="headerlink" title="3.2.2、设置执行权限"></a>3.2.2、设置执行权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="3-2-3、设置软连接"><a href="#3-2-3、设置软连接" class="headerlink" title="3.2.3、设置软连接"></a>3.2.3、设置软连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="3-2-4、测试"><a href="#3-2-4、测试" class="headerlink" title="3.2.4、测试"></a>3.2.4、测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h2 id="安装-harbor-环境（可选）"><a href="#安装-harbor-环境（可选）" class="headerlink" title="安装 harbor 环境（可选）"></a>安装 harbor 环境（可选）</h2><h3 id="4-1、安装-harbor"><a href="#4-1、安装-harbor" class="headerlink" title="4.1、安装 harbor"></a>4.1、安装 harbor</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入下载目录</span></span><br><span class="line">cd /opt/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载离线安装包</span></span><br><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.1.3/harbor-offline-installer-v2.1.3.tgz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压安装包</span></span><br><span class="line">tar xvf harbor-offline-installer-v2.1.3.tgz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入Harbor目录</span></span><br><span class="line">cd harbor</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2、配置-harbor"><a href="#4-2、配置-harbor" class="headerlink" title="4.2、配置 harbor"></a>4.2、配置 harbor</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim harbor.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置如下</span></span><br><span class="line">hostname: harbor.phpdev.com</span><br><span class="line">port: 9010</span><br><span class="line"><span class="meta">#</span><span class="bash">harbor_admin_password: phpdev-pass</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The location to store harbor<span class="string">&#x27;s data</span></span></span><br><span class="line">data_volume: /usr/src/harbor/data</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> The directory to store store log</span></span></span><br><span class="line">location: /var/log/harbor</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Centos8安装与配置</summary>
    
    
    
    <category term="教程" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    <category term="Centos" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/Linux/Centos/"/>
    
    
    <category term="Centos8" scheme="https://www.khalidlife.com/tags/Centos8/"/>
    
  </entry>
  
  <entry>
    <title>acme证书自动申请</title>
    <link href="https://www.khalidlife.com/posts/xz9gbc.html"/>
    <id>https://www.khalidlife.com/posts/xz9gbc.html</id>
    <published>2021-01-25T04:43:50.000Z</published>
    <updated>2022-11-29T07:05:56.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-部署-khalidlife-com-命令"><a href="#01-部署-khalidlife-com-命令" class="headerlink" title="01 部署 khalidlife.com 命令"></a>01 部署 khalidlife.com 命令</h1><h2 id="1-1-生成证书"><a href="#1-1-生成证书" class="headerlink" title="1.1 生成证书"></a>1.1 生成证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue --dns dns_dp --ecc -k secp384r1 -d khalidlife.com -d *.khalidlife.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2-安装证书"><a href="#1-2-安装证书" class="headerlink" title="1.2 安装证书"></a>1.2 安装证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --installcert --ecc -k secp384r1 -d khalidlife.com -d *.khalidlife.com \</span><br><span class="line">--key-file /www/server/panel/vhost/ssl/khalidlife.com/privkey.pem \</span><br><span class="line">--fullchain-file /www/server/panel/vhost/ssl/khalidlife.com/fullchain.pem \</span><br><span class="line">--reloadcmd &quot;cp /www/server/panel/vhost/ssl/khalidlife.com/privkey.pem /www/server/panel/vhost/cert/khalidlife.com/privkey.pem&amp;&amp;cp /www/server/panel/vhost/ssl/khalidlife.com/fullchain.pem /www/server/panel/vhost/cert/khalidlife.com/fullchain.pem&amp;&amp;service nginx restart&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者<br>直接查看<br>Your cert key is in</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /opt/sh/syno-acme/acme.sh/khalidlife.com_ecc/khalidlife.com.key</span><br></pre></td></tr></table></figure><p>Your cert is in:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat  /opt/sh/syno-acme/acme.sh/khalidlife.com_ecc/khalidlife.com.cer</span><br></pre></td></tr></table></figure><h2 id="1-3-添加-json-文件"><a href="#1-3-添加-json-文件" class="headerlink" title="1.3 添加 json 文件"></a>1.3 添加 json 文件</h2><p>在<code>/www/server/panel/vhost/ssl/khalidlife.com/</code>文件夹下添加 info.json</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;issuer&quot;: &quot;Let&#x27;s Encrypt&quot;, &quot;notAfter&quot;: &quot;2666-08-17&quot;, &quot;notBefore&quot;: &quot;1926-08-17&quot;, &quot;dns&quot;: [&quot;*.khalidlife.com&quot;, &quot;khalidlife.com&quot;], &quot;subject&quot;: &quot;khalidlife.com&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="02-部署-nps-khalidlife-com-命令"><a href="#02-部署-nps-khalidlife-com-命令" class="headerlink" title="02 部署 nps.khalidlife.com 命令"></a>02 部署 nps.khalidlife.com 命令</h1><h2 id="1-1-生成证书-1"><a href="#1-1-生成证书-1" class="headerlink" title="1.1 生成证书"></a>1.1 生成证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue --dns dns_dp --ecc -k secp384r1 -d nps.khalidlife.com -d *.nps.khalidlife.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2-安装证书-1"><a href="#1-2-安装证书-1" class="headerlink" title="1.2 安装证书"></a>1.2 安装证书</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --installcert --ecc -k secp384r1 -d nps.khalidlife.com -d *.nps.khalidlife.com \</span><br><span class="line">--key-file /www/server/panel/vhost/ssl/nps.khalidlife.com/privkey.pem \</span><br><span class="line">--fullchain-file /www/server/panel/vhost/ssl/nps.khalidlife.com/fullchain.pem \</span><br><span class="line">--reloadcmd &quot;cp /www/server/panel/vhost/ssl/nps.khalidlife.com/privkey.pem /www/server/panel/vhost/cert/nps.khalidlife.com/privkey.pem&amp;&amp;cp /www/server/panel/vhost/ssl/nps.khalidlife.com/fullchain.pem /www/server/panel/vhost/cert/nps.khalidlife.com/fullchain.pem&amp;&amp;service nginx restart&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者<br>直接查看<br>Your cert key is in</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /opt/sh/syno-acme/acme.sh/nps.khalidlife.com_ecc/nps.khalidlife.com.key</span><br></pre></td></tr></table></figure><p>Your cert is in:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat  /opt/sh/syno-acme/acme.sh/nps.khalidlife.com_ecc/nps.khalidlife.com.cer</span><br></pre></td></tr></table></figure><h2 id="1-3-添加-json-文件-1"><a href="#1-3-添加-json-文件-1" class="headerlink" title="1.3 添加 json 文件"></a>1.3 添加 json 文件</h2><p>在<code>/www/server/panel/vhost/ssl/nps.khalidlife.com/</code>文件夹下添加 info.json</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;issuer&quot;: &quot;Let&#x27;s Encrypt&quot;, &quot;notAfter&quot;: &quot;2666-08-17&quot;, &quot;notBefore&quot;: &quot;1926-08-17&quot;, &quot;dns&quot;: [&quot;*.nps.khalidlife.com&quot;, &quot;nps.khalidlife.com&quot;], &quot;subject&quot;: &quot;nps.khalidlife.com&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">acme证书自动申请</summary>
    
    
    
    <category term="工具" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="证书" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/%E8%AF%81%E4%B9%A6/"/>
    
    <category term="acme" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/%E8%AF%81%E4%B9%A6/acme/"/>
    
    
    <category term="acme" scheme="https://www.khalidlife.com/tags/acme/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装与配置</title>
    <link href="https://www.khalidlife.com/posts/cm4b1x.html"/>
    <id>https://www.khalidlife.com/posts/cm4b1x.html</id>
    <published>2020-04-20T05:08:00.000Z</published>
    <updated>2022-11-29T07:05:56.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><h2 id="1-1、安装-net-tools"><a href="#1-1、安装-net-tools" class="headerlink" title="1.1、安装 net-tools"></a>1.1、安装 net-tools</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y net-tools</span><br></pre></td></tr></table></figure><h2 id="1-2、安装-wget"><a href="#1-2、安装-wget" class="headerlink" title="1.2、安装 wget"></a>1.2、安装 wget</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure><h2 id="1-3、安装-vim"><a href="#1-3、安装-vim" class="headerlink" title="1.3、安装 vim"></a>1.3、安装 vim</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y vim</span><br></pre></td></tr></table></figure><h2 id="1-4、安装-yum-阿里源"><a href="#1-4、安装-yum-阿里源" class="headerlink" title="1.4、安装 yum 阿里源"></a>1.4、安装 yum 阿里源</h2><ol><li>备份原始文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br></pre></td></tr></table></figure><ol start="2"><li>下载 CentOS 7 的 repo 文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>备注：其余系统下载地址如下所示</p><ul><li>centos6</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure><ul><li>centos8</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure><ol start="3"><li>非阿里云 ECS 用户会出现 Couldn’t resolve host ‘mirrors.cloud.aliyuncs.com’ 信息，不影响使用。用户也可自行修改相关配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; -e &#x27;/mirrors.aliyuncs.com/d&#x27; /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure><ol start="4"><li>清除缓存</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure><ol start="5"><li>生成缓存</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h2 id="1-5、生成-SSH-key"><a href="#1-5、生成-SSH-key" class="headerlink" title="1.5、生成 SSH key"></a>1.5、生成 SSH key</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@qq.com&quot;</span><br></pre></td></tr></table></figure><h2 id="1-6、安装-zerotier-选装"><a href="#1-6、安装-zerotier-选装" class="headerlink" title="1.6、安装 zerotier(选装)"></a>1.6、安装 zerotier(选装)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载脚本并安装</span></span><br><span class="line">curl -s https://install.zerotier.com | sudo bash</span><br></pre></td></tr></table></figure><h2 id="1-7、安装-v2ray-选装"><a href="#1-7、安装-v2ray-选装" class="headerlink" title="1.7、安装 v2ray(选装)"></a>1.7、安装 v2ray(选装)</h2><p><a href="https://www.noobyy.com/31.html">参考网址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、下载脚本并安装</span></span><br><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、输入 “1” 进行安装</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、选择传输协议：TCP</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、设置端口号</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、广告拦截：选N</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6、开启SS：选N</span></span><br></pre></td></tr></table></figure><h1 id="安装宝塔面包（选装）"><a href="#安装宝塔面包（选装）" class="headerlink" title="安装宝塔面包（选装）"></a>安装宝塔面包（选装）</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><h1 id="安装-docker-环境（可选）"><a href="#安装-docker-环境（可选）" class="headerlink" title="安装 docker 环境（可选）"></a>安装 docker 环境（可选）</h1><blockquote><p>PS：一定要 yum update -y 一下，否则可能会出现宿主机访问不到容器的问题</p></blockquote><h2 id="3-1、安装-docker"><a href="#3-1、安装-docker" class="headerlink" title="3.1、安装 docker"></a>3.1、安装 docker</h2><p><a href="https://docs.docker.com/engine/install/centos/">docker 官方安装文档</a></p><h3 id="3-1-1、删除旧软件包"><a href="#3-1-1、删除旧软件包" class="headerlink" title="3.1.1、删除旧软件包"></a>3.1.1、删除旧软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h3 id="3-1-2、设置-repository"><a href="#3-1-2、设置-repository" class="headerlink" title="3.1.2、设置 repository"></a>3.1.2、设置 repository</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="3-1-3-安装-docker-容器"><a href="#3-1-3-安装-docker-容器" class="headerlink" title="3.1.3 安装 docker 容器"></a>3.1.3 安装 docker 容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="3-1-4、启动-docker-并加入开机自启"><a href="#3-1-4、启动-docker-并加入开机自启" class="headerlink" title="3.1.4、启动 docker 并加入开机自启"></a>3.1.4、启动 docker 并加入开机自启</h3><ol><li>启动 docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><ol start="2"><li>加入开机自启</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="3-1-5、设置国内源"><a href="#3-1-5、设置国内源" class="headerlink" title="3.1.5、设置国内源"></a>3.1.5、设置国内源</h3><h4 id="3-1-5-1、创建文件夹"><a href="#3-1-5-1、创建文件夹" class="headerlink" title="3.1.5.1、创建文件夹"></a>3.1.5.1、创建文件夹</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br></pre></td></tr></table></figure><h4 id="3-1-5-2、设置-daemon-json"><a href="#3-1-5-2、设置-daemon-json" class="headerlink" title="3.1.5.2、设置 daemon.json"></a>3.1.5.2、设置 daemon.json</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://ft4regk8.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;http://harbor.khalidlife.com:10102&quot;,&quot;10.10.7.161:10102&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>常规设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://ft4regk8.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="3-1-5-3、重载-systemctl"><a href="#3-1-5-3、重载-systemctl" class="headerlink" title="3.1.5.3、重载 systemctl"></a>3.1.5.3、重载 systemctl</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="3-1-5-4、重启-docker"><a href="#3-1-5-4、重启-docker" class="headerlink" title="3.1.5.4、重启 docker"></a>3.1.5.4、重启 docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="3-1-6、打开-docker-远程连接"><a href="#3-1-6、打开-docker-远程连接" class="headerlink" title="3.1.6、打开 docker 远程连接"></a>3.1.6、打开 docker 远程连接</h3><h4 id="3-1-6-1、打开文件"><a href="#3-1-6-1、打开文件" class="headerlink" title="3.1.6.1、打开文件"></a>3.1.6.1、打开文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><h4 id="3-1-6-2、添加参数"><a href="#3-1-6-2、添加参数" class="headerlink" title="3.1.6.2、添加参数"></a>3.1.6.2、添加参数</h4><p>在/usr/lib/systemd/system/docker.service，配置远程访问。<br>主要是在[Service]这个部分，加上下面两个参数<code>-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span><br></pre></td></tr></table></figure><h4 id="3-1-6-3、重载-systemctl"><a href="#3-1-6-3、重载-systemctl" class="headerlink" title="3.1.6.3、重载 systemctl"></a>3.1.6.3、重载 systemctl</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="3-1-6-4、重启-docker"><a href="#3-1-6-4、重启-docker" class="headerlink" title="3.1.6.4、重启 docker"></a>3.1.6.4、重启 docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="3-1-6-5、查看状态"><a href="#3-1-6-5、查看状态" class="headerlink" title="3.1.6.5、查看状态"></a>3.1.6.5、查看状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:2375/version</span><br></pre></td></tr></table></figure><h2 id="3-2、安装-docker-compose"><a href="#3-2、安装-docker-compose" class="headerlink" title="3.2、安装 docker-compose"></a>3.2、安装 docker-compose</h2><p><a href="https://docs.docker.com/compose/install/">docker-compose 官方安装文档</a></p><h3 id="3-2-1、下载-docker-compose"><a href="#3-2-1、下载-docker-compose" class="headerlink" title="3.2.1、下载 docker-compose"></a>3.2.1、下载 docker-compose</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="3-2-2、设置执行权限"><a href="#3-2-2、设置执行权限" class="headerlink" title="3.2.2、设置执行权限"></a>3.2.2、设置执行权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="3-2-3、设置软连接"><a href="#3-2-3、设置软连接" class="headerlink" title="3.2.3、设置软连接"></a>3.2.3、设置软连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="3-2-4、测试"><a href="#3-2-4、测试" class="headerlink" title="3.2.4、测试"></a>3.2.4、测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h1 id="安装-python-环境（Anaconda）"><a href="#安装-python-环境（Anaconda）" class="headerlink" title="安装 python 环境（Anaconda）"></a>安装 python 环境（Anaconda）</h1><h2 id="4-1、Anaconda-下载"><a href="#4-1、Anaconda-下载" class="headerlink" title="4.1、Anaconda 下载"></a>4.1、Anaconda 下载</h2><p>进入 anaconda 官方网站下载个人免费版本，点击 download，选择 Linux 平台的安装包<br>官网链接：<a href="https://www.anaconda.com/products/distribution#Downloads">Anaconda 官网下载</a><br>内网链接：</p><ul><li><a href="https://zdir.khalidlife.cn/soft/%E7%8E%AF%E5%A2%83/python%E7%8E%AF%E5%A2%83/Anaconda/Anaconda3-2022.10-Linux-x86_64.sh">linux 链接</a></li><li><a href="https://zdir.khalidlife.cn/soft/%E7%8E%AF%E5%A2%83/python%E7%8E%AF%E5%A2%83/Anaconda/Anaconda3-2022.10-Windows-x86_64.exe">Windows 链接</a></li><li><a href="https://zdir.khalidlife.cn/soft/%E7%8E%AF%E5%A2%83/python%E7%8E%AF%E5%A2%83/Anaconda/Anaconda3-2022.10-MacOSX-x86_64.pkg">Mac 链接</a></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1082206/1669699313972-93024fac-d402-4714-9809-5c858fe3f4d8.png#averageHue=%23dfeff8&clientId=u40075d8e-e294-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=590&id=ue1ebcefc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=590&originWidth=1241&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=112671&status=done&style=none&taskId=u475215f4-5e0a-44a0-882f-30489a9eeda&title=&width=1241" alt="image.png"></p><h2 id="4-2、Anaconda-安装"><a href="#4-2、Anaconda-安装" class="headerlink" title="4.2、Anaconda 安装"></a>4.2、Anaconda 安装</h2><h3 id="4-2-1、执行如下指令，安装-anaconda"><a href="#4-2-1、执行如下指令，安装-anaconda" class="headerlink" title="4.2.1、执行如下指令，安装 anaconda"></a>4.2.1、执行如下指令，安装 anaconda</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入当保存文件的目录，执行此指令， 后期由于版本更新，可能会与此文件命名有所不同</span></span><br><span class="line">bash Anaconda3-2020.11-Linux-x86_64.sh -p /opt/anaconda3</span><br></pre></td></tr></table></figure><h3 id="4-2-2、按照安装提示，键入回车"><a href="#4-2-2、按照安装提示，键入回车" class="headerlink" title="4.2.2、按照安装提示，键入回车"></a>4.2.2、按照安装提示，键入回车</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please, press ENTER  to <span class="built_in">continue</span></span><br><span class="line">&gt;&gt;&gt; ENTER</span><br></pre></td></tr></table></figure><h3 id="4-2-3、安装此版本时，会强制用户看完整个协议，直接一路回车就行，直到看到确认信息"><a href="#4-2-3、安装此版本时，会强制用户看完整个协议，直接一路回车就行，直到看到确认信息" class="headerlink" title="4.2.3、安装此版本时，会强制用户看完整个协议，直接一路回车就行，直到看到确认信息"></a>4.2.3、安装此版本时，会强制用户看完整个协议，直接一路回车就行，直到看到确认信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入yes，表示同意安装协议</span></span><br><span class="line">Do you accept the license terms? [yes|no][no]</span><br><span class="line">&gt;&gt;&gt; yes</span><br></pre></td></tr></table></figure><h3 id="4-2-4、确认安装路径-可修改，也可以使用自定义"><a href="#4-2-4、确认安装路径-可修改，也可以使用自定义" class="headerlink" title="4.2.4、确认安装路径(可修改，也可以使用自定义)"></a>4.2.4、确认安装路径(可修改，也可以使用自定义)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用默认路径，直接键入回车，使用自定义路径，直接输入安装路径</span></span><br><span class="line"><span class="comment"># 此处使用 /opt/anaconda3作为安装路径</span></span><br><span class="line">Anaconda3 will now be installed into this location:</span><br><span class="line">/root/anaconda3</span><br><span class="line">- Press ENTER to confirm the location</span><br><span class="line">- Press CTRL-C to abort the installation</span><br><span class="line">- Or specify a different location below</span><br><span class="line"></span><br><span class="line">[/root/anaconda3] &gt;&gt;&gt; /opt/anaconda3</span><br></pre></td></tr></table></figure><blockquote><p>注：安装位置可以在执行安装脚本的时候直接指定，可以这样修改执行内容：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash Anaconda3-2020.11-Linux-x86_64.sh -p /opt/anaconda3</span><br></pre></td></tr></table></figure><p>这样可跳过软件安装路径确认阶段，直接安装到指定目录下。</p><h3 id="4-2-5、环境变量初始化"><a href="#4-2-5、环境变量初始化" class="headerlink" title="4.2.5、环境变量初始化"></a>4.2.5、环境变量初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此处询问是否初始化conda的环境，直接输入yes</span></span><br><span class="line"></span><br><span class="line">Do you wish the installer to initialize Anaconda3</span><br><span class="line">by running conda init?</span><br><span class="line"></span><br><span class="line">[yes|no][no] &gt;&gt;&gt; yes</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1082206/1669705127451-5bff8f42-d39f-45f1-9bb3-057d4764c5eb.png#averageHue=%23fcf5e2&clientId=u86a38443-f9cd-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=574&id=uc007b1fd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=574&originWidth=2020&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=95251&status=done&style=none&taskId=u1ed3c9b0-bd22-4085-9d0b-d3171f1ecc0&title=&width=2020" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/1082206/1669705157640-f6fe1eb5-6b97-4c5f-a39f-8977642d46e1.png#averageHue=%23fbf4e1&clientId=u86a38443-f9cd-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=826&id=ueac67639&margin=%5Bobject%20Object%5D&name=image.png&originHeight=826&originWidth=1678&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=214212&status=done&style=none&taskId=ua8202d95-9ff5-4332-b9a7-a035dc60b27&title=&width=1678" alt="image.png"></p><h3 id="4-2-6、初始化时，anaconda-将配置写入了-bashrc-文件，直接执行"><a href="#4-2-6、初始化时，anaconda-将配置写入了-bashrc-文件，直接执行" class="headerlink" title="4.2.6、初始化时，anaconda 将配置写入了~/.bashrc 文件，直接执行"></a>4.2.6、初始化时，anaconda 将配置写入了~/.bashrc 文件，直接执行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>后即可正常使用了。</p><h3 id="4-2-7、配置多用户使用"><a href="#4-2-7、配置多用户使用" class="headerlink" title="4.2.7、配置多用户使用"></a>4.2.7、配置多用户使用</h3><p>将 anaconda 初始化时，写入到 ~/.bashrc 文件中的内容复制到 /etc/bashrc 文件中，内容如下(此处仅为示例，请复制本机对应文件中的相应内容)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span></span><br><span class="line"><span class="comment"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span></span><br><span class="line">__conda_setup=<span class="string">&quot;<span class="subst">$(&#x27;/opt/anaconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">&quot;<span class="variable">$__conda_setup</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/opt/anaconda3/etc/profile.d/conda.sh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        . <span class="string">&quot;/opt/anaconda3/etc/profile.d/conda.sh&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">export</span> PATH=<span class="string">&quot;/opt/anaconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> __conda_setup</span><br><span class="line"><span class="comment"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1082206/1669705221976-61f456e0-e3de-48f2-b670-897d3f485199.png#averageHue=%23fcf5e2&clientId=u86a38443-f9cd-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=448&id=u5c5bb23e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=448&originWidth=1410&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=82882&status=done&style=none&taskId=u3110dc10-d5bc-4fed-a6c1-b833d76aed1&title=&width=1410" alt="image.png"><br>再执行 source /etc/bashrc 指令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure><h2 id="4-3、配置镜像源"><a href="#4-3、配置镜像源" class="headerlink" title="4.3、配置镜像源"></a>4.3、配置镜像源</h2><p>conda 配置镜像源：</p><p>使用 conda 进行安装时，访问的是国外的网络，所以下载和安装包时会特别慢。我们需要更换到国内镜像源地址，这里我更换到国内的清华大学地址。（永久添加镜像）</p><p>Windows 和 Linux 对于 conda 修改镜像源的方法一样</p><h3 id="4-3-1、查看-anaconda-中已经存在的镜像源"><a href="#4-3-1、查看-anaconda-中已经存在的镜像源" class="headerlink" title="4.3.1、查看 anaconda 中已经存在的镜像源"></a>4.3.1、查看 anaconda 中已经存在的镜像源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --show channels</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1082206/1669705311301-ccbced41-6c34-4752-9a03-e34e613383b6.png#averageHue=%23fcf5e2&clientId=u86a38443-f9cd-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=122&id=ue0ab45f3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=122&originWidth=1010&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=26651&status=done&style=none&taskId=u2b133fc4-8c74-4eef-a5db-e7fcd518fe6&title=&width=1010" alt="image.png"></p><h3 id="4-3-2、添加镜像源-永久添加"><a href="#4-3-2、添加镜像源-永久添加" class="headerlink" title="4.3.2、添加镜像源(永久添加)"></a>4.3.2、添加镜像源(永久添加)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1082206/1669705357179-8a06079c-02e4-44b0-9266-be313aedaca1.png#averageHue=%23fcf5e2&clientId=u86a38443-f9cd-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=206&id=u51e0fb96&margin=%5Bobject%20Object%5D&name=image.png&originHeight=206&originWidth=1748&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=62682&status=done&style=none&taskId=u2beacbbd-c819-417e-b3ef-defc7f82a76&title=&width=1748" alt="image.png"></p><h3 id="4-3-3、设置搜索时显示通道地址"><a href="#4-3-3、设置搜索时显示通道地址" class="headerlink" title="4.3.3、设置搜索时显示通道地址"></a>4.3.3、设置搜索时显示通道地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1082206/1669705406797-67831faa-3f39-4562-aba4-91760215f67f.png#averageHue=%23fcf5e2&clientId=u86a38443-f9cd-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=152&id=ud93a575d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=152&originWidth=1262&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=36509&status=done&style=none&taskId=u8419c527-37e7-44e7-8bd7-cbbfc2710bf&title=&width=1262" alt="image.png"></p><h3 id="4-3-4、若不想按照上述步骤添加镜像，可使用以下命令直接指定安装时使用的镜像地址-以-opencv-为例-："><a href="#4-3-4、若不想按照上述步骤添加镜像，可使用以下命令直接指定安装时使用的镜像地址-以-opencv-为例-：" class="headerlink" title="4.3.4、若不想按照上述步骤添加镜像，可使用以下命令直接指定安装时使用的镜像地址(以 opencv 为例)："></a>4.3.4、若不想按照上述步骤添加镜像，可使用以下命令直接指定安装时使用的镜像地址(以 opencv 为例)：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install opencv -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br></pre></td></tr></table></figure><h3 id="4-3-5、添加完后查看"><a href="#4-3-5、添加完后查看" class="headerlink" title="4.3.5、添加完后查看"></a>4.3.5、添加完后查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --show channels</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1082206/1669705463652-05c0780a-e3f8-4517-9e4c-a788af7032b5.png#averageHue=%23fcf5e2&clientId=u86a38443-f9cd-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=258&id=u423084c9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=258&originWidth=1068&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=56182&status=done&style=none&taskId=u7c67e799-49b5-402a-a0dc-409384b7e31&title=&width=1068" alt="image.png"></p><h3 id="4-3-6、pip-使用国内镜像源"><a href="#4-3-6、pip-使用国内镜像源" class="headerlink" title="4.3.6、pip 使用国内镜像源"></a>4.3.6、pip 使用国内镜像源</h3><p>一般在使用 conda install 安装时会出现包无法找到或者安装失败的情况，此时可以使用 pip install 来尝试安装(以 opencv 为例)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv</span><br></pre></td></tr></table></figure><p>若安装速度过慢可单独指定安装镜像加快安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><p>此处列举国内常用 pip 安装镜像：</p><ul><li>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></li><li>阿里云：<a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></li><li>中国科技大学: <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>华中理工大学：<a href="https://pypi.hustunique.com/">https://pypi.hustunique.com/</a></li><li>山东理工大学：<a href="https://pypi.sdutlinux.org/">https://pypi.sdutlinux.org/</a></li><li>豆瓣：<a href="https://pypi.douban.com/simple/">https://pypi.douban.com/simple/</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/Paddle/</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure><h2 id="3-3、root-用户安装的-anaconda-如何给普通用户使用"><a href="#3-3、root-用户安装的-anaconda-如何给普通用户使用" class="headerlink" title="3.3、root 用户安装的 anaconda 如何给普通用户使用"></a>3.3、root 用户安装的 anaconda 如何给普通用户使用</h2><p>服务器里安装了 anaconda，结果发现只有 root 用户才能使用，其他的用户都无法使用 conda 命令！</p><p>【解决方案】</p><p>首先，root 用户安装 anaconda 的时候，需要安装在普通用户可以访问的目录下，比如/usr/local、/opt、/home 之类的</p><p>其次，普通用户登陆后，需要执行以下 conda init 使 conda 的路径等系统环境变量信息写入当前用户的 bashrc 下</p><p>例：</p><p>anaconda 装在了 (需要查看 anaconda3 安装路径)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/anaconda3</span><br></pre></td></tr></table></figure><p>普通用户 需要执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/anaconda3/bin/conda init bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1082206/1669700755983-039798e7-b1d4-46ff-a7a2-a97c3febe29f.png#averageHue=%2306303c&clientId=u89f0809f-3c5f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=191&id=uec64f64d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=381&originWidth=874&originalType=binary%E2%88%B6=1&rotation=0&showTitle=false&size=78741&status=done&style=none&taskId=uedfe5c4a-bf2c-4085-9f6f-b4c4f302eab&title=&width=437" alt="image.png"><br>你需要根据自己的实际情况修改 bin 之前的目录<br>普通用户再执行启用配置命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>然后重新连接 SSH （推荐）</p><p>或者</p><p>即使你没有重新连接 ssh 也可以通过（没试过）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> activate base</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate base</span><br></pre></td></tr></table></figure><p>能正常使用 conda 后，你就可以创建你自己的环境了，例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n xxx python=3.7</span><br></pre></td></tr></table></figure><p>环境会装在 home 中你的用户文件夹下，可以通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><p>查看对应的地址</p><p>以上操作的问题是，那个用户需要使用 conda，就需要按以上步骤执行一遍，并没有设置成所有用户都可以调用的方式；</p>]]></content>
    
    
    <summary type="html">Centos7安装与配置</summary>
    
    
    
    <category term="教程" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    <category term="Centos" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/Linux/Centos/"/>
    
    
    <category term="Centos7" scheme="https://www.khalidlife.com/tags/Centos7/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList</title>
    <link href="https://www.khalidlife.com/posts/vq97c0.html"/>
    <id>https://www.khalidlife.com/posts/vq97c0.html</id>
    <published>2020-04-09T17:03:50.000Z</published>
    <updated>2022-11-29T07:05:56.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList-简介"><a href="#ArrayList-简介" class="headerlink" title="ArrayList 简介"></a>ArrayList 简介</h2><p>ArrayList 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用<code>ensureCapacity</code>操作来增加 ArrayList 实例的容量。这可以减少递增式再分配的数量。<br>它继承于 <strong>AbstractList</strong>，实现了 <strong>List</strong>, <strong>RandomAccess</strong>, <strong>Cloneable</strong>, <strong>java.io.Serializable</strong> 这些接口。<br>在我们学数据结构的时候就知道了线性表的顺序存储，插入删除元素的时间复杂度为<strong>O（n）</strong>,求表长以及增加元素，取第 i 元素的时间复杂度为<strong>O（1）</strong><br>ArrayList 继承了 AbstractList，实现了 List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。<br>ArrayList 实现了<strong>RandomAccess 接口</strong>， RandomAccess 是一个标志接口，表明实现这个这个接口的 List 集合是支持<strong>快速随机访问</strong>的。在 ArrayList 中，我们即可以通过元素的序号快速获取元素对象，这就是快速随机访问。<br>ArrayList 实现了<strong>Cloneable 接口</strong>，即覆盖了函数 clone()，<strong>能被克隆</strong>。<br>　　 ArrayList 实现<strong>java.io.Serializable 接口</strong>，这意味着 ArrayList<strong>支持序列化</strong>，<strong>能通过序列化去传输</strong>。<br>　　和 Vector 不同，<strong>ArrayList 中的操作不是线程安全的</strong>！所以，建议在单线程中才使用 ArrayList，而在多线程中可以选择 Vector 或者 CopyOnWriteArrayList。</p><h2 id="ArrayList-源码分析"><a href="#ArrayList-源码分析" class="headerlink" title="ArrayList 源码分析"></a>ArrayList 源码分析</h2><h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.function.UnaryOperator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认初始容量大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空数组（用于空实例）。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//用于默认大小空实例的共享空数组实例。</span></span><br><span class="line">      <span class="comment">//我们把它从EMPTY_ELEMENTDATA数组中区分出来，以知道在添加第一个元素时容量需要增加多少。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存ArrayList数据的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ArrayList 所包含的元素个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带初始容量参数的构造函数。（用户自己指定容量）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//创建initialCapacity大小的数组</span></span><br><span class="line">            <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//创建空数组</span></span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *默认构造函数，DEFAULTCAPACITY_EMPTY_ELEMENTDATA 为0.初始化为10，也就是说初始其实是空数组 当添加第一个元素的时候数组容量才变成10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个包含指定集合的元素的列表，按照它们由集合的迭代器返回的顺序。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        <span class="comment">//如果指定集合元素个数不为0</span></span><br><span class="line">        <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// c.toArray 可能返回的不是Object类型的数组所以加上下面的语句用于判断，</span></span><br><span class="line">            <span class="comment">//这里用到了反射里面的getClass()方法</span></span><br><span class="line">            <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 用空数组代替</span></span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList-之经典-Demo"><a href="#ArrayList-之经典-Demo" class="headerlink" title="ArrayList 之经典 Demo"></a>ArrayList 之经典 Demo</h2>]]></content>
    
    
    <summary type="html">介绍ArrayList</summary>
    
    
    
    <category term="Java" scheme="https://www.khalidlife.com/categories/Java/"/>
    
    <category term="容器" scheme="https://www.khalidlife.com/categories/Java/%E5%AE%B9%E5%99%A8/"/>
    
    
    <category term="Java" scheme="https://www.khalidlife.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装docker与docker-compose</title>
    <link href="https://www.khalidlife.com/posts/mndre9.html"/>
    <id>https://www.khalidlife.com/posts/mndre9.html</id>
    <published>2020-03-10T04:43:50.000Z</published>
    <updated>2022-11-29T07:05:56.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li>docker 版本说明</li></ol><ul><li><p>企业版 Docker Enterprise Edition<br>此版本有高级收费功能</p></li><li><p>社区版 Docker Community Edition</p></li></ul><ol start="2"><li><p>下载 docker 进入官网，点击链接<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a>进行下载</p></li><li><p>注册 DaoCloud 账号，获取加速服务！</p></li></ol><p>不可否认，有时直接从 Docker 官方往本地 pull 镜像会十分缓慢。。。这时我们可以通过国内的 Docker 服务提供商免费获取加速 pull 镜像服务，阿里网易好像都有这种服务，我选择的是 DaoCloud。<a href="http://www.daocloud.io/">www.daocloud.io/</a><br>注册后登陆 DaoCloud，找到这个按钮：<br><img src="https://cdn.nlark.com/yuque/0/2020/webp/1082206/1595354166593-b57b7c1b-4c3d-4873-9339-ac51c5a0cb8d.webp#align=left&display=inline&height=866&margin=%5Bobject%20Object%5D&originHeight=866&originWidth=1280&size=0&status=done&style=none&width=1280"></p><ol start="4"><li>验证 docker 环境</li></ol><p>使用命令<code>docker -v</code><br>结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker version 18.03.1-ce, build 9ee9f40</span><br></pre></td></tr></table></figure><h1 id="安装-docker-compase"><a href="#安装-docker-compase" class="headerlink" title="安装 docker-compase"></a>安装 docker-compase</h1><p>请参考以下链接安装：<a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a><br>验证安装环境：<code>docker-compose -v</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version 1.21.1, build 5a3f1a3</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">linux下安装docker与docker-compose</summary>
    
    
    
    <category term="工具" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="docker" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/docker/"/>
    
    
    <category term="docker" scheme="https://www.khalidlife.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker初探</title>
    <link href="https://www.khalidlife.com/posts/yulz9f.html"/>
    <id>https://www.khalidlife.com/posts/yulz9f.html</id>
    <published>2020-03-10T04:43:50.000Z</published>
    <updated>2022-11-29T07:05:57.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-初识-Docker"><a href="#01-初识-Docker" class="headerlink" title="01 初识 Docker"></a>01 初识 Docker</h1><h2 id="1-1-What-is-Docker"><a href="#1-1-What-is-Docker" class="headerlink" title="1.1 What is Docker"></a>1.1 What is Docker</h2><h3 id="1-1-1-官网首页"><a href="#1-1-1-官网首页" class="headerlink" title="1.1.1 官网首页"></a>1.1.1 官网首页</h3><p><a href="https://www.docker.com/">https://www.docker.com/</a></p><blockquote><p>Debug your app, not your environment<br>Securely build, share and run any application, anywhere</p></blockquote><h3 id="1-1-2-Docs"><a href="#1-1-2-Docs" class="headerlink" title="1.1.2 Docs"></a>1.1.2 Docs</h3><p><a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></p><blockquote><p>Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers. The use of Linux containers to deploy applications is called containerization. Containers are not new, but their use for easily deploying applications is.</p></blockquote><p>Docker 是供开发人员和系统管理员使用容器构建，共享和运行应用程序的平台。 使用容器部署应用程序称为容器化。 容器不是新的，但用于轻松部署应用程序的容器却是新的。</p><h3 id="1-1-3-不理解，我太难了"><a href="#1-1-3-不理解，我太难了" class="headerlink" title="1.1.3 不理解，我太难了"></a>1.1.3 不理解，我太难了</h3><p>不妨从一个需求开始 ：开发好了一个项目 study，部署上线</p><ul><li>远古时代<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1584290840067-82793bb1-cb8d-4642-ad08-e9b37e98fd4f.png#align=left&display=inline&height=559&margin=%5Bobject%20Object%5D&originHeight=559&originWidth=621&size=0&status=done&style=none&width=621"><br><strong>问题：</strong> 成本高、部署慢、浪费资源、硬件限制、不利于迁移扩展</li><li>虚拟化时代<br>hypervisor：虚拟化技术<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1584290839523-7aab960d-3f5b-4547-b430-e5367c80db24.png#align=left&display=inline&height=775&margin=%5Bobject%20Object%5D&originHeight=775&originWidth=802&size=0&status=done&style=none&width=802"><br><strong>优点</strong> ：相对利用好资源，相对容易扩展等。<br><strong>缺点</strong> ：虚拟机太重了，一上来占用较多物理资源，移植性差，资源利用率低等。</li><li>容器时代<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1584290842846-069a8eb5-cfb0-411d-9b7f-930350fad7c9.png#align=left&display=inline&height=1039&margin=%5Bobject%20Object%5D&originHeight=1039&originWidth=1200&size=0&status=done&style=none&width=1200"></li></ul><h3 id="1-1-4-再次理解-Docker"><a href="#1-1-4-再次理解-Docker" class="headerlink" title="1.1.4 再次理解 Docker"></a>1.1.4 再次理解 Docker</h3><blockquote><p>Docker is a platform for developers and sysadmins to build, share, and run applications with containers. The use of containers to deploy applications is called containerization. Containers are not new, but their use for easily deploying applications is.</p></blockquote><p>Docker 是供开发人员和系统管理员使用容器构建，共享和运行应用程序的平台。 使用容器部署应用程序称为容器化。 容器不是新的，但用于轻松部署应用程序的容器却是新的。</p><p>发现还是比较容易理解的，但是这里有一句“Containers are not new”，也就是容器化技术很早就 出现了，比如常见的容器化技术有 OpenVZ 等。</p><h3 id="1-1-5-Docker-的优势和应用场景"><a href="#1-1-5-Docker-的优势和应用场景" class="headerlink" title="1.1.5 Docker 的优势和应用场景"></a>1.1.5 Docker 的优势和应用场景</h3><ol><li>有助于微服务的落地和部署</li><li>充分利用物理机资源，同时能够整合服务器资源</li><li>提高开发效率，测试效率，部署效率，有利于 DevOps 的落地，CI/CD</li><li>云原生落地，应用更好地迁移 …</li></ol><h2 id="1-2-What-is-Image-and-Container"><a href="#1-2-What-is-Image-and-Container" class="headerlink" title="1.2 What is Image and Container?"></a>1.2 What is Image and Container?</h2><p>docker engine  –》 jvm<br>image –》 class 文件<br>container –》 Java 对象</p><h3 id="1-2-1-What-is-Image"><a href="#1-2-1-What-is-Image" class="headerlink" title="1.2.1 What is Image?"></a>1.2.1 What is Image?</h3><p>Why is docker?-&gt; <a href="https://www.docker.com/resources/what-container">https://www.docker.com/resources/what-container</a></p><blockquote><p>A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings.</p></blockquote><p>Docker 容器映像是轻巧的，独立的，可执行的软件软件包，其中包含运行应用程序所需的一切：代码，运行时，系统工具，系统库和设置。</p><h3 id="1-2-2-What-is-Container？"><a href="#1-2-2-What-is-Container？" class="headerlink" title="1.2.2 What is Container？"></a>1.2.2 What is Container？</h3><p>Why is docker?-&gt; <a href="https://www.docker.com/resources/what-container">https://www.docker.com/resources/what-container</a></p><blockquote><p>A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another.</p></blockquote><p>容器是打包代码及其所有依赖项的软件的标准单元，因此应用程序可以从一个计算环境快速可靠地运行到另一个计算环境。</p><p>1.2.3 Relation between image and container</p><blockquote><p>Container images become containers at runtime and in the case of Docker containers - images become containers when they run on Docker Engine.</p></blockquote><p>容器映像在运行时会成为容器，对于 Docker 容器而言-映像在 Docker Engine 上运行时会成为容器。</p><h3 id="1-2-4-View-from-Docs"><a href="#1-2-4-View-from-Docs" class="headerlink" title="1.2.4 View from Docs"></a>1.2.4 View from Docs</h3><blockquote><p>从帮助文档的角度看 docker 官网-&gt;Resources-&gt;Docs-&gt;Get started-&gt;Quickstart-&gt;Orientation and setup-&gt;Images and containers<br>Fundamentally, a container is nothing but a running process, with some added encapsulation features applied to it in order to keep it isolated from the host and from other containers. One of the most important aspects of container isolation is that each container interacts with its own, private filesystem; this filesystem is provided by a Docker image. An image includes everything needed to run an application – the code or binary, runtimes, dependencies, and any other filesystem objects required.</p></blockquote><p>从根本上说，一个容器不过是一个正在运行的进程，并对其应用了一些附加的封装功能，以使其与主机和其他容器隔离。 容器隔离的最重要方面之一是每个容器都与自己的私有文件系统进行交互。 该文件系统由 Docker 映像提供。 映像包括运行应用程序所需的所有内容-代码或二进制文件，运行时，依赖项以及所需的任何其他文件系统对象。</p><h2 id="1-3-Containers-and-virtual-machines"><a href="#1-3-Containers-and-virtual-machines" class="headerlink" title="1.3 Containers and virtual machines"></a>1.3 Containers and virtual machines</h2><blockquote><p>从帮助文档的角度看 docker 官网-&gt;Resources-&gt;Docs-&gt;Get started-&gt;Quickstart-&gt;Orientation and setup-&gt;Containers and virtual machines<br>A container runs natively on Linux and shares the kernel of the host machine with other containers. It runs a discrete process, taking no more memory than any other executable, making it lightweight.<br>By contrast, a virtual machine (VM) runs a full-blown “guest” operating system with virtual access to host resources through a hypervisor. In general, VMs incur a lot of overhead beyond what is being consumed by your application logic.</p></blockquote><p>容器在 Linux 上本地运行，并与其他容器共享主机的内核。 它运行一个离散进程，不占用任何其他可执行文件更多的内存，从而使其轻巧。</p><p>相比之下，虚拟机（VM）运行成熟的“来宾”操作系统，并通过虚拟机管理程序对主机资源进行虚拟访问。 通常，VM 会产生大量开销，超出了应用程序逻辑所消耗的开销。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1584290839290-c72a16d5-fed8-4790-83d1-ead1c7e1128c.png#align=left&display=inline&height=570&margin=%5Bobject%20Object%5D&originHeight=570&originWidth=1241&size=0&status=done&style=none&width=1241"></p><h2 id="1-4-Docker-Engine-and-Architecture"><a href="#1-4-Docker-Engine-and-Architecture" class="headerlink" title="1.4 Docker Engine and Architecture"></a>1.4 Docker Engine and Architecture</h2><p><a href="https://docs.docker.com/engine/docker-overview/">https://docs.docker.com/engine/docker-overview/</a></p><h3 id="1-4-1-Docker-Engine"><a href="#1-4-1-Docker-Engine" class="headerlink" title="1.4.1 Docker Engine"></a>1.4.1 Docker Engine</h3><blockquote><p>Docker Engine is a client-server application with these major components:</p><ul><li>A server which is a type of long-running program called a daemon process (the dockerd command).</li><li>A REST API which specifies interfaces that programs can use to talk to the daemon and instruct it what to do.</li><li>A command line interface (CLI) client (the docker command).</li></ul></blockquote><p>Docker Engine 是具有这些主要组件的客户端-服务器应用程序：</p><ul><li>一种长期运行的程序，称为守护程序进程（dockerd 命令）的服务。</li><li>REST API，它指定程序可以用来与守护程序进行通信并指示其操作的接口。</li><li>命令行界面（CLI）客户端（docker 命令）。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1584290841950-391fbc8e-45ef-453e-a9cc-630e1e6445ad.png#align=left&display=inline&height=385&margin=%5Bobject%20Object%5D&originHeight=385&originWidth=492&size=0&status=done&style=none&width=492"></p><h3 id="1-4-2-Docker-Architecture"><a href="#1-4-2-Docker-Architecture" class="headerlink" title="1.4.2 Docker Architecture"></a>1.4.2 Docker Architecture</h3><blockquote><p>Docker uses a client-server architecture. The Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and distributing your Docker containers. The Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface.</p></blockquote><p>Docker 使用客户端-服务器架构。 Docker 客户端与 Docker 守护程序进行对话，该守护程序完成了构建，运行和分发 Docker 容器的繁重工作。 Docker 客户端和守护程序可以在同一系统上运行，也可以将 Docker 客户端连接到远程 Docker 守护程序。 Docker 客户端和守护程序在 UNIX 套接字或网络接口上使用 REST API 进行通信。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/svg/1082206/1584290842528-521f92e0-46f5-4965-9049-18fe40b60054.svg#align=left&display=inline&height=527&margin=%5Bobject%20Object%5D&originHeight=527&originWidth=1009&size=0&status=done&style=none&width=1009"></p><h2 id="1-5-Install"><a href="#1-5-Install" class="headerlink" title="1.5 Install"></a>1.5 Install</h2><p>见附件</p><h1 id="02-Image-and-Container"><a href="#02-Image-and-Container" class="headerlink" title="02 Image and Container"></a>02 Image and Container</h1><h2 id="2-1-Image"><a href="#2-1-Image" class="headerlink" title="2.1 Image"></a>2.1 Image</h2><h3 id="2-1-1-官方-image"><a href="#2-1-1-官方-image" class="headerlink" title="2.1.1 官方 image"></a>2.1.1 官方 image</h3><p><a href="https://github.com/docker-library">https://github.com/docker-library</a></p><p>mysql</p><p><a href="https://github.com/docker-library/mysql/blob/master/5.7/Dockerfile">https://github.com/docker-library/mysql/blob/master/5.7/Dockerfile</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">FROM debian:stretch-slim</span><br><span class="line"></span><br><span class="line"># add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added</span><br><span class="line">RUN groupadd -r mysql &amp;&amp; useradd -r -g mysql mysql</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends gnupg dirmngr &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"># add gosu for easy step-down from root</span><br><span class="line">ENV GOSU_VERSION 1.7</span><br><span class="line">RUN set -x \</span><br><span class="line">&amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends ca-certificates wget &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">&amp;&amp; wget -O /usr/local/bin/gosu &quot;https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)&quot; \</span><br><span class="line">&amp;&amp; wget -O /usr/local/bin/gosu.asc &quot;https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc&quot; \</span><br><span class="line">&amp;&amp; export GNUPGHOME=&quot;$(mktemp -d)&quot; \</span><br><span class="line">&amp;&amp; gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \</span><br><span class="line">&amp;&amp; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \</span><br><span class="line">&amp;&amp; gpgconf --kill all \</span><br><span class="line">&amp;&amp; rm -rf &quot;$GNUPGHOME&quot; /usr/local/bin/gosu.asc \</span><br><span class="line">&amp;&amp; chmod +x /usr/local/bin/gosu \</span><br><span class="line">&amp;&amp; gosu nobody true \</span><br><span class="line">&amp;&amp; apt-get purge -y --auto-remove ca-certificates wget</span><br><span class="line"></span><br><span class="line">RUN mkdir /docker-entrypoint-initdb.d</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span><br><span class="line"># for MYSQL_RANDOM_ROOT_PASSWORD</span><br><span class="line">pwgen \</span><br><span class="line"># for mysql_ssl_rsa_setup</span><br><span class="line">openssl \</span><br><span class="line"># FATAL ERROR: please install the following Perl modules before executing /usr/local/mysql/scripts/mysql_install_db:</span><br><span class="line"># File::Basename</span><br><span class="line"># File::Copy</span><br><span class="line"># Sys::Hostname</span><br><span class="line"># Data::Dumper</span><br><span class="line">perl \</span><br><span class="line">&amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line">RUN set -ex; \</span><br><span class="line"># gpg: key 5072E1F5: public key &quot;MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;&quot; imported</span><br><span class="line">key=&#x27;A4A9406876FCBD3C456770C88C718D3B5072E1F5&#x27;; \</span><br><span class="line">export GNUPGHOME=&quot;$(mktemp -d)&quot;; \</span><br><span class="line">gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys &quot;$key&quot;; \</span><br><span class="line">gpg --batch --export &quot;$key&quot; &gt; /etc/apt/trusted.gpg.d/mysql.gpg; \</span><br><span class="line">gpgconf --kill all; \</span><br><span class="line">rm -rf &quot;$GNUPGHOME&quot;; \</span><br><span class="line">apt-key list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">ENV MYSQL_MAJOR 5.7</span><br><span class="line">ENV MYSQL_VERSION 5.7.28-1debian9</span><br><span class="line"></span><br><span class="line">RUN echo &quot;deb http://repo.mysql.com/apt/debian/ stretch mysql-$&#123;MYSQL_MAJOR&#125;&quot; &gt; /etc/apt/sources.list.d/mysql.list</span><br><span class="line"></span><br><span class="line"># the &quot;/var/lib/mysql&quot; stuff here is because the mysql-server postinst doesn&#x27;t have an explicit way to disable the mysql_install_db codepath besides having a database already &quot;configured&quot; (ie, stuff in /var/lib/mysql/mysql)</span><br><span class="line"># also, we set debconf keys to make APT a little quieter</span><br><span class="line">RUN &#123; \</span><br><span class="line">echo mysql-community-server mysql-community-server/data-dir select &#x27;&#x27;; \</span><br><span class="line">echo mysql-community-server mysql-community-server/root-pass password &#x27;&#x27;; \</span><br><span class="line">echo mysql-community-server mysql-community-server/re-root-pass password &#x27;&#x27;; \</span><br><span class="line">echo mysql-community-server mysql-community-server/remove-test-db select false; \</span><br><span class="line">&#125; | debconf-set-selections \</span><br><span class="line">&amp;&amp; apt-get update &amp;&amp; apt-get install -y mysql-server=&quot;$&#123;MYSQL_VERSION&#125;&quot; &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">&amp;&amp; rm -rf /var/lib/mysql &amp;&amp; mkdir -p /var/lib/mysql /var/run/mysqld \</span><br><span class="line">&amp;&amp; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \</span><br><span class="line"># ensure that /var/run/mysqld (used for socket and lock files) is writable regardless of the UID our mysqld instance ends up having at runtime</span><br><span class="line">&amp;&amp; chmod 777 /var/run/mysqld \</span><br><span class="line"># comment out a few problematic configuration values</span><br><span class="line">&amp;&amp; find /etc/mysql/ -name &#x27;*.cnf&#x27; -print0 \</span><br><span class="line">| xargs -0 grep -lZE &#x27;^(bind-address|log)&#x27; \</span><br><span class="line">| xargs -rt -0 sed -Ei &#x27;s/^(bind-address|log)/#&amp;/&#x27; \</span><br><span class="line"># don&#x27;t reverse lookup hostnames, they are usually another container</span><br><span class="line">&amp;&amp; echo &#x27;[mysqld]\nskip-host-cache\nskip-name-resolve&#x27; &gt; /etc/mysql/conf.d/docker.cnf</span><br><span class="line"></span><br><span class="line">VOLUME /var/lib/mysql</span><br><span class="line"></span><br><span class="line">COPY docker-entrypoint.sh /usr/local/bin/</span><br><span class="line">RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat</span><br><span class="line">ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 3306 33060</span><br><span class="line">CMD [&quot;mysqld&quot;]</span><br></pre></td></tr></table></figure><h3 id="2-1-2-Dockerfile"><a href="#2-1-2-Dockerfile" class="headerlink" title="2.1.2 Dockerfile"></a>2.1.2 Dockerfile</h3><h4 id="2-1-2-1-FROM"><a href="#2-1-2-1-FROM" class="headerlink" title="2.1.2.1 FROM"></a>2.1.2.1 FROM</h4><p>指定基础镜像，比如 FROM ubuntu:14.04</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:14.04</span><br></pre></td></tr></table></figure><h4 id="2-1-2-2-RUN"><a href="#2-1-2-2-RUN" class="headerlink" title="2.1.2.2 RUN"></a>2.1.2.2 RUN</h4><p>在镜像内部执行一些命令，比如安装软件，配置环境等，换行可以使用””</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN groupadd -r mysql &amp;&amp; useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure><h4 id="2-1-2-3-ENV"><a href="#2-1-2-3-ENV" class="headerlink" title="2.1.2.3 ENV"></a>2.1.2.3 ENV</h4><p>设置变量的值，ENV MYSQL_MAJOR 5.7，可以通过 docker run –e key=value 修改，后面可以直接使 用${MYSQL_MAJOR}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENV MYSQL_MAJOR 5.7</span><br></pre></td></tr></table></figure><h4 id="2-1-2-4-LABEL"><a href="#2-1-2-4-LABEL" class="headerlink" title="2.1.2.4 LABEL"></a>2.1.2.4 LABEL</h4><p>设置镜像标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LABEL email=&quot;732060461@qq.com&quot;</span><br><span class="line">LABEL name=&quot;kieran&quot;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-5-VOLUME"><a href="#2-1-2-5-VOLUME" class="headerlink" title="2.1.2.5 VOLUME"></a>2.1.2.5 VOLUME</h4><p>指定数据的挂在目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME /var/lib/mysql</span><br></pre></td></tr></table></figure><h4 id="2-1-2-6-COPY"><a href="#2-1-2-6-COPY" class="headerlink" title="2.1.2.6 COPY"></a>2.1.2.6 COPY</h4><p>将主机的文件复制到镜像内，如果目录不存在，会自动创建所需要的目录，注意只是复制，不会提取和 解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY docker-entrypoint.sh /usr/local/bin/</span><br></pre></td></tr></table></figure><h4 id="2-1-2-7-ADD"><a href="#2-1-2-7-ADD" class="headerlink" title="2.1.2.7 ADD"></a>2.1.2.7 ADD</h4><p>将主机的文件复制到镜像内，和 COPY 类似，只是 ADD 会对压缩文件提取和解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD application.yml /etc/kieran/</span><br></pre></td></tr></table></figure><h4 id="2-1-2-8-WORKDIR"><a href="#2-1-2-8-WORKDIR" class="headerlink" title="2.1.2.8 WORKDIR"></a>2.1.2.8 WORKDIR</h4><p>指定镜像的工作目录，之后的命令都是基于此目录工作，若不存在则创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /usr/local</span><br><span class="line">WORKDIR tomcat</span><br><span class="line">RUN touch test.txt</span><br></pre></td></tr></table></figure><p>会在/usr/local/tomcat 下创建 test.txt 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /root</span><br><span class="line">ADD app.yml test/</span><br></pre></td></tr></table></figure><p>会在/root/test 下多出一个 app.yml 文件</p><h4 id="2-1-2-9-CMD"><a href="#2-1-2-9-CMD" class="headerlink" title="2.1.2.9 CMD"></a>2.1.2.9 CMD</h4><p>容器启动的时候默认会执行的命令，若有多个 CMD 命令，则最后一个生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;mysqld&quot;]</span><br><span class="line">或</span><br><span class="line">CMD mysqld</span><br></pre></td></tr></table></figure><h4 id="2-1-2-10-ENTRYPOINT"><a href="#2-1-2-10-ENTRYPOINT" class="headerlink" title="2.1.2.10 ENTRYPOINT"></a>2.1.2.10 ENTRYPOINT</h4><p>和 CMD 的使用类似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]</span><br></pre></td></tr></table></figure><p>和 CMD 的不同：<br>docker run 执行时，会覆盖 CMD 的命令，而 ENTRYPOINT 不会</p><h4 id="2-1-2-11-EXPOSE"><a href="#2-1-2-11-EXPOSE" class="headerlink" title="2.1.2.11 EXPOSE"></a>2.1.2.11 EXPOSE</h4><p>指定镜像要暴露的端口，启动镜像时，可以使用-p 将该端口映射给宿主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 3306</span><br></pre></td></tr></table></figure><h3 id="2-1-3-Dockerfile-实战-Spring-Boot-项目"><a href="#2-1-3-Dockerfile-实战-Spring-Boot-项目" class="headerlink" title="2.1.3 Dockerfile 实战 Spring Boot 项目"></a>2.1.3 Dockerfile 实战 Spring Boot 项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">(1)创建一个Spring Boot项目</span><br><span class="line"></span><br><span class="line">(2)写一个controller</span><br><span class="line">@RestController</span><br><span class="line">public class DockerController &#123;</span><br><span class="line">    @GetMapping(&quot;/dockerfile&quot;)</span><br><span class="line">    @ResponseBody String dockerfile() &#123;</span><br><span class="line">        return &quot;hello docker&quot; ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">(3)mvn clean package打成一个jar包</span><br><span class="line">    在target下找到&quot;dockerfile-demo-0.0.1-SNAPSHOT.jar&quot;</span><br><span class="line"></span><br><span class="line">(4)在docker环境中新建一个目录&quot;first-dockerfile&quot;</span><br><span class="line"></span><br><span class="line">(5)上传&quot;dockerfile-demo-0.0.1-SNAPSHOT.jar&quot;到该目录下，并且在此目录创建Dockerfile</span><br><span class="line"></span><br><span class="line">(6)创建Dockerfile文件，编写内容</span><br><span class="line">FROM openjdk:8</span><br><span class="line">MAINTAINER kieran</span><br><span class="line">LABEL name=&quot;dockerfile-demo&quot; version=&quot;1.0&quot; author=&quot;kieran&quot;</span><br><span class="line">COPY dockerfile-demo-0.0.1-SNAPSHOT.jar dockerfile-image.jar</span><br><span class="line">CMD [&quot;java&quot;,&quot;-jar&quot;,&quot;dockerfile-image.jar&quot;]</span><br><span class="line"></span><br><span class="line">(7)基于Dockerfile构建镜像</span><br><span class="line">    docker build -t test-docker-image .</span><br><span class="line"></span><br><span class="line">(8)基于image创建container</span><br><span class="line">    docker run -d --name user01 -p 6666:8080 test-docker-image</span><br><span class="line"></span><br><span class="line">(9)查看启动日志docker logs user01</span><br><span class="line"></span><br><span class="line">(10)宿主机上访问</span><br><span class="line">    curl localhost:6666/dockerfile hello docker</span><br><span class="line"></span><br><span class="line">(11)还可以再次启动一个</span><br><span class="line">    docker run -d --name user02 -p 8081:8080 test-docker-image</span><br></pre></td></tr></table></figure><h3 id="2-1-4-镜像仓库"><a href="#2-1-4-镜像仓库" class="headerlink" title="2.1.4 镜像仓库"></a>2.1.4 镜像仓库</h3><h4 id="2-1-4-1-docker-hub"><a href="#2-1-4-1-docker-hub" class="headerlink" title="2.1.4.1 docker hub"></a>2.1.4.1 docker hub</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(1)在docker机器上登录</span><br><span class="line">    docker login</span><br><span class="line"></span><br><span class="line">(2)输入用户名和密码</span><br><span class="line"></span><br><span class="line">(3) 推送，[注意镜像名称要和docker id一致，不然push不成功]</span><br><span class="line">    docker push xxx/test-docker-image</span><br><span class="line"></span><br><span class="line">(4)给image重命名，并删除掉原来的</span><br><span class="line">    docker tag test-docker-image xxx/test-docker-image</span><br><span class="line">    docker rmi -f test-docker-image</span><br><span class="line"></span><br><span class="line">(5)再次推送，刷新hub.docker.com后台，发现成功</span><br><span class="line"></span><br><span class="line">(6)别人下载，并且运行</span><br><span class="line">    docker pull xxx/test-docker-image</span><br><span class="line">    docker run -d --name user01 -p 6661:8080 xxx/test-docker-image</span><br></pre></td></tr></table></figure><h4 id="2-1-4-2-阿里云-docker-hub"><a href="#2-1-4-2-阿里云-docker-hub" class="headerlink" title="2.1.4.2 阿里云 docker hub"></a>2.1.4.2 阿里云 docker hub</h4><blockquote><p>阿里云 docker 仓库<br><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/repositories">https://cr.console.aliyun.com/cn-hangzhou/instances/repositories</a><br>参考手册<br><a href="https://cr.console.aliyun.com/repository/cn-hangzhou/kieran2019/test/details">https://cr.console.aliyun.com/repository/cn-hangzhou/kieran2019/test/details</a></p></blockquote><h4 id="2-1-4-3-搭建自己的-Docker-Harbor"><a href="#2-1-4-3-搭建自己的-Docker-Harbor" class="headerlink" title="2.1.4.3 搭建自己的 Docker Harbor"></a>2.1.4.3 搭建自己的 Docker Harbor</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(1)访问github上的harbor项目</span><br><span class="line">    https://github.com/goharbor/harbor</span><br><span class="line"></span><br><span class="line">(2)下载版本，比如1.7.1 https://github.com/goharbor/harbor/releases</span><br><span class="line"></span><br><span class="line">(3)找一台安装了docker-compose[见附件]，上传并解压</span><br><span class="line">    tar -zxvf xxx.tar.gz</span><br><span class="line"></span><br><span class="line">(4)进入到harbor目录 修改harbor.cfg文件，主要是ip地址的修改成当前机器的ip地址 同时也可以看到Harbor的密码，默认是Harbor12345</span><br><span class="line"></span><br><span class="line">(5)安装harbor，需要一些时间</span><br><span class="line">    sh install.sh</span><br><span class="line"></span><br><span class="line">(6)浏览器访问，比如39.108.121.24，输入用户名和密码即可</span><br></pre></td></tr></table></figure><h3 id="2-1-5-Image-常见操作"><a href="#2-1-5-Image-常见操作" class="headerlink" title="2.1.5 Image 常见操作"></a>2.1.5 Image 常见操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(1)查看本地image列表</span><br><span class="line">    docker images</span><br><span class="line">    docker image ls</span><br><span class="line"></span><br><span class="line">(2)获取远端镜像</span><br><span class="line">    docker pull</span><br><span class="line"></span><br><span class="line">(3)删除镜像[注意此镜像如果正在使用，或者有关联的镜像，则需要先处理完]</span><br><span class="line">    docker image rm imageid</span><br><span class="line">    docker rmi -f imageid</span><br><span class="line">    docker rmi -f $(docker image ls) 删除所有镜像</span><br><span class="line"></span><br><span class="line">(4)运行镜像</span><br><span class="line">    docker run image</span><br><span class="line"></span><br><span class="line">(5)发布镜像</span><br><span class="line">    docker push</span><br></pre></td></tr></table></figure><h2 id="2-2-Container"><a href="#2-2-Container" class="headerlink" title="2.2 Container"></a>2.2 Container</h2><p>既然 container 是由 image 运行起来的，那么是否可以理解为 container 和 image 有某种关系？<br>其实可以理解为 container 只是基于 image 之后的 layer 而已，也就是可以通过 docker run image 创建出一个 container 出来。</p><h3 id="2-2-1-container-到-image"><a href="#2-2-1-container-到-image" class="headerlink" title="2.2.1 container 到 image"></a>2.2.1 container 到 image</h3><p>既然 container 是基于 image 之上的，想想是否能够由一个 container 反推出 image 呢？ 肯定是可以的，比如通过 docker run 运行起一个 container 出来，这时候对 container 对一些修 改，然后再生成一个新的 image，这时候 image 的由来就不仅仅只能通过 Dockerfile 咯。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(1)拉取一个centos image</span><br><span class="line">    docker pull centos</span><br><span class="line"></span><br><span class="line">(2)根据centos镜像创建出一个container</span><br><span class="line">    docker run -d -it --name my-centos centos</span><br><span class="line"></span><br><span class="line">(3)进入my-centos容器中</span><br><span class="line">    docker exec -it my-centos bash</span><br><span class="line"></span><br><span class="line">(4)输入vim命令</span><br><span class="line">    bash: vim: command not found</span><br><span class="line"></span><br><span class="line">(5)我们要做的是 对该container进行修改，也就是安装一下vim命令，然后将其生成一个新的centos</span><br><span class="line"></span><br><span class="line">(6)在centos的container中安装vim</span><br><span class="line">    yum install -y vim</span><br><span class="line"></span><br><span class="line">(7)退出容器，将其生成一个新的centos，名称为&quot;vim-centos-image&quot;</span><br><span class="line">    docker commit my-centos vim-centos-image</span><br><span class="line"></span><br><span class="line">(8)查看镜像列表，并且基于&quot;vim-centos-image&quot;创建新的容器</span><br><span class="line">    docker run -d -it --name my-vim-centos vim-centos-image</span><br><span class="line"></span><br><span class="line">(9)进入到my-vim-centos容器中，检查vim命令是否存在</span><br><span class="line">    docker exec -it my-vim-centos bash</span><br><span class="line">    vim</span><br></pre></td></tr></table></figure><p>可以通过 docker commit 命令基于一个 container 重新生成一个 image，但是一般得到 image 的 方式不建议这么做，不然 image 怎么来的就全然不知道了。</p><h3 id="2-2-2-container-资源限制"><a href="#2-2-2-container-资源限制" class="headerlink" title="2.2.2 container 资源限制"></a>2.2.2 container 资源限制</h3><p>如果不对 container 的资源做限制，它就会无限制地使用物理机的资源，这样显然是不合适的。<br>查看资源情况 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats</span><br></pre></td></tr></table></figure><h4 id="2-2-2-1-内存限制"><a href="#2-2-2-1-内存限制" class="headerlink" title="2.2.2.1 内存限制"></a>2.2.2.1 内存限制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--memory Memory limit</span><br><span class="line">如果不设置 --memory-swap，其大小和memory一样</span><br><span class="line">docker run -d --memory 100M --name tomcat1 tomcat</span><br></pre></td></tr></table></figure><h4 id="2-2-2-2-CPU-限制"><a href="#2-2-2-2-CPU-限制" class="headerlink" title="2.2.2.2 CPU 限制"></a>2.2.2.2 CPU 限制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--cpu-shares 权重</span><br><span class="line">docker run -d --cpu-shares 10 --name tomcat2 tomcat</span><br></pre></td></tr></table></figure><h4 id="2-2-2-3-图形化资源监控"><a href="#2-2-2-3-图形化资源监控" class="headerlink" title="2.2.2.3 图形化资源监控"></a>2.2.2.3 图形化资源监控</h4><p><a href="https://github.com/weaveworks/scope">https://github.com/weaveworks/scope</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L git.io/scope -o /usr/local/bin/scope</span><br><span class="line">sudo chmod a+x /usr/local/bin/scope</span><br><span class="line">scope launch 39.108.121.24</span><br><span class="line"></span><br><span class="line"># 停止scope scope stop</span><br><span class="line"># 同时监控两台机器，在两台机器中分别执行如下命令</span><br><span class="line">scope launch ip1 ip2</span><br></pre></td></tr></table></figure><p>2.2.3 container 常见操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(1)根据镜像创建容器</span><br><span class="line">    docker run -d --name -p 9090:8080 my-tomcat tomcat</span><br><span class="line"></span><br><span class="line">(2)查看运行中的container</span><br><span class="line">    docker ps</span><br><span class="line"></span><br><span class="line">(3)查看所有的container[包含退出的]</span><br><span class="line">    docker ps -a</span><br><span class="line"></span><br><span class="line">(4)删除container</span><br><span class="line">    docker rm containerid</span><br><span class="line">    docker rm -f $(docker ps -a) 删除所有container</span><br><span class="line"></span><br><span class="line">(5)进入到一个container中</span><br><span class="line">    docker exec -it container bash</span><br><span class="line"></span><br><span class="line">(6)根据container生成image</span><br><span class="line">    docker commit my-centos vim-centos-image</span><br><span class="line"></span><br><span class="line">(7)查看某个container的日志</span><br><span class="line">    docker logs container</span><br><span class="line"></span><br><span class="line">(8)查看容器资源使用情况</span><br><span class="line">    docker stats</span><br><span class="line"></span><br><span class="line">(9)查看容器详情信息</span><br><span class="line">    docker inspect container</span><br><span class="line"></span><br><span class="line">(10)停止/启动容器</span><br><span class="line">    docker stop/start container</span><br></pre></td></tr></table></figure><h2 id="2-3-底层技术支持"><a href="#2-3-底层技术支持" class="headerlink" title="2.3 底层技术支持"></a>2.3 底层技术支持</h2><p>Container 是一种轻量级的虚拟化技术，不用模拟硬件创建虚拟机。 Docker 是基于 Linux Kernel 的 Namespace、CGroups、UnionFileSystem 等技术封装成的一种自 定义容器格式，从而提供一套虚拟运行环境。</p><blockquote><p>Namespace：用来做隔离的，比如 pid[进程]、net[网络]、mnt[挂载点]等<br>CGroups: Controller Groups 用来做资源限制，比如内存和 CPU 等<br>Union file systems：用来做 image 和 container</p></blockquote><h1 id="03-附件"><a href="#03-附件" class="headerlink" title="03 附件"></a>03 附件</h1><h2 id="3-1-mac-搭建-docker、docker-compose-环境"><a href="#3-1-mac-搭建-docker、docker-compose-环境" class="headerlink" title="3.1 mac 搭建 docker、docker-compose 环境"></a>3.1 mac 搭建 docker、docker-compose 环境</h2><p><a href="https://juejin.im/post/5affada36fb9a07abf72c6e5">https://juejin.im/post/5affada36fb9a07abf72c6e5</a></p><h2 id="3-2-docker-compose-yml-配置详解"><a href="#3-2-docker-compose-yml-配置详解" class="headerlink" title="3.2 docker-compose.yml 配置详解"></a>3.2 docker-compose.yml 配置详解</h2><p><a href="https://juejin.im/post/5aed4a776fb9a07a9918bb42">https://juejin.im/post/5aed4a776fb9a07a9918bb42</a></p><h1 id="待续…"><a href="#待续…" class="headerlink" title="待续…"></a>待续…</h1>]]></content>
    
    
    <summary type="html">docker初探</summary>
    
    
    
    <category term="工具" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="docker" scheme="https://www.khalidlife.com/categories/%E5%B7%A5%E5%85%B7/docker/"/>
    
    
    <category term="docker" scheme="https://www.khalidlife.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>JVM介绍</title>
    <link href="https://www.khalidlife.com/posts/hh7l8d.html"/>
    <id>https://www.khalidlife.com/posts/hh7l8d.html</id>
    <published>2020-03-08T15:43:50.000Z</published>
    <updated>2022-11-29T07:05:58.134Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://juejin.im/post/5e1505d0f265da5d5d744050#heading-28">https://juejin.im/post/5e1505d0f265da5d5d744050#heading-28</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果在文中用词或者理解方面出现问题，欢迎指出。此文旨在提及和而不深究，但会尽量效率地把知识点都抛出来</p><h2 id="一、JVM-的基本介绍"><a href="#一、JVM-的基本介绍" class="headerlink" title="一、JVM 的基本介绍"></a>一、JVM 的基本介绍</h2><p>JVM 是 Java Virtual Machine 的缩写，它是一个虚构出来的计算机，一种规范。通过在实际的计算机上仿真模拟各类计算机功能实现···</p><p>好，其实抛开这么专业的句子不说，就知道 JVM 其实就类似于一台小电脑运行在 windows 或者 linux 这些操作系统环境下即可。它直接和操作系统进行交互，与硬件不直接交互，可操作系统可以帮我们完成和硬件进行交互的工作。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256560-dd66adbd-2d8d-4d10-97cd-55bf963d1dd4.png#align=left&display=inline&height=397&margin=%5Bobject%20Object%5D&originHeight=397&originWidth=227&size=0&status=done&style=none&width=227"></p><h3 id="1-1-Java-文件是如何被运行的"><a href="#1-1-Java-文件是如何被运行的" class="headerlink" title="1.1 Java 文件是如何被运行的"></a>1.1 Java 文件是如何被运行的</h3><p>比如我们现在写了一个 HelloWorld.java 好了，那这个 HelloWorld.java 抛开所有东西不谈，那是不是就类似于一个文本文件，只是这个文本文件它写的都是英文，而且有一定的缩进而已。</p><p>那我们的 <strong>JVM</strong> 是不认识文本文件的，所以它需要一个 <strong>编译</strong> ，让其成为一个它会读二进制文件的 <strong>HelloWorld.class</strong></p><h4 id="①-类加载器"><a href="#①-类加载器" class="headerlink" title="① 类加载器"></a>① 类加载器</h4><p>如果 <strong>JVM</strong> 想要执行这个 <strong>.class</strong> 文件，我们需要将其装进一个 <strong>类加载器</strong> 中，它就像一个搬运工一样，会把所有的 <strong>.class</strong> 文件全部搬进 JVM 里面来。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256546-4ece55d7-e2c4-4fcc-aad6-893491bb748b.png#align=left&display=inline&height=105&margin=%5Bobject%20Object%5D&originHeight=105&originWidth=607&size=0&status=done&style=none&width=607"></p><h4 id="②-方法区"><a href="#②-方法区" class="headerlink" title="② 方法区"></a>② 方法区</h4><p><strong>方法区</strong> 是用于存放类似于元数据信息方面的数据的，比如类信息，常量，静态变量，编译后代码···等</p><p>类加载器将 .class 文件搬过来就是先丢到这一块上</p><h4 id="③-堆"><a href="#③-堆" class="headerlink" title="③ 堆"></a>③ 堆</h4><p><strong>堆</strong> 主要放了一些存储的数据，比如对象实例，数组···等，它和方法区都同属于 <strong>线程共享区域</strong> 。也就是说它们都是 <strong>线程不安全</strong> 的</p><h4 id="④-栈"><a href="#④-栈" class="headerlink" title="④ 栈"></a>④ 栈</h4><p><strong>栈</strong> 这是我们的代码运行空间。我们编写的每一个方法都会放到 <strong>栈</strong> 里面运行。</p><p>我们会听说过 本地方法栈 或者 本地方法接口 这两个名词，不过我们基本不会涉及这两块的内容，它俩底层是使用 C 来进行工作的，和 Java 没有太大的关系。</p><h4 id="⑤-程序计数器"><a href="#⑤-程序计数器" class="headerlink" title="⑤ 程序计数器"></a>⑤ 程序计数器</h4><p>主要就是完成一个加载工作，类似于一个指针一样的，指向下一行我们需要执行的代码。和栈一样，都是 <strong>线程独享</strong> 的，就是说每一个线程都会有自己对应的一块区域而不会存在并发和多线程的问题。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256601-f74db950-63a2-4e0d-8e37-52c42c017d29.png#align=left&display=inline&height=475&margin=%5Bobject%20Object%5D&originHeight=475&originWidth=762&size=0&status=done&style=none&width=762"></p><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><ol><li>Java 文件经过编译后变成 .class 字节码文件</li><li>字节码文件通过类加载器被搬运到 JVM 虚拟机中</li><li>虚拟机主要的 5 大块：方法区，堆都为线程共享区域，有线程安全问题，栈和本地方法栈和计数器都是独享区域，不存在线程安全问题，而 JVM 的调优主要就是围绕堆，栈两大块进行</li></ol><h3 id="1-2-简单的代码例子"><a href="#1-2-简单的代码例子" class="headerlink" title="1.2 简单的代码例子"></a>1.2 简单的代码例子</h3><p>一个简单的学生类<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256562-07ee6371-0a91-43af-8c1e-58056ca5301d.png#align=left&display=inline&height=302&margin=%5Bobject%20Object%5D&originHeight=302&originWidth=640&size=0&status=done&style=none&width=640"></p><p>一个 main 方法<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256631-71275cc1-0b73-45c1-ab8d-2f28822a137d.png#align=left&display=inline&height=178&margin=%5Bobject%20Object%5D&originHeight=178&originWidth=619&size=0&status=done&style=none&width=619"></p><p>执行 main 方法的步骤如下:</p><ol><li>编译好 App.java 后得到 App.class 后，执行 App.class，系统会启动一个 JVM 进程，从 classpath 路径中找到一个名为 App.class 的二进制文件，将 App 的类信息加载到运行时数据区的方法区内，这个过程叫做 App 类的加载</li><li>JVM 找到 App 的主程序入口，执行 main 方法</li><li>这个 main 中的第一条语句为 Student student = new Student(“tellUrDream”) ，就是让 JVM 创建一个 Student 对象，但是这个时候方法区中是没有 Student 类的信息的，所以 JVM 马上加载 Student 类，把 Student 类的信息放到方法区中</li><li>加载完 Student 类后，JVM 在堆中为一个新的 Student 实例分配内存，然后调用构造函数初始化 Student 实例，这个 Student 实例持有 <strong>指向方法区中的 Student 类的类型信息</strong> 的引用</li><li>执行 student.sayName();时，JVM 根据 student 的引用找到 student 对象，然后根据 student 对象持有的引用定位到方法区中 student 类的类型信息的方法表，获得 sayName() 的字节码地址。</li><li>执行 sayName()</li></ol><p>其实也不用管太多，只需要知道对象实例初始化时会去方法区中找类信息，完成后再到栈那里去运行方法。找方法就在方法表中找。</p><h2 id="二、类加载器的介绍"><a href="#二、类加载器的介绍" class="headerlink" title="二、类加载器的介绍"></a>二、类加载器的介绍</h2><p>之前也提到了它是负责加载.class 文件的，它们在文件开头会有特定的文件标示，将 class 文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构，并且 ClassLoader 只负责 class 文件的加载，而是否能够运行则由 Execution Engine 来决定</p><h3 id="2-1-类加载器的流程"><a href="#2-1-类加载器的流程" class="headerlink" title="2.1 类加载器的流程"></a>2.1 类加载器的流程</h3><p>从类被加载到虚拟机内存中开始，到释放内存总共有 7 个步骤：加载，验证，准备，解析，初始化，使用，卸载。其中<strong>验证，准备，解析三个部分统称为连接</strong></p><h4 id="2-1-1-加载"><a href="#2-1-1-加载" class="headerlink" title="2.1.1 加载"></a>2.1.1 加载</h4><ol><li>将 class 文件加载到内存</li><li>将静态数据结构转化成方法区中运行时的数据结构</li><li>在堆中生成一个代表这个类的 java.lang.Class 对象作为数据访问的入口</li></ol><h4 id="2-1-2-链接"><a href="#2-1-2-链接" class="headerlink" title="2.1.2 链接"></a>2.1.2 链接</h4><ol><li>验证：确保加载的类符合 JVM 规范和安全，保证被校验类的方法在运行时不会做出危害虚拟机的事件，其实就是一个安全检查</li><li>准备：为 static 变量在方法区中分配内存空间，设置变量的初始值，例如 static int a = 3 （注意：准备阶段只设置类中的静态变量（方法区中），不包括实例变量（堆内存中），实例变量是对象初始化时赋值的）</li><li>解析：虚拟机将常量池内的符号引用替换为直接引用的过程（符号引用比如我现在 import java.util.ArrayList 这就算符号引用，直接引用就是指针或者对象地址，注意引用对象一定是在内存进行）</li></ol><h4 id="2-1-3-初始化"><a href="#2-1-3-初始化" class="headerlink" title="2.1.3 初始化"></a>2.1.3 初始化</h4><p>初始化其实就是一个赋值的操作，它会执行一个类构造器的<clinit>()方法。由编译器自动收集类中所有变量的赋值动作，此时准备阶段时的那个 static int a = 3 的例子，在这个时候就正式赋值为 3</p><h4 id="2-1-4-卸载"><a href="#2-1-4-卸载" class="headerlink" title="2.1.4 卸载"></a>2.1.4 卸载</h4><p>GC 将无用对象从内存中卸载</p><h3 id="2-2-类加载器的加载顺序"><a href="#2-2-类加载器的加载顺序" class="headerlink" title="2.2 类加载器的加载顺序"></a>2.2 类加载器的加载顺序</h3><p>加载一个 Class 类的顺序也是有优先级的，类加载器从最底层开始往上的顺序是这样的</p><ol><li>BootStrap ClassLoader：rt.jar</li><li>Extention ClassLoader: 加载扩展的 jar 包</li><li>App ClassLoader：指定的 classpath 下面的 jar 包</li><li>Custom ClassLoader：自定义的类加载器</li></ol><h3 id="2-3-双亲委派机制"><a href="#2-3-双亲委派机制" class="headerlink" title="2.3 双亲委派机制"></a>2.3 双亲委派机制</h3><p>当一个类收到了加载请求时，它是不会先自己去尝试加载的，而是委派给父类去完成，比如我现在要 new 一个 Person，这个 Person 是我们自定义的类，如果我们要加载它，就会先委派 App ClassLoader，只有当父类加载器都反馈自己无法完成这个请求（也就是父类加载器都没有找到加载所需的 Class）时，子类加载器才会自行尝试加载</p><p>这样做的好处是，加载位于 rt.jar 包中的类时不管是哪个加载器加载，最终都会委托到 BootStrap ClassLoader 进行加载，这样保证了使用不同的类加载器得到的都是同一个结果。</p><p>其实这个也是一个隔离的作用，避免了我们的代码影响了 JDK 的代码，比如我现在要来一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class String()&#123;</span><br><span class="line">    public static void main()&#123;sout;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种时候，我们的代码肯定会报错，因为在加载的时候其实是找到了 rt.jar 中的 String.class，然后发现这也没有 main 方法</p><h2 id="三、运行时数据区"><a href="#三、运行时数据区" class="headerlink" title="三、运行时数据区"></a>三、运行时数据区</h2><h3 id="3-1-本地方法栈和程序计数器"><a href="#3-1-本地方法栈和程序计数器" class="headerlink" title="3.1 本地方法栈和程序计数器"></a>3.1 本地方法栈和程序计数器</h3><p>比如说我们现在点开 Thread 类的源码，会看到它的 start0 方法带有一个 native 关键字修饰，而且不存在方法体，这种用 native 修饰的方法就是本地方法，这是使用 C 来实现的，然后一般这些方法都会放到一个叫做本地方法栈的区域。</p><p>程序计数器其实就是一个指针，它指向了我们程序中下一句需要执行的指令，它也是内存区域中唯一一个不会出现 OutOfMemoryError 的区域，而且占用内存空间小到基本可以忽略不计。这个内存仅代表当前线程所执行的字节码的行号指示器，字节码解析器通过改变这个计数器的值选取下一条需要执行的字节码指令。</p><p>如果执行的是 native 方法，那这个指针就不工作了。</p><h3 id="3-2-方法区"><a href="#3-2-方法区" class="headerlink" title="3.2 方法区"></a>3.2 方法区</h3><p>方法区主要的作用技术存放类的元数据信息，常量和静态变量···等。当它存储的信息过大时，会在无法满足内存分配时报错。</p><h3 id="3-3-虚拟机栈和虚拟机堆"><a href="#3-3-虚拟机栈和虚拟机堆" class="headerlink" title="3.3 虚拟机栈和虚拟机堆"></a>3.3 虚拟机栈和虚拟机堆</h3><p>一句话便是：栈管运行，堆管存储。则虚拟机栈负责运行代码，而虚拟机堆负责存储数据。</p><h4 id="3-3-1-虚拟机栈的概念"><a href="#3-3-1-虚拟机栈的概念" class="headerlink" title="3.3.1 虚拟机栈的概念"></a>3.3.1 虚拟机栈的概念</h4><p>它是 Java 方法执行的内存模型。里面会对局部变量，动态链表，方法出口，栈的操作（入栈和出栈）进行存储，且线程独享。同时如果我们听到局部变量表，那也是在说虚拟机栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Person&#123;</span><br><span class="line">    int a = 1;</span><br><span class="line"></span><br><span class="line">    public void doSomething()&#123;</span><br><span class="line">        int b = 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-虚拟机栈存在的异常"><a href="#3-3-2-虚拟机栈存在的异常" class="headerlink" title="3.3.2 虚拟机栈存在的异常"></a>3.3.2 虚拟机栈存在的异常</h4><p>如果线程请求的栈的深度大于虚拟机栈的最大深度，就会报 <strong>StackOverflowError</strong> （这种错误经常出现在递归中）。Java 虚拟机也可以动态扩展，但随着扩展会不断地申请内存，当无法申请足够内存时就会报错 <strong>OutOfMemoryError</strong>。</p><h4 id="3-3-3-虚拟机栈的生命周期"><a href="#3-3-3-虚拟机栈的生命周期" class="headerlink" title="3.3.3 虚拟机栈的生命周期"></a>3.3.3 虚拟机栈的生命周期</h4><p>对于栈来说，不存在垃圾回收。只要程序运行结束，栈的空间自然就会释放了。栈的生命周期和所处的线程是一致的。</p><p>这里补充一句：8 种基本类型的变量+对象的引用变量+实例方法都是在栈里面分配内存。</p><h4 id="3-3-4-虚拟机栈的执行"><a href="#3-3-4-虚拟机栈的执行" class="headerlink" title="3.3.4 虚拟机栈的执行"></a>3.3.4 虚拟机栈的执行</h4><p>我们经常说的栈帧数据，说白了在 JVM 中叫栈帧，放到 Java 中其实就是方法，它也是存放在栈中的。</p><p>栈中的数据都是以栈帧的格式存在，它是一个关于方法和运行期数据的数据集。比如我们执行一个方法 a，就会对应产生一个栈帧 A1，然后 A1 会被压入栈中。同理方法 b 会有一个 B1，方法 c 会有一个 C1，等到这个线程执行完毕后，栈会先弹出 C1，后 B1,A1。它是一个先进后出，后进先出原则。</p><h4 id="3-3-5-局部变量的复用"><a href="#3-3-5-局部变量的复用" class="headerlink" title="3.3.5 局部变量的复用"></a>3.3.5 局部变量的复用</h4><p>局部变量表用于存放方法参数和方法内部所定义的局部变量。它的容量是以 Slot 为最小单位，一个 slot 可以存放 32 位以内的数据类型。</p><p>虚拟机通过索引定位的方式使用局部变量表，范围为[0,局部变量表的 slot 的数量]。方法中的参数就会按一定顺序排列在这个局部变量表中，至于怎么排的我们可以先不关心。而为了节省栈帧空间，这些 slot 是可以复用的，当方法执行位置超过了某个变量，那么这个变量的 slot 可以被其它变量复用。当然如果需要复用，那我们的垃圾回收自然就不会去动这些内存。</p><h4 id="3-3-6-虚拟机堆的概念"><a href="#3-3-6-虚拟机堆的概念" class="headerlink" title="3.3.6 虚拟机堆的概念"></a>3.3.6 虚拟机堆的概念</h4><p>JVM 内存会划分为堆内存和非堆内存，堆内存中也会划分为<strong>年轻代</strong>和<strong>老年代</strong>，而非堆内存则为<strong>永久代</strong>。年轻代又会分为<strong>Eden</strong>和<strong>Survivor</strong>区。Survivor 也会分为<strong>FromPlace</strong>和<strong>ToPlace</strong>，toPlace 的 survivor 区域是空的。Eden，FromPlace 和 ToPlace 的默认占比为 <strong>8:1:1</strong>。当然这个东西其实也可以通过一个 -XX:+UsePSAdaptiveSurvivorSizePolicy 参数来根据生成对象的速率动态调整</p><p>堆内存中存放的是对象，垃圾收集就是收集这些对象然后交给 GC 算法进行回收。非堆内存其实我们已经说过了，就是方法区。在 1.8 中已经移除永久代，替代品是一个元空间(MetaSpace)，最大区别是 metaSpace 是不存在于 JVM 中的，它使用的是本地内存。并有两个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MetaspaceSize：初始化元空间大小，控制发生GC</span><br><span class="line">MaxMetaspaceSize：限制元空间大小上限，防止占用过多物理内存。</span><br></pre></td></tr></table></figure><p>移除的原因可以大致了解一下：融合 HotSpot JVM 和 JRockit VM 而做出的改变，因为 JRockit 是没有永久代的，不过这也间接性地解决了永久代的 OOM 问题。</p><h4 id="3-3-7-Eden-年轻代的介绍"><a href="#3-3-7-Eden-年轻代的介绍" class="headerlink" title="3.3.7 Eden 年轻代的介绍"></a>3.3.7 Eden 年轻代的介绍</h4><p>当我们 new 一个对象后，会先放到 Eden 划分出来的一块作为存储空间的内存，但是我们知道对堆内存是线程共享的，所以有可能会出现两个对象共用一个内存的情况。这里 JVM 的处理是每个线程都会预先申请好一块连续的内存空间并规定了对象存放的位置，而如果空间不足会再申请多块内存空间。这个操作我们会称作 TLAB，有兴趣可以了解一下。</p><p>当 Eden 空间满了之后，会触发一个叫做 Minor GC（就是一个发生在年轻代的 GC）的操作，存活下来的对象移动到 Survivor0 区。Survivor0 区满后触发 Minor GC，就会将存活对象移动到 Survivor1 区，此时还会把 from 和 to 两个指针交换，这样保证了一段时间内总有一个 survivor 区为空且 to 所指向的 survivor 区为空。经过多次的 Minor GC 后仍然存活的对象（<strong>这里的存活判断是 15 次，对应到虚拟机参数为 -XX:MaxTenuringThreshold 。为什么是 15，因为 HotSpot 会在对象投中的标记字段里记录年龄，分配到的空间仅有 4 位，所以最多只能记录到 15</strong>）会移动到老年代。老年代是存储长期存活的对象的，占满时就会触发我们最常听说的 Full GC，期间会停止所有线程等待 GC 的完成。所以对于响应要求高的应用应该尽量去减少发生 Full GC 从而避免响应超时的问题。</p><p>而且当老年区执行了 full gc 之后仍然无法进行对象保存的操作，就会产生 OOM，这时候就是虚拟机中的堆内存不足，原因可能会是堆内存设置的大小过小，这个可以通过参数-Xms、-Xms 来调整。也可能是代码中创建的对象大且多，而且它们一直在被引用从而长时间垃圾收集无法收集它们。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256604-050d1844-9744-42d0-8e92-6bfea8662c4e.png#align=left&display=inline&height=584&margin=%5Bobject%20Object%5D&originHeight=584&originWidth=566&size=0&status=done&style=none&width=566"></p><p>补充说明：关于-XX:TargetSurvivorRatio 参数的问题。其实也不一定是要满足-XX:MaxTenuringThreshold 才移动到老年代。可以举个例子：如对象年龄 5 的占 30%，年龄 6 的占 36%，年龄 7 的占 34%，加入某个年龄段（如例子中的年龄 6）后，总占用超过 Survivor 空间*TargetSurvivorRatio 的时候，从该年龄段开始及大于的年龄对象就要进入老年代（即例子中的年龄 6 对象，就是年龄 6 和年龄 7 晋升到老年代），这时候无需等到 MaxTenuringThreshold 中要求的 15</p><h4 id="3-3-8-如何判断一个对象需要被干掉"><a href="#3-3-8-如何判断一个对象需要被干掉" class="headerlink" title="3.3.8 如何判断一个对象需要被干掉"></a>3.3.8 如何判断一个对象需要被干掉</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256606-8db82e49-4633-4af3-ab05-3916a6b2b958.png#align=left&display=inline&height=531&margin=%5Bobject%20Object%5D&originHeight=531&originWidth=693&size=0&status=done&style=none&width=693"></p><p>图中程序计数器、虚拟机栈、本地方法栈，3 个区域随着线程的生存而生存的。内存分配和回收都是确定的。随着线程的结束内存自然就被回收了，因此不需要考虑垃圾回收的问题。而 Java 堆和方法区则不一样，各线程共享，内存的分配和回收都是动态的。因此垃圾收集器所关注的都是堆和方法这部分内存。</p><p>在进行回收前就要判断哪些对象还存活，哪些已经死去。下面介绍两个基础的计算方法</p><p>1.引用计数器计算：给对象添加一个引用计数器，每次引用这个对象时计数器加一，引用失效时减一，计数器等于 0 时就是不会再次使用的。不过这个方法有一种情况就是出现对象的循环引用时 GC 没法回收。</p><p>2.可达性分析计算：这是一种类似于二叉树的实现，将一系列的 GC ROOTS 作为起始的存活对象集，从这个节点往下搜索，搜索所走过的路径成为引用链，把能被该集合引用到的对象加入到集合中。搜索当一个对象到 GC Roots 没有使用任何引用链时，则说明该对象是不可用的。主流的商用程序语言，例如 Java，C#等都是靠这招去判定对象是否存活的。</p><p>（了解一下即可）在 Java 语言汇总能作为 GC Roots 的对象分为以下几种：</p><ol><li>虚拟机栈（栈帧中的本地方法表）中引用的对象（局部变量）</li><li>方法区中静态变量所引用的对象（静态变量）</li><li>方法区中常量引用的对象</li><li>本地方法栈（即 native 修饰的方法）中 JNI 引用的对象（JNI 是 Java 虚拟机调用对应的 C 函数的方式，通过 JNI 函数也可以创建新的 Java 对象。且 JNI 对于对象的局部引用或者全局引用都会把它们指向的对象都标记为不可回收）</li><li>已启动的且未终止的 Java 线程</li></ol><p>这种方法的优点是能够解决循环引用的问题，可它的实现需要耗费大量资源和时间，也需要 GC（它的分析过程引用关系不能发生变化，所以需要停止所有进程）</p><h4 id="3-3-9-如何宣告一个对象的真正死亡"><a href="#3-3-9-如何宣告一个对象的真正死亡" class="headerlink" title="3.3.9 如何宣告一个对象的真正死亡"></a>3.3.9 如何宣告一个对象的真正死亡</h4><p>首先必须要提到的是一个名叫 <strong>finalize()</strong> 的方法</p><p>finalize()是 Object 类的一个方法、一个对象的 finalize()方法只会被系统自动调用一次，经过 finalize()方法逃脱死亡的对象，第二次不会再调用。</p><p>补充一句：并不提倡在程序中调用 finalize()来进行自救。建议忘掉 Java 程序中该方法的存在。因为它执行的时间不确定，甚至是否被执行也不确定（Java 程序的不正常退出），而且运行代价高昂，无法保证各个对象的调用顺序（甚至有不同线程中调用）。在 Java9 中已经被标记为 <strong>deprecated</strong> ，且 java.lang.ref.Cleaner（也就是强、软、弱、幻象引用的那一套）中已经逐步替换掉它，会比 finalize 来的更加的轻量及可靠。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256634-390174b6-fa3c-46d8-ad3a-23d344d977ec.png#align=left&display=inline&height=169&margin=%5Bobject%20Object%5D&originHeight=169&originWidth=466&size=0&status=done&style=none&width=466"></p><p>判断一个对象的死亡至少需要两次标记</p><ol><li>如果对象进行可达性分析之后没发现与 GC Roots 相连的引用链，那它将会第一次标记并且进行一次筛选。判断的条件是决定这个对象是否有必要执行 finalize()方法。如果对象有必要执行 finalize()方法，则被放入 F-Queue 队列中。</li><li>GC 对 F-Queue 队列中的对象进行二次标记。如果对象在 finalize()方法中重新与引用链上的任何一个对象建立了关联，那么二次标记时则会将它移出“即将回收”集合。如果此时对象还没成功逃脱，那么只能被回收了。</li></ol><p>如果确定对象已经死亡，我们又该如何回收这些垃圾呢</p><h3 id="3-4-垃圾回收算法"><a href="#3-4-垃圾回收算法" class="headerlink" title="3.4 垃圾回收算法"></a>3.4 垃圾回收算法</h3><p>不会非常详细的展开，常用的有标记清除，复制，标记整理和分代收集算法</p><h4 id="3-4-1-标记清除算法"><a href="#3-4-1-标记清除算法" class="headerlink" title="3.4.1 标记清除算法"></a>3.4.1 标记清除算法</h4><p>标记清除算法就是分为“标记”和“清除”两个阶段。标记出所有需要回收的对象，标记结束后统一回收。这个套路很简单，也存在不足，后续的算法都是根据这个基础来加以改进的。</p><p>其实它就是把已死亡的对象标记为空闲内存，然后记录在一个空闲列表中，当我们需要 new 一个对象时，内存管理模块会从空闲列表中寻找空闲的内存来分给新的对象。</p><p>不足的方面就是标记和清除的效率比较低下。且这种做法会让内存中的碎片非常多。这个导致了如果我们需要使用到较大的内存块时，无法分配到足够的连续内存。比如下图</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256587-08085739-15e8-4a1b-a43d-653f4466234c.png#align=left&display=inline&height=405&margin=%5Bobject%20Object%5D&originHeight=405&originWidth=693&size=0&status=done&style=none&width=693"></p><p>此时可使用的内存块都是零零散散的，导致了刚刚提到的大内存对象问题</p><h4 id="3-4-2-复制算法"><a href="#3-4-2-复制算法" class="headerlink" title="3.4.2 复制算法"></a>3.4.2 复制算法</h4><p>为了解决效率问题，复制算法就出现了。它将可用内存按容量划分成两等分，每次只使用其中的一块。和 survivor 一样也是用 from 和 to 两个指针这样的玩法。fromPlace 存满了，就把存活的对象 copy 到另一块 toPlace 上，然后交换指针的内容。这样就解决了碎片的问题。</p><p>这个算法的代价就是把内存缩水了，这样堆内存的使用效率就会变得十分低下了</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256608-8f2c5a13-425f-4fe0-bded-735eeaa19c62.png#align=left&display=inline&height=406&margin=%5Bobject%20Object%5D&originHeight=406&originWidth=693&size=0&status=done&style=none&width=693"></p><p>不过它们分配的时候也不是按照 1:1 这样进行分配的，就类似于 Eden 和 Survivor 也不是等价分配是一个道理。</p><h4 id="3-4-3-标记整理算法"><a href="#3-4-3-标记整理算法" class="headerlink" title="3.4.3 标记整理算法"></a>3.4.3 标记整理算法</h4><p>复制算法在对象存活率高的时候会有一定的效率问题，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256704-5b399104-db17-4d23-bddb-a818ff4d4f69.png#align=left&display=inline&height=416&margin=%5Bobject%20Object%5D&originHeight=416&originWidth=693&size=0&status=done&style=none&width=693"></p><h4 id="3-4-4-分代收集算法"><a href="#3-4-4-分代收集算法" class="headerlink" title="3.4.4 分代收集算法"></a>3.4.4 分代收集算法</h4><p>这种算法并没有什么新的思想，只是根据对象存活周期的不同将内存划分为几块。一般是把 Java 堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或者“标记-整理”算法来进行回收。</p><p>说白了就是八仙过海各显神通，具体问题具体分析了而已。</p><h3 id="3-5-（了解）各种各样的垃圾回收器"><a href="#3-5-（了解）各种各样的垃圾回收器" class="headerlink" title="3.5 （了解）各种各样的垃圾回收器"></a>3.5 （了解）各种各样的垃圾回收器</h3><p>HotSpot VM 中的垃圾回收器，以及适用场景<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256631-2215a98a-b0a9-4464-8452-8bf7f96933e4.png#align=left&display=inline&height=472&margin=%5Bobject%20Object%5D&originHeight=472&originWidth=693&size=0&status=done&style=none&width=693"></p><p>到 jdk8 为止，默认的垃圾收集器是 Parallel Scavenge 和 Parallel Old</p><p>从 jdk9 开始，G1 收集器成为默认的垃圾收集器<br>目前来看，G1 回收器停顿时间最短而且没有明显缺点，非常适合 Web 应用。在 jdk8 中测试 Web 应用，堆内存 6G，新生代 4.5G 的情况下，Parallel Scavenge 回收新生代停顿长达 1.5 秒。G1 回收器回收同样大小的新生代只停顿 0.2 秒。</p><h3 id="3-6-（了解）JVM-的常用参数"><a href="#3-6-（了解）JVM-的常用参数" class="headerlink" title="3.6 （了解）JVM 的常用参数"></a>3.6 （了解）JVM 的常用参数</h3><p>JVM 的参数非常之多，这里只列举比较重要的几个，通过各种各样的搜索引擎也可以得知这些信息。</p><table><thead><tr><th>参数名称</th><th>含义</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>-Xms</td><td>初始堆大小</td><td>物理内存的 1/64(&lt;1GB)</td><td>默认(MinHeapFreeRatio 参数可以调整)空余堆内存小于 40%时，JVM 就会增大堆直到-Xmx 的最大限制.</td></tr><tr><td>-Xmx</td><td>最大堆大小</td><td>物理内存的 1/4(&lt;1GB)</td><td>默认(MaxHeapFreeRatio 参数可以调整)空余堆内存大于 70%时，JVM 会减少堆直到 -Xms 的最小限制</td></tr><tr><td>-Xmn</td><td>年轻代大小(1.4or lator)</td><td></td><td>注意：此处的大小是（eden+ 2 survivor space).与 jmap -heap 中显示的 New gen 是不同的。整个堆大小=年轻代大小 + 老年代大小 + 持久代（永久代）大小.增大年轻代后,将会减小年老代大小.此值对系统性能影响较大,Sun 官方推荐配置为整个堆的 3/8</td></tr><tr><td>-XX:NewSize</td><td>设置年轻代大小(for 1.3/1.4)</td><td></td><td></td></tr><tr><td>-XX:MaxNewSize</td><td>年轻代最大值(for 1.3/1.4)</td><td></td><td></td></tr><tr><td>-XX:PermSize</td><td>设置持久代(perm gen)初始值</td><td>物理内存的 1/64</td><td></td></tr><tr><td>-XX:MaxPermSize</td><td>设置持久代最大值</td><td>物理内存的 1/4</td><td></td></tr><tr><td>-Xss</td><td>每个线程的堆栈大小</td><td></td><td>JDK5.0 以后每个线程堆栈大小为 1M,以前每个线程堆栈大小为 256K.更具应用的线程所需内存大小进行 调整.在相同物理内存下,减小这个值能生成更多的线程.但是操作系统对一个进程内的线程数还是有限制的,不能无限生成,经验值在 3000~5000 左右一般小的应用， 如果栈不是很深， 应该是 128k 够用的 大的应用建议使用 256k。这个选项对性能影响比较大，需要严格的测试。（校长）和 threadstacksize 选项解释很类似,官方文档似乎没有解释,在论坛中有这样一句话:-Xss is translated in a VM flag named ThreadStackSize”一般设置这个值就可以了</td></tr><tr><td>-XX:NewRatio</td><td>年轻代(包括 Eden 和两个 Survivor 区)与年老代的比值(除去持久代)</td><td></td><td>-XX:NewRatio=4 表示年轻代与年老代所占比值为 1:4,年轻代占整个堆栈的 1/5Xms=Xmx 并且设置了 Xmn 的情况下，该参数不需要进行设置。</td></tr><tr><td>-XX:SurvivorRatio</td><td>Eden 区与 Survivor 区的大小比值</td><td></td><td>设置为 8,则两个 Survivor 区与一个 Eden 区的比值为 2:8,一个 Survivor 区占整个年轻代的 1/10</td></tr><tr><td>-XX:+DisableExplicitGC</td><td>关闭 System.gc()</td><td></td><td>这个参数需要严格的测试</td></tr><tr><td>-XX:PretenureSizeThreshold</td><td>对象超过多大是直接在旧生代分配</td><td>0</td><td>单位字节 新生代采用 Parallel ScavengeGC 时无效另一种直接在旧生代分配的情况是大的数组对象,且数组中无外部引用对象.</td></tr><tr><td>-XX:ParallelGCThreads</td><td>并行收集器的线程数</td><td></td><td>此值最好配置与处理器数目相等 同样适用于 CMS</td></tr><tr><td>-XX:MaxGCPauseMillis</td><td>每次年轻代垃圾回收的最长时间(最大暂停时间)</td><td></td><td>如果无法满足此时间,JVM 会自动调整年轻代大小,以满足此值.</td></tr></tbody></table><p>其实还有一些打印及 CMS 方面的参数，这里就不以一一列举了</p><h2 id="四、关于-JVM-调优的一些方面"><a href="#四、关于-JVM-调优的一些方面" class="headerlink" title="四、关于 JVM 调优的一些方面"></a>四、关于 JVM 调优的一些方面</h2><p>根据刚刚涉及的 jvm 的知识点，我们可以尝试对 JVM 进行调优，主要就是堆内存那块</p><p>所有线程共享数据区大小=新生代大小 + 年老代大小 + 持久代大小。持久代一般固定大小为 64m。所以 java 堆中增大年轻代后，将会减小年老代大小（因为老年代的清理是使用 fullgc，所以老年代过小的话反而是会增多 fullgc 的）。此值对系统性能影响较大，Sun 官方推荐配置为 java 堆的 3/8。</p><h3 id="4-1-调整最大堆内存和最小堆内存"><a href="#4-1-调整最大堆内存和最小堆内存" class="headerlink" title="4.1 调整最大堆内存和最小堆内存"></a>4.1 调整最大堆内存和最小堆内存</h3><p>-Xmx –Xms：指定 java 堆最大值（默认值是物理内存的 1/4(&lt;1GB)）和初始 java 堆最小值（默认值是物理内存的 1/64(&lt;1GB))</p><p>默认(MinHeapFreeRatio 参数可以调整)空余堆内存小于 40%时，JVM 就会增大堆直到-Xmx 的最大限制.，默认(MaxHeapFreeRatio 参数可以调整)空余堆内存大于 70%时，JVM 会减少堆直到 -Xms 的最小限制。简单点来说，你不停地往堆内存里面丢数据，等它剩余大小小于 40%了，JVM 就会动态申请内存空间不过会小于-Xmx，如果剩余大小大于 70%，又会动态缩小不过不会小于–Xms。就这么简单</p><p>开发过程中，通常会将 -Xms 与 -Xmx 两个参数的配置相同的值，其目的是为了能够在 java 垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源。</p><p>我们执行下面的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;Xmx=&quot; + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + &quot;M&quot;);    //系统的最大空间</span><br><span class="line">System.out.println(&quot;free mem=&quot; + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + &quot;M&quot;);  //系统的空闲空间</span><br><span class="line">System.out.println(&quot;total mem=&quot; + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + &quot;M&quot;);  //当前可用的总空间</span><br></pre></td></tr></table></figure><p>注意：此处设置的是 Java 堆大小，也就是新生代大小 + 老年代大小<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256636-edae0565-30e9-43e5-abc8-8cc0a64bf19a.png#align=left&display=inline&height=693&margin=%5Bobject%20Object%5D&originHeight=693&originWidth=1412&size=0&status=done&style=none&width=1412"></p><p>设置一个 VM options 的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xmx20m -Xms5m -XX:+PrintGCDetails</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256615-df467340-17d2-41b0-9f45-43e277106e80.png#align=left&display=inline&height=387&margin=%5Bobject%20Object%5D&originHeight=387&originWidth=1334&size=0&status=done&style=none&width=1334"></p><p>再次启动 main 方法</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256650-9a03a1cd-ee66-4ef6-ba77-fffb4dc2b5a2.png#align=left&display=inline&height=579&margin=%5Bobject%20Object%5D&originHeight=579&originWidth=1350&size=0&status=done&style=none&width=1350"><br>这里 GC 弹出了一个 Allocation Failure 分配失败，这个事情发生在 PSYoungGen，也就是年轻代中</p><p>这时候申请到的内存为 18M，空闲内存为 4.214195251464844M</p><p>我们此时创建一个字节数组看看，执行下面的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte[] b = new byte[1 * 1024 * 1024];</span><br><span class="line">System.out.println(&quot;分配了1M空间给数组&quot;);</span><br><span class="line">System.out.println(&quot;Xmx=&quot; + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + &quot;M&quot;);  //系统的最大空间</span><br><span class="line">System.out.println(&quot;free mem=&quot; + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + &quot;M&quot;);  //系统的空闲空间</span><br><span class="line">System.out.println(&quot;total mem=&quot; + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + &quot;M&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256627-b332f66c-a26f-462a-8a77-4acb77da7ed5.png#align=left&display=inline&height=488&margin=%5Bobject%20Object%5D&originHeight=488&originWidth=1128&size=0&status=done&style=none&width=1128"></p><p>此时 free memory 就又缩水了，不过 total memory 是没有变化的。Java 会尽可能将 total mem 的值维持在最小堆内存大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">byte[] b = new byte[10 * 1024 * 1024];</span><br><span class="line">System.out.println(&quot;分配了10M空间给数组&quot;);</span><br><span class="line">System.out.println(&quot;Xmx=&quot; + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + &quot;M&quot;);  //系统的最大空间</span><br><span class="line">System.out.println(&quot;free mem=&quot; + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + &quot;M&quot;);  //系统的空闲空间</span><br><span class="line">System.out.println(&quot;total mem=&quot; + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + &quot;M&quot;);  //当前可用的总空间</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256664-7ef34de9-8a93-420d-aa5f-ca2fdf497dea.png#align=left&display=inline&height=490&margin=%5Bobject%20Object%5D&originHeight=490&originWidth=1143&size=0&status=done&style=none&width=1143"></p><p>这时候我们创建了一个 10M 的字节数据，这时候最小堆内存是顶不住的。我们会发现现在的 total memory 已经变成了 15M，这就是已经申请了一次内存的结果。</p><p>此时我们再跑一下这个代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.gc();</span><br><span class="line">System.out.println(&quot;Xmx=&quot; + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + &quot;M&quot;);    //系统的最大空间</span><br><span class="line">System.out.println(&quot;free mem=&quot; + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + &quot;M&quot;);  //系统的空闲空间</span><br><span class="line">System.out.println(&quot;total mem=&quot; + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + &quot;M&quot;);  //当前可用的总空间</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583682256624-db06f2d9-9cf3-47c3-8c99-4d0b362ef907.png#align=left&display=inline&height=470&margin=%5Bobject%20Object%5D&originHeight=470&originWidth=1638&size=0&status=done&style=none&width=1638"></p><p>此时我们手动执行了一次 fullgc，此时 total memory 的内存空间又变回 5.5M 了，此时又是把申请的内存释放掉的结果。</p><h3 id="4-2-调整新生代和老年代的比值"><a href="#4-2-调整新生代和老年代的比值" class="headerlink" title="4.2 调整新生代和老年代的比值"></a>4.2 调整新生代和老年代的比值</h3><p>-XX:NewRatio — 新生代（eden+2*Survivor）和老年代（不包含永久区）的比值</p><p>例如：-XX:NewRatio=4，表示新生代:老年代=1:4，即新生代占整个堆的 1/5。在 Xms=Xmx 并且设置了 Xmn 的情况下，该参数不需要进行设置。</p><h3 id="4-3-调整-Survivor-区和-Eden-区的比值"><a href="#4-3-调整-Survivor-区和-Eden-区的比值" class="headerlink" title="4.3 调整 Survivor 区和 Eden 区的比值"></a>4.3 调整 Survivor 区和 Eden 区的比值</h3><p>-XX:SurvivorRatio（幸存代）— 设置两个 Survivor 区和 eden 的比值</p><p>例如：8，表示两个 Survivor:eden=2:8，即一个 Survivor 占年轻代的 1/10</p><h3 id="4-4-设置年轻代和老年代的大小"><a href="#4-4-设置年轻代和老年代的大小" class="headerlink" title="4.4 设置年轻代和老年代的大小"></a>4.4 设置年轻代和老年代的大小</h3><p>-XX:NewSize — 设置年轻代大小</p><p>-XX:MaxNewSize — 设置年轻代最大值</p><p>可以通过设置不同参数来测试不同的情况，反正最优解当然就是官方的 Eden 和 Survivor 的占比为 8:1:1，然后在刚刚介绍这些参数的时候都已经附带了一些说明，感兴趣的也可以看看。反正最大堆内存和最小堆内存如果数值不同会导致多次的 gc，需要注意。</p><h3 id="4-5-小总结"><a href="#4-5-小总结" class="headerlink" title="4.5 小总结"></a>4.5 小总结</h3><p>根据实际事情调整新生代和幸存代的大小，官方推荐新生代占 java 堆的 3/8，幸存代占新生代的 1/10</p><p>在 OOM 时，记得 Dump 出堆，确保可以排查现场问题，通过下面命令你可以输出一个.dump 文件，这个文件可以使用 VisualVM 或者 Java 自带的 Java VisualVM 工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xmx20m -Xms5m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=你要输出的日志路径</span><br></pre></td></tr></table></figure><p>一般我们也可以通过编写脚本的方式来让 OOM 出现时给我们报个信，可以通过发送邮件或者重启程序等来解决。</p><h3 id="4-6-永久区的设置"><a href="#4-6-永久区的设置" class="headerlink" title="4.6 永久区的设置"></a>4.6 永久区的设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:PermSize -XX:MaxPermSize</span><br></pre></td></tr></table></figure><p>初始空间（默认为物理内存的 1/64）和最大空间（默认为物理内存的 1/4）。也就是说，jvm 启动时，永久区一开始就占用了 PermSize 大小的空间，如果空间还不够，可以继续扩展，但是不能超过 MaxPermSize，否则会 OOM。</p><p>tips：如果堆空间没有用完也抛出了 OOM，有可能是永久区导致的。堆空间实际占用非常少，但是永久区溢出 一样抛出 OOM。</p><h3 id="4-7-JVM-的栈参数调优"><a href="#4-7-JVM-的栈参数调优" class="headerlink" title="4.7 JVM 的栈参数调优"></a>4.7 JVM 的栈参数调优</h3><h4 id="4-7-1-调整每个线程栈空间的大小"><a href="#4-7-1-调整每个线程栈空间的大小" class="headerlink" title="4.7.1 调整每个线程栈空间的大小"></a>4.7.1 调整每个线程栈空间的大小</h4><p>可以通过-Xss：调整每个线程栈空间的大小</p><p>JDK5.0 以后每个线程堆栈大小为 1M，以前每个线程堆栈大小为 256K。在相同物理内存下,减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000 左右</p><h4 id="4-7-2-设置线程栈的大小"><a href="#4-7-2-设置线程栈的大小" class="headerlink" title="4.7.2 设置线程栈的大小"></a>4.7.2 设置线程栈的大小</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XXThreadStackSize：</span><br><span class="line">    设置线程栈的大小(0 means use default stack size)</span><br></pre></td></tr></table></figure><p>这些参数都是可以通过自己编写程序去简单测试的，这里碍于篇幅问题就不再提供 demo 了</p><h3 id="4-8-可以直接跳过了-JVM-其他参数介绍"><a href="#4-8-可以直接跳过了-JVM-其他参数介绍" class="headerlink" title="4.8 (可以直接跳过了)JVM 其他参数介绍"></a>4.8 (可以直接跳过了)JVM 其他参数介绍</h3><p>形形色色的参数很多，就不会说把所有都扯个遍了，因为大家其实也不会说一定要去深究到底。</p><h4 id="4-8-1-设置内存页的大小"><a href="#4-8-1-设置内存页的大小" class="headerlink" title="4.8.1 设置内存页的大小"></a>4.8.1 设置内存页的大小</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XXThreadStackSize：</span><br><span class="line">    设置内存页的大小，不可设置过大，会影响Perm的大小</span><br></pre></td></tr></table></figure><h4 id="4-8-2-设置原始类型的快速优化"><a href="#4-8-2-设置原始类型的快速优化" class="headerlink" title="4.8.2 设置原始类型的快速优化"></a>4.8.2 设置原始类型的快速优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseFastAccessorMethods：</span><br><span class="line">    设置原始类型的快速优化</span><br></pre></td></tr></table></figure><h4 id="4-8-3-设置关闭手动-GC"><a href="#4-8-3-设置关闭手动-GC" class="headerlink" title="4.8.3 设置关闭手动 GC"></a>4.8.3 设置关闭手动 GC</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+DisableExplicitGC：</span><br><span class="line">    设置关闭System.gc()(这个参数需要严格的测试)</span><br></pre></td></tr></table></figure><h4 id="4-8-4-设置垃圾最大年龄"><a href="#4-8-4-设置垃圾最大年龄" class="headerlink" title="4.8.4 设置垃圾最大年龄"></a>4.8.4 设置垃圾最大年龄</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-XX:MaxTenuringThreshold</span><br><span class="line">    设置垃圾最大年龄。如果设置为0的话,则年轻代对象不经过Survivor区,直接进入年老代.</span><br><span class="line">    对于年老代比较多的应用,可以提高效率。如果将此值设置为一个较大值,</span><br><span class="line">    则年轻代对象会在Survivor区进行多次复制,这样可以增加对象再年轻代的存活时间,</span><br><span class="line">    增加在年轻代即被回收的概率。该参数只有在串行GC时才有效.</span><br></pre></td></tr></table></figure><h4 id="4-8-5-加快编译速度"><a href="#4-8-5-加快编译速度" class="headerlink" title="4.8.5 加快编译速度"></a>4.8.5 加快编译速度</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+AggressiveOpts</span><br></pre></td></tr></table></figure><p>加快编译速度</p><h4 id="4-8-6-改善锁机制性能"><a href="#4-8-6-改善锁机制性能" class="headerlink" title="4.8.6 改善锁机制性能"></a>4.8.6 改善锁机制性能</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseBiasedLocking</span><br></pre></td></tr></table></figure><h4 id="4-8-7-禁用垃圾回收"><a href="#4-8-7-禁用垃圾回收" class="headerlink" title="4.8.7 禁用垃圾回收"></a>4.8.7 禁用垃圾回收</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xnoclassgc</span><br></pre></td></tr></table></figure><h4 id="4-8-8-设置堆空间存活时间"><a href="#4-8-8-设置堆空间存活时间" class="headerlink" title="4.8.8 设置堆空间存活时间"></a>4.8.8 设置堆空间存活时间</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:SoftRefLRUPolicyMSPerMB</span><br><span class="line">    设置每兆堆空闲空间中SoftReference的存活时间，默认值是1s。</span><br></pre></td></tr></table></figure><h4 id="4-8-9-设置对象直接分配在老年代"><a href="#4-8-9-设置对象直接分配在老年代" class="headerlink" title="4.8.9 设置对象直接分配在老年代"></a>4.8.9 设置对象直接分配在老年代</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:PretenureSizeThreshold</span><br><span class="line">    设置对象超过多大时直接在老年代分配，默认值是0。</span><br></pre></td></tr></table></figure><h4 id="4-8-10-设置-TLAB-占-eden-区的比例"><a href="#4-8-10-设置-TLAB-占-eden-区的比例" class="headerlink" title="4.8.10 设置 TLAB 占 eden 区的比例"></a>4.8.10 设置 TLAB 占 eden 区的比例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:TLABWasteTargetPercent</span><br><span class="line">    设置TLAB占eden区的百分比，默认值是1% 。</span><br></pre></td></tr></table></figure><h4 id="4-8-11-设置是否优先-YGC"><a href="#4-8-11-设置是否优先-YGC" class="headerlink" title="4.8.11 设置是否优先 YGC"></a>4.8.11 设置是否优先 YGC</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+CollectGen0First</span><br><span class="line">    设置FullGC时是否先YGC，默认值是false。</span><br></pre></td></tr></table></figure><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>真的扯了很久这东西，参考了多方的资料，有极客时间的《深入拆解虚拟机》和《Java 核心技术面试精讲》，也有百度，也有自己在学习的一些线上课程的总结。希望对你有所帮助，谢谢。</p>]]></content>
    
    
    <summary type="html">Jvm的总览介绍</summary>
    
    
    
    <category term="Java" scheme="https://www.khalidlife.com/categories/Java/"/>
    
    <category term="Jvm" scheme="https://www.khalidlife.com/categories/Java/Jvm/"/>
    
    
    <category term="Jvm" scheme="https://www.khalidlife.com/tags/Jvm/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识</title>
    <link href="https://www.khalidlife.com/posts/hggtss.html"/>
    <id>https://www.khalidlife.com/posts/hggtss.html</id>
    <published>2020-03-08T12:43:50.000Z</published>
    <updated>2022-11-29T07:05:59.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-关于-JVM-JDK-和-JRE-最详细通俗的解答"><a href="#1-关于-JVM-JDK-和-JRE-最详细通俗的解答" class="headerlink" title="1. 关于 JVM JDK 和 JRE 最详细通俗的解答"></a>1. 关于 JVM JDK 和 JRE 最详细通俗的解答</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><p><strong>什么是字节码?采用字节码的好处是什么?</strong></p><blockquote><p>在 Java 中，JVM 可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p></blockquote><p><strong>Java 程序从源代码到运行一般有下面 3 步：</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583669614527-f03d39ba-6994-4bec-acf7-d4b3f59f9f8d.png#align=left&display=inline&height=172&originHeight=172&originWidth=767&size=0&status=done&style=none&width=767"></p><p>我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</p><blockquote><p>HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。</p></blockquote><p><strong>总结：</strong></p><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p><h3 id="JDK-和-JRE"><a href="#JDK-和-JRE" class="headerlink" title="JDK 和 JRE"></a>JDK 和 JRE</h3><p>JDK 是 Java Development Kit，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p>JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。</p><p>如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。</p><h2 id="2-Oracle-JDK-和-OpenJDK-的对比"><a href="#2-Oracle-JDK-和-OpenJDK-的对比" class="headerlink" title="2. Oracle JDK 和 OpenJDK 的对比"></a>2. Oracle JDK 和 OpenJDK 的对比</h2><p>可能在看这个问题之前很多人和我一样并没有接触和使用过 OpenJDK 。那么 Oracle 和 OpenJDK 之间是否存在重大差异？下面我通过收集到的一些资料，为你解答这个被很多人忽视的问题。</p><p>对于 Java 7，没什么关键的地方。OpenJDK 项目主要基于 Sun 捐赠的 HotSpot 源代码。此外，OpenJDK 被选为 Java 7 的参考实现，由 Oracle 工程师维护。关于 JVM，JDK，JRE 和 OpenJDK 之间的区别，Oracle 博客帖子在 2012 年有一个更详细的答案：</p><blockquote><p>问：OpenJDK 存储库中的源代码与用于构建 Oracle JDK 的代码之间有什么区别？<br>答：非常接近 - 我们的 Oracle JDK 版本构建过程基于 OpenJDK 7 构建，只添加了几个部分，例如部署代码，其中包括 Oracle 的 Java 插件和 Java WebStart 的实现，以及一些封闭的源代码派对组件，如图形光栅化器，一些开源的第三方组件，如 Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源 Oracle JDK 的所有部分，除了我们考虑商业功能的部分。</p></blockquote><p><strong>总结：</strong></p><ol><li>Oracle JDK 大概每 6 个月发一次主要版本，而 OpenJDK 版本大概每三个月发布一次。但这不是固定的，我觉得了解这个没啥用处。详情参见：<a href="https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence%E3%80%82">https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence。</a></li><li>OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的；</li><li>Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择 Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题；</li><li>在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能；</li><li>Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</li><li>Oracle JDK 根据二进制代码许可协议获得许可，而 OpenJDK 根据 GPL v2 许可获得许可。</li></ol><h2 id="3-Java-和-C-的区别"><a href="#3-Java-和-C-的区别" class="headerlink" title="3. Java 和 C++的区别?"></a>3. Java 和 C++的区别?</h2><p>我知道很多人没学过 C++，但是面试官就是没事喜欢拿咱们 Java 和 C++ 比呀！没办法！！！就算没学过 C++，也要记下来！</p><ul><li>都是面向对象的语言，都支持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li><li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li><li><strong>在 C 语言中，字符串或字符数组最后都会有一个额外的字符‘\0’来表示结束。但是，Java 语言中没有结束符这一概念。</strong> 这是一个值得深度思考的问题，具体原因推荐看这篇文章： <a href="https://blog.csdn.net/sszgg2006/article/details/49148189">https://blog.csdn.net/sszgg2006/article/details/49148189</a></li></ul><h2 id="4-什么是-Java-程序的主类-应用程序和小程序的主类有何不同"><a href="#4-什么是-Java-程序的主类-应用程序和小程序的主类有何不同" class="headerlink" title="4. 什么是 Java 程序的主类 应用程序和小程序的主类有何不同?"></a>4. 什么是 Java 程序的主类 应用程序和小程序的主类有何不同?</h2><p>一个程序中可以有多个类，但只能有一个类是主类。在 Java 应用程序中，这个主类是指包含 main（）方法的类。而在 Java 小程序中，这个主类是一个继承自系统类 JApplet 或 Applet 的子类。应用程序的主类不一定要求是 public 类，但小程序的主类要求必须是 public 类。主类是 Java 程序执行的入口点。</p><h2 id="5-Java-应用程序与小程序之间有哪些差别"><a href="#5-Java-应用程序与小程序之间有哪些差别" class="headerlink" title="5. Java 应用程序与小程序之间有哪些差别?"></a>5. Java 应用程序与小程序之间有哪些差别?</h2><p>简单说应用程序是从主线程启动(也就是 <code>main()</code> 方法)。applet 小程序没有 <code>main()</code> 方法，主要是嵌在浏览器页面上运行(调用<code>init()</code>或者<code>run()</code>来启动)，嵌入浏览器这点跟 flash 的小游戏类似。</p><h2 id="6-字符型常量和字符串常量的区别"><a href="#6-字符型常量和字符串常量的区别" class="headerlink" title="6. 字符型常量和字符串常量的区别?"></a>6. 字符型常量和字符串常量的区别?</h2><ol><li>形式上: 字符常量是单引号引起的一个字符; 字符串常量是双引号引起的若干个字符</li><li>含义上: 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)</li><li>占内存大小 字符常量只占 2 个字节; 字符串常量占若干个字节 (<strong>注意： char 在 Java 中占两个字节</strong>)</li></ol><blockquote><p>java 编程思想第四版：2.2.2 节<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1082206/1583669614412-482ba498-44dc-4875-8cab-15b3e68b4763.jpeg#align=left&display=inline&height=392&originHeight=392&originWidth=868&size=0&status=done&style=none&width=868"></p></blockquote><h2 id="7-构造器-Constructor-是否可被-override"><a href="#7-构造器-Constructor-是否可被-override" class="headerlink" title="7. 构造器 Constructor 是否可被 override?"></a>7. 构造器 Constructor 是否可被 override?</h2><p>Constructor 不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。</p><h2 id="8-重载和重写的区别"><a href="#8-重载和重写的区别" class="headerlink" title="8. 重载和重写的区别"></a>8. 重载和重写的区别</h2><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</p><p>下面是《Java 核心技术》对重载这个概念的介绍：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1082206/1583669614489-024401db-fbc7-4a70-a521-b938594472fe.jpeg#align=left&display=inline&height=1548&originHeight=1548&originWidth=2308&size=0&status=done&style=none&width=2308"></p><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>重写是子类对父类的允许访问的方法的实现过程进行重新编写,发生在子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。另外，如果父类方法访问修饰符为 private 则子类就不能重写该方法。<strong>也就是说方法提供的行为改变，而方法的外貌并没有改变。</strong></p><h2 id="9-Java-面向对象编程三大特性-封装-继承-多态"><a href="#9-Java-面向对象编程三大特性-封装-继承-多态" class="headerlink" title="9. Java 面向对象编程三大特性: 封装 继承 多态"></a>9. Java 面向对象编程三大特性: 封装 继承 多态</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。</p><p><strong>关于继承如下 3 点请记住：</strong></p><ol><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。（以后介绍）。</li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>在 Java 中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><h2 id="10-String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的"><a href="#10-String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的" class="headerlink" title="10. String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?"></a>10. String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</h2><p><strong>可变性</strong></p><p>简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，<code>private final char value[]</code>，所以 String 对象是不可变的。而 StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 final 关键字修饰，所以这两种对象都是可变的。</p><p>StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的，大家可以自行查阅源码。</p><p><code>AbstractStringBuilder.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value is used for character storage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">char</span>[] value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The count is the number of characters used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>线程安全性</strong></p><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</p><p><strong>性能</strong></p><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>对于三者使用的总结：</strong></p><ol><li>操作少量的数据: 适用 String</li><li>单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer</li></ol><h2 id="11-自动装箱与拆箱"><a href="#11-自动装箱与拆箱" class="headerlink" title="11. 自动装箱与拆箱"></a>11. 自动装箱与拆箱</h2><ul><li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li><li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li></ul><h2 id="12-在一个静态方法内调用一个非静态成员为什么是非法的"><a href="#12-在一个静态方法内调用一个非静态成员为什么是非法的" class="headerlink" title="12. 在一个静态方法内调用一个非静态成员为什么是非法的?"></a>12. 在一个静态方法内调用一个非静态成员为什么是非法的?</h2><p>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><h2 id="13-在-Java-中定义一个不做事且没有参数的构造方法的作用"><a href="#13-在-Java-中定义一个不做事且没有参数的构造方法的作用" class="headerlink" title="13. 在 Java 中定义一个不做事且没有参数的构造方法的作用"></a>13. 在 Java 中定义一个不做事且没有参数的构造方法的作用</h2><p>Java 程序在执行子类的构造方法之前，如果没有用 <code>super()</code>来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 <code>super()</code>来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。</p><h2 id="14-import-java-和-javax-有什么区别？"><a href="#14-import-java-和-javax-有什么区别？" class="headerlink" title="14. import java 和 javax 有什么区别？"></a>14. import java 和 javax 有什么区别？</h2><p>刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来使用。然而随着时间的推移，javax 逐渐地扩展成为 Java API 的组成部分。但是，将扩展从 javax 包移动到 java 包确实太麻烦了，最终会破坏一堆现有的代码。因此，最终决定 javax 包将成为标准 API 的一部分。</p><p>所以，实际上 java 和 javax 没有区别。这都是一个名字。</p><h2 id="15-接口和抽象类的区别是什么？"><a href="#15-接口和抽象类的区别是什么？" class="headerlink" title="15. 接口和抽象类的区别是什么？"></a>15. 接口和抽象类的区别是什么？</h2><ol><li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</li><li>接口中除了 static、final 变量，不能有其他变量，而抽象类中则不一定。</li><li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口。</li><li>接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用 private 关键字修饰！）。</li><li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</li></ol><blockquote><p>备注：</p><ol><li>在 JDK8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见 issue:<a href="https://github.com/Snailclimb/JavaGuide/issues/146">https://github.com/Snailclimb/JavaGuide/issues/146</a>。</li><li>jdk9 的接口被允许定义私有方法 。</li></ol></blockquote><p>总结一下 jdk7~jdk9 Java 中接口概念的变化（<a href="https://www.geeksforgeeks.org/private-methods-java-9-interfaces/">相关阅读</a>）：</p><ol><li>在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。</li><li>jdk8 的时候接口可以有默认方法和静态方法功能。</li><li>Jdk 9 在接口中引入了私有方法和私有静态方法。</li></ol><h2 id="16-成员变量与局部变量的区别有哪些？"><a href="#16-成员变量与局部变量的区别有哪些？" class="headerlink" title="16. 成员变量与局部变量的区别有哪些？"></a>16. 成员变量与局部变量的区别有哪些？</h2><ol><li>从语法形式上看:成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li><li>从变量在内存中的存储方式来看:如果成员变量是使用<code>static</code>修饰的，那么这个成员变量是属于类的，如果没有使用<code>static</code>修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</li><li>从变量在内存中的生存时间上看:成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</li><li>成员变量如果没有被赋初值:则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</li></ol><h2 id="17-创建一个对象用什么运算符-对象实体与对象引用有何不同"><a href="#17-创建一个对象用什么运算符-对象实体与对象引用有何不同" class="headerlink" title="17. 创建一个对象用什么运算符?对象实体与对象引用有何不同?"></a>17. 创建一个对象用什么运算符?对象实体与对象引用有何不同?</h2><p>new 运算符，new 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。</p><h2 id="18-什么是方法的返回值-返回值在类的方法里的作用是什么"><a href="#18-什么是方法的返回值-返回值在类的方法里的作用是什么" class="headerlink" title="18. 什么是方法的返回值?返回值在类的方法里的作用是什么?"></a>18. 什么是方法的返回值?返回值在类的方法里的作用是什么?</h2><p>方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用:接收出结果，使得它可以用于其他的操作！</p><h2 id="19-一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么"><a href="#19-一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么" class="headerlink" title="19. 一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?"></a>19. 一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?</h2><p>主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。</p><h2 id="20-构造方法有哪些特性？"><a href="#20-构造方法有哪些特性？" class="headerlink" title="20. 构造方法有哪些特性？"></a>20. 构造方法有哪些特性？</h2><ol><li>名字与类名相同。</li><li>没有返回值，但不能用 void 声明构造函数。</li><li>生成类的对象时自动执行，无需调用。</li></ol><h2 id="21-静态方法和实例方法有何不同"><a href="#21-静态方法和实例方法有何不同" class="headerlink" title="21. 静态方法和实例方法有何不同"></a>21. 静态方法和实例方法有何不同</h2><ol><li>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。</li><li>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。</li></ol><h2 id="22-对象的相等与指向他们的引用相等-两者有什么不同"><a href="#22-对象的相等与指向他们的引用相等-两者有什么不同" class="headerlink" title="22. 对象的相等与指向他们的引用相等,两者有什么不同?"></a>22. 对象的相等与指向他们的引用相等,两者有什么不同?</h2><p>对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。</p><h2 id="23-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是"><a href="#23-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是" class="headerlink" title="23. 在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?"></a>23. 在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?</h2><p>帮助子类做初始化工作。</p><h2 id="24-与-equals-重要"><a href="#24-与-equals-重要" class="headerlink" title="24. == 与 equals(重要)"></a>24. == 与 equals(重要)</h2><p><strong>==</strong> : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型比较的是值，引用数据类型比较的是内存地址)。</p><p><strong>equals()</strong> : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li>情况 1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li><li>情况 2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>); <span class="comment">// a 为一个引用</span></span><br><span class="line">        String b = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>); <span class="comment">// b为另一个引用,对象的内容一样</span></span><br><span class="line">        String aa = <span class="string">&quot;ab&quot;</span>; <span class="comment">// 放在常量池中</span></span><br><span class="line">        String bb = <span class="string">&quot;ab&quot;</span>; <span class="comment">// 从常量池中查找</span></span><br><span class="line">        <span class="keyword">if</span> (aa == bb) <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;aa==bb&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == b) <span class="comment">// false，非同一对象</span></span><br><span class="line">            System.out.println(<span class="string">&quot;a==b&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (a.equals(b)) <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;aEQb&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">42</span> == <span class="number">42.0</span>) &#123; <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li></ul><h2 id="25-hashCode-与-equals-重要"><a href="#25-hashCode-与-equals-重要" class="headerlink" title="25. hashCode 与 equals (重要)"></a>25. hashCode 与 equals (重要)</h2><p>面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode 方法？”</p><h3 id="hashCode（）介绍"><a href="#hashCode（）介绍" class="headerlink" title="hashCode（）介绍"></a>hashCode（）介绍</h3><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在 JDK 的 Object.java 中，这就意味着 Java 中的任何类都包含有 hashCode() 函数。</p><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><h3 id="为什么要有-hashCode"><a href="#为什么要有-hashCode" class="headerlink" title="为什么要有 hashCode"></a>为什么要有 hashCode</h3><p><strong>我们先以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：</strong> 当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与该位置其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，HashSet 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 <code>equals()</code>方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的 Java 启蒙书《Head first java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><p>通过我们可以看出：<code>hashCode()</code> 的作用就是<strong>获取哈希码</strong>，也称为散列码；它实际上是返回一个 int 整数。这个<strong>哈希码的作用</strong>是确定该对象在哈希表中的索引位置。**<code>hashCode()</code>在散列表中才有用，在其它情况下没用**。在散列表中 hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置。</p><h3 id="hashCode（）与-equals（）的相关规定"><a href="#hashCode（）与-equals（）的相关规定" class="headerlink" title="hashCode（）与 equals（）的相关规定"></a>hashCode（）与 equals（）的相关规定</h3><ol><li>如果两个对象相等，则 hashcode 一定也是相同的</li><li>两个对象相等,对两个对象分别调用 equals 方法都返回 true</li><li>两个对象有相同的 hashcode 值，它们也不一定是相等的</li><li><strong>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</strong></li><li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol><p>推荐阅读：<a href="https://www.cnblogs.com/skywang12345/p/3324958.html">Java hashCode() 和 equals()的若干问题解答</a></p><h2 id="26-为什么-Java-中只有值传递？"><a href="#26-为什么-Java-中只有值传递？" class="headerlink" title="26. 为什么 Java 中只有值传递？"></a>26. 为什么 Java 中只有值传递？</h2><p><a href="https://juejin.im/post/5e18879e6fb9a02fc63602e2">为什么 Java 中只有值传递？</a></p><h2 id="27-简述线程、程序、进程的基本概念。以及他们之间关系是什么"><a href="#27-简述线程、程序、进程的基本概念。以及他们之间关系是什么" class="headerlink" title="27. 简述线程、程序、进程的基本概念。以及他们之间关系是什么?"></a>27. 简述线程、程序、进程的基本概念。以及他们之间关系是什么?</h2><p><strong>线程</strong>与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p><strong>程序</strong>是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p><p><strong>进程</strong>是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如 CPU 时间，内存空间，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。<br>线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><h2 id="28-线程有哪些基本状态"><a href="#28-线程有哪些基本状态" class="headerlink" title="28. 线程有哪些基本状态?"></a>28. 线程有哪些基本状态?</h2><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态（图源《Java 并发编程艺术》4.1.4 节）。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583669614498-14329835-0e87-449b-a4af-e7caef325ba2.png#align=left&display=inline&height=216&originHeight=216&originWidth=805&size=0&status=done&style=none&width=805"></p><p>线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。Java 线程状态变迁如下图所示（图源《Java 并发编程艺术》4.1.4 节）：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583669614527-5d220bfd-1fa4-46ba-af20-fa428a5d8ea1.png#align=left&display=inline&height=526&originHeight=526&originWidth=775&size=0&status=done&style=none&width=775"></p><p>由上图可以看出：</p><p>线程创建之后它将处于 <strong>NEW（新建）</strong> 状态，调用 <code>start()</code> 方法后开始运行，线程这时候处于 <strong>READY（可运行）</strong> 状态。可运行状态的线程获得了 cpu 时间片（timeslice）后就处于 <strong>RUNNING（运行）</strong> 状态。</p><blockquote><p>操作系统隐藏 Java 虚拟机（JVM）中的 READY 和 RUNNING 状态，它只能看到 RUNNABLE 状态（图源：<a href="https://howtodoinjava.com/">HowToDoInJava</a>：<a href="https://howtodoinjava.com/java/multi-threading/java-thread-life-cycle-and-thread-states/">Java Thread Life Cycle and Thread States</a>），所以 Java 系统一般将这两个状态统称为 <strong>RUNNABLE（运行中）</strong> 状态 。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583669614496-0347525c-80a6-4f61-8f34-01742753c1f1.png#align=left&display=inline&height=111&originHeight=111&originWidth=526&size=0&status=done&style=none&width=526"></p><p>当线程执行 <code>wait()</code>方法之后，线程进入 <strong>WAITING（等待）</strong>状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而 <strong>TIME_WAITING(超时等待)</strong> 状态相当于在等待状态的基础上增加了超时限制，比如通过 <code>sleep（long millis）</code>方法或 <code>wait（long millis）</code>方法可以将 Java 线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到 <strong>BLOCKED（阻塞）</strong> 状态。线程在执行 Runnable 的<code>run()</code>方法之后将会进入到 <strong>TERMINATED（终止）</strong> 状态。</p><h2 id="29-关于-final-关键字的一些总结"><a href="#29-关于-final-关键字的一些总结" class="headerlink" title="29 关于 final 关键字的一些总结"></a>29 关于 final 关键字的一些总结</h2><p>final 关键字主要用在三个地方：变量、方法、类。</p><ol><li>对于一个 final 变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</li><li>当用 final 修饰一个类时，表明这个类不能被继承。final 类中的所有成员方法都会被隐式地指定为 final 方法。</li><li>使用 final 方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的 Java 实现版本中，会将 final 方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升（现在的 Java 版本已经不需要使用 final 方法进行这些优化了）。类中所有的 private 方法都隐式地指定为 final。</li></ol><h2 id="30-Java-中的异常处理"><a href="#30-Java-中的异常处理" class="headerlink" title="30 Java 中的异常处理"></a>30 Java 中的异常处理</h2><h3 id="Java-异常类层次结构图"><a href="#Java-异常类层次结构图" class="headerlink" title="Java 异常类层次结构图"></a>Java 异常类层次结构图</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583669614507-d2917102-9b6d-4e35-a8e4-0b895ed17fdc.png#align=left&display=inline&height=377&originHeight=377&originWidth=600&size=0&status=done&style=none&width=600"></p><p>在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 <strong>Throwable 类</strong>。Throwable： 有两个重要的子类：<strong>Exception（异常）</strong> 和 <strong>Error（错误）</strong> ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p><p><strong>Error（错误）:是程序无法处理的错误</strong>，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java 虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p><p>这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如 Java 虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java 中，错误通过 Error 的子类描述。</p><p><strong>Exception（异常）:是程序本身可以处理的异常</strong>。Exception 类有一个重要的子类 <strong>RuntimeException</strong>。RuntimeException 异常由 Java 虚拟机抛出。<strong>NullPointerException</strong>（要访问的变量没有引用任何对象时，抛出该异常）、<strong>ArithmeticException</strong>（算术运算异常，一个整数除以 0 时，抛出该异常）和 <strong>ArrayIndexOutOfBoundsException</strong> （下标越界异常）。</p><p><strong>注意：异常和错误的区别：异常能被程序本身处理，错误是无法处理。</strong></p><h3 id="Throwable-类常用方法"><a href="#Throwable-类常用方法" class="headerlink" title="Throwable 类常用方法"></a>Throwable 类常用方法</h3><ul><li><strong>public string getMessage()</strong>:返回异常发生时的简要描述</li><li><strong>public string toString()</strong>:返回异常发生时的详细信息</li><li><strong>public string getLocalizedMessage()</strong>:返回异常对象的本地化信息。使用 Throwable 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 getMessage（）返回的结果相同</li><li><strong>public void printStackTrace()</strong>:在控制台上打印 Throwable 对象封装的异常信息</li></ul><h3 id="异常处理总结"><a href="#异常处理总结" class="headerlink" title="异常处理总结"></a>异常处理总结</h3><ul><li><strong>try 块：</strong> 用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。</li><li><strong>catch 块：</strong> 用于处理 try 捕获到的异常。</li><li><strong>finally 块：</strong> 无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或 catch 块中遇到 return</li></ul><p>语句时，finally 语句块将在方法返回之前被执行。</p><p><strong>在以下 4 种特殊情况下，finally 块不会被执行：</strong></p><ol><li>在 finally 语句块第一行发生了异常。 因为在其他行，finally 块还是会得到执行</li><li>在前面的代码中用了 System.exit(int)已退出程序。 exit 是带参函数 ；若该语句在异常语句之后，finally 会执行</li><li>程序所在的线程死亡。</li><li>关闭 CPU。</li></ol><p>下面这部分内容来自 issue:<a href="https://github.com/Snailclimb/JavaGuide/issues/190">https://github.com/Snailclimb/JavaGuide/issues/190</a>。</p><p><strong>注意：</strong> 当 try 语句和 finally 语句中都有 return 语句时，在方法返回之前，finally 语句的内容将被执行，并且 finally 语句的返回值将会覆盖原始的返回值。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value * value;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果调用 <code>f(2)</code>，返回值将是 0，因为 finally 语句的返回值覆盖了 try 语句块的返回值。</p><h2 id="31-Java-序列化中如果有些字段不想进行序列化，怎么办？"><a href="#31-Java-序列化中如果有些字段不想进行序列化，怎么办？" class="headerlink" title="31 Java 序列化中如果有些字段不想进行序列化，怎么办？"></a>31 Java 序列化中如果有些字段不想进行序列化，怎么办？</h2><p>对于不想进行序列化的变量，使用 transient 关键字修饰。</p><p>transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方法。</p><h2 id="32-获取用键盘输入常用的两种方法"><a href="#32-获取用键盘输入常用的两种方法" class="headerlink" title="32 获取用键盘输入常用的两种方法"></a>32 获取用键盘输入常用的两种方法</h2><p>方法 1：通过 Scanner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s  = input.nextLine();</span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure><p>方法 2：通过 BufferedReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader input = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">String s = input.readLine();</span><br></pre></td></tr></table></figure><h2 id="33-Java-中-IO-流"><a href="#33-Java-中-IO-流" class="headerlink" title="33 Java 中 IO 流"></a>33 Java 中 IO 流</h2><h3 id="Java-中-IO-流分为几种"><a href="#Java-中-IO-流分为几种" class="headerlink" title="Java 中 IO 流分为几种?"></a>Java 中 IO 流分为几种?</h3><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分为节点流和处理流。</li></ul><p>Java Io 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p><ul><li>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><p>按操作方式分类结构图：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583669614508-76352a0a-e220-477c-8941-d82952968c51.png#align=left&display=inline&height=1080&originHeight=1080&originWidth=720&size=0&status=done&style=none&width=720"></p><p>按操作对象分类结构图：</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1082206/1583669614498-0517d05d-48ff-4b66-84c8-57d30d714458.png#align=left&display=inline&height=535&originHeight=535&originWidth=720&size=0&status=done&style=none&width=720"></p><h3 id="既然有了字节流-为什么还要有字符流"><a href="#既然有了字节流-为什么还要有字符流" class="headerlink" title="既然有了字节流,为什么还要有字符流?"></a>既然有了字节流,为什么还要有字符流?</h3><p>问题本质想问：<strong>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</strong></p><p>回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h3 id="BIO-NIO-AIO-有什么区别"><a href="#BIO-NIO-AIO-有什么区别" class="headerlink" title="BIO,NIO,AIO 有什么区别?"></a>BIO,NIO,AIO 有什么区别?</h3><ul><li><strong>BIO (Blocking I/O):</strong> 同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机 1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</li><li><strong>NIO (New I/O):</strong> NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 NIO 提供了与传统 BIO 模型中的 <code>Socket</code> 和 <code>ServerSocket</code> 相对应的 <code>SocketChannel</code> 和 <code>ServerSocketChannel</code> 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞 I/O 来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发</li><li><strong>AIO (Asynchronous I/O):</strong> AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的 IO 模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步 IO 的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。</li></ul><h2 id="34-常见关键字总结-static-final-this-super"><a href="#34-常见关键字总结-static-final-this-super" class="headerlink" title="34. 常见关键字总结:static,final,this,super"></a>34. 常见关键字总结:static,final,this,super</h2><p>详见笔主的这篇文章: <a href="https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/Basis/final%E3%80%81static%E3%80%81this%E3%80%81super.md">https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/Basis/final、static、this、super.md</a></p><h2 id="35-Collections-工具类和-Arrays-工具类常见方法总结"><a href="#35-Collections-工具类和-Arrays-工具类常见方法总结" class="headerlink" title="35. Collections 工具类和 Arrays 工具类常见方法总结"></a>35. Collections 工具类和 Arrays 工具类常见方法总结</h2><p>详见笔主的这篇文章: <a href="https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/Basis/Arrays,CollectionsCommonMethods.md">https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/Basis/Arrays,CollectionsCommonMethods.md</a></p><h2 id="36-深拷贝-vs-浅拷贝"><a href="#36-深拷贝-vs-浅拷贝" class="headerlink" title="36. 深拷贝 vs 浅拷贝"></a>36. 深拷贝 vs 浅拷贝</h2><ol><li><strong>浅拷贝</strong>：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。</li><li><strong>深拷贝</strong>：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1082206/1583669614601-895ca1fe-bf63-4877-b0d7-5623fd0af477.jpeg#align=left&display=inline&height=195&originHeight=195&originWidth=400&size=0&status=done&style=none&width=400"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://snailclimb.gitee.io/javaguide/#/?id=java">https://snailclimb.gitee.io/javaguide/#/?id=java</a></li></ul>]]></content>
    
    
    <summary type="html">介绍Java的一些基础知识点</summary>
    
    
    
    <category term="Java" scheme="https://www.khalidlife.com/categories/Java/"/>
    
    <category term="Java基础" scheme="https://www.khalidlife.com/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://www.khalidlife.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo：个人博客搭建</title>
    <link href="https://www.khalidlife.com/posts/iw91xk.html"/>
    <id>https://www.khalidlife.com/posts/iw91xk.html</id>
    <published>2020-03-06T20:08:00.000Z</published>
    <updated>2022-11-29T07:05:59.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><ul><li><a href="https://hexo.io/zh-cn/docs/index.html">Hexo 官方文档</a></li><li>先行安装 Node.js 和 Git</li></ul><h3 id="1-1-安装-Git"><a href="#1-1-安装-Git" class="headerlink" title="1.1 安装 Git"></a>1.1 安装 Git</h3><h3 id="1-2-安装-Node-js"><a href="#1-2-安装-Node-js" class="headerlink" title="1.2 安装 Node.js"></a>1.2 安装 Node.js</h3><h3 id="1-3-安装-Hexo"><a href="#1-3-安装-Hexo" class="headerlink" title="1.3 安装 Hexo"></a>1.3 安装 Hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br><span class="line">sudo npm install hexo --save</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">针对Mac平台:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">若编译报错,请先到AppStore下载安装`Xcode`.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装完,启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。再执行上述命令.</span></span><br></pre></td></tr></table></figure><p>未解决的可以直接输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><h2 id="2-创建博客"><a href="#2-创建博客" class="headerlink" title="2.创建博客"></a>2.创建博客</h2><h3 id="2-1-初始化博客"><a href="#2-1-初始化博客" class="headerlink" title="2.1 初始化博客"></a>2.1 初始化博客</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir myblog       <span class="comment"># 新建 博客文件夹</span></span><br><span class="line"><span class="built_in">cd</span> myblog          <span class="comment"># 切换到 博客文件夹</span></span><br><span class="line">hexo init          <span class="comment"># 初始化</span></span><br><span class="line">sudo npm install   <span class="comment"># 安装依赖</span></span><br></pre></td></tr></table></figure><p>命令执行后,myblog 目录下文件结构:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml  #网站的 配置 信息，您可以在此配置大部分的参数</span><br><span class="line">├── package.json #应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</span><br><span class="line">├── scaffolds #模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</span><br><span class="line">├── scripts #脚本 文件夹。脚本是扩展 Hexo 最简易的方式，在此文件夹内的 JavaScript 文件会被自动执行。</span><br><span class="line">├── source #资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes #主题 文件夹。Hexo 会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure><h2 id="3-运行博客"><a href="#3-运行博客" class="headerlink" title="3 运行博客"></a>3 运行博客</h2><h3 id="3-1-本地运行"><a href="#3-1-本地运行" class="headerlink" title="3.1 本地运行"></a>3.1 本地运行</h3><p>执行以下命令，成功后可访问 <a href="http://localhost:4000/">http://localhost:4000</a> 查看效果</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server</span><br></pre></td></tr></table></figure><h3 id="3-2-常用配置命令"><a href="#3-2-常用配置命令" class="headerlink" title="3.2 常用配置命令"></a>3.2 常用配置命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span>    <span class="comment"># Create a new post</span></span><br><span class="line">hexo server               <span class="comment"># Run server</span></span><br><span class="line">hexo generate             <span class="comment"># Generate static files</span></span><br><span class="line">hexo deploy               <span class="comment"># Deploy to remote sites</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#命令简写:</span></span><br><span class="line">hexo n     <span class="comment"># new</span></span><br><span class="line">hexo g     <span class="comment"># generate</span></span><br><span class="line">hexo s     <span class="comment"># server</span></span><br><span class="line">hexo d     <span class="comment"># deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#常用复合命令：</span></span><br><span class="line">hexo d <span class="literal">-g</span>   <span class="comment"># 生成加部署</span></span><br><span class="line">hexo s <span class="literal">-g</span>   <span class="comment"># 预览加部署</span></span><br></pre></td></tr></table></figure><h2 id="4-部署到-github"><a href="#4-部署到-github" class="headerlink" title="4.部署到 github"></a>4.部署到 github</h2><h3 id="4-1git-上新建仓库"><a href="#4-1git-上新建仓库" class="headerlink" title="4.1git 上新建仓库"></a>4.1git 上新建仓库</h3><h4 id="4-1-1github-上新建仓库"><a href="#4-1-1github-上新建仓库" class="headerlink" title="4.1.1github 上新建仓库"></a>4.1.1github 上新建仓库</h4><ul><li>注意: 该仓库必须按照此格式命名: XXXX.github.io</li><li>XXXX 为 github 用户名</li></ul><h4 id="4-1-2gitee-上新建仓库"><a href="#4-1-2gitee-上新建仓库" class="headerlink" title="4.1.2gitee 上新建仓库"></a>4.1.2gitee 上新建仓库</h4><ul><li>注意: 该仓库必须按照此格式命名: XXXX</li><li>XXXX 为 gitee 用户名</li></ul><h3 id="4-2-配置-config-yml"><a href="#4-2-配置-config-yml" class="headerlink" title="4.2 配置_config.yml"></a>4.2 配置_config.yml</h3><p>修改配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="comment">#建议使用ssh的方式</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="4-3-安装-hexo-deployer-git-插件"><a href="#4-3-安装-hexo-deployer-git-插件" class="headerlink" title="4.3 安装 hexo-deployer-git 插件"></a>4.3 安装 hexo-deployer-git 插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="4-4-部署到远程仓库"><a href="#4-4-部署到远程仓库" class="headerlink" title="4.4 部署到远程仓库"></a>4.4 部署到远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d # 部署到git</span><br></pre></td></tr></table></figure><ul><li><strong>注意：若是 gitee 还需要手动部署下静态文件</strong></li></ul>]]></content>
    
    
    <summary type="html">Hexo：个人博客搭建</summary>
    
    
    
    <category term="教程" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://www.khalidlife.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo：语雀云端写作与Github Actions 持续集成</title>
    <link href="https://www.khalidlife.com/posts/xgblsg.html"/>
    <id>https://www.khalidlife.com/posts/xgblsg.html</id>
    <published>2020-03-06T19:43:50.000Z</published>
    <updated>2022-11-29T07:05:59.570Z</updated>
    
    <content type="html"><![CDATA[<p>未完待续</p>]]></content>
    
    
    <summary type="html">语雀云端写作与 Github Actions 持续集成</summary>
    
    
    
    <category term="教程" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Hexo" scheme="https://www.khalidlife.com/categories/%E6%95%99%E7%A8%8B/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://www.khalidlife.com/tags/Hexo/"/>
    
    <category term="Github Actions" scheme="https://www.khalidlife.com/tags/Github-Actions/"/>
    
  </entry>
  
</feed>
